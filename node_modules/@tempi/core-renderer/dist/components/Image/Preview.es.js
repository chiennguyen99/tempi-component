import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { useRef, useState, useEffect } from 'react';
import { createPortal } from 'react-dom';
import { useSpring, animated } from '@react-spring/web';
import { usePreviewGroup } from '../../contexts/PreviewGroupContext.es.js';
import { getOffset } from '../../utils/getOffset.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const Preview = ({
  open,
  onClose,
  mousePosition,
  src
}) => {
  const ref = useRef();
  const [rendered, setRendered] = useState(open);
  const [currentSrc, setCurrentSrc] = useState(src);
  const [showMask, setShowMask] = useState(open);
  const [showContent, setShowContent] = useState(open);
  const [previewPosition, setPreviewPosition] = useState();
  const [prevBodyAttrs, setPrevBodyAttrs] = useState({});
  const { images, currentIndex, setCurrentIndex } = usePreviewGroup();
  useEffect(() => {
    if (!images)
      return;
    if (open) {
      const baseIndex = images.findIndex((image) => src.includes(image.src)) || 0;
      if (currentIndex !== baseIndex) {
        setCurrentIndex(baseIndex);
      }
    } else {
      currentSrc !== src && setCurrentSrc(src);
    }
  }, [open]);
  const [props, api] = useSpring(
    () => ({
      from: { opacity: open ? 0 : 1 },
      to: { opacity: open ? 1 : 0 },
      config: {
        duration: 100
      },
      onResolve: () => {
        if (!open)
          setShowMask(false);
      }
    }),
    [open]
  );
  const [imgProps, imgApi] = useSpring(() => {
    const baseScale = typeof (previewPosition == null ? void 0 : previewPosition.width) === "number" ? mousePosition.width / (previewPosition == null ? void 0 : previewPosition.width) : 1;
    const baseTranslateX = typeof (previewPosition == null ? void 0 : previewPosition.left) === "number" ? mousePosition.left - (previewPosition == null ? void 0 : previewPosition.left) : 0;
    const baseTranslateY = typeof (previewPosition == null ? void 0 : previewPosition.top) === "number" ? mousePosition.top - (previewPosition == null ? void 0 : previewPosition.top) : 0;
    const scaleFrom = open ? baseScale : 1;
    const translateFrom = open ? `translate(${baseTranslateX}px, ${baseTranslateY}px)` : `translate(0px, 0px)`;
    const scaleTo = open ? 1 : baseScale;
    const translateTo = open ? `translate(0px, 0px)` : `translate(${baseTranslateX}px, ${baseTranslateY}px)`;
    return {
      from: { transform: translateFrom, scale: scaleFrom },
      to: { transform: translateTo, scale: scaleTo },
      config: {
        duration: 100
      },
      onResolve: () => {
        if (!open)
          setShowContent(false);
      }
    };
  }, [open, previewPosition]);
  const getParentWindow = () => {
    var _a, _b;
    return ((_b = (_a = ref.current) == null ? void 0 : _a.ownerDocument) == null ? void 0 : _b.defaultView) || window;
  };
  const getParentDocument = () => {
    var _a;
    return ((_a = ref.current) == null ? void 0 : _a.ownerDocument) || document;
  };
  const bodyScrollDisable = () => {
    setPrevBodyAttrs({
      overflow: getParentDocument().body.style.overflow,
      width: getParentDocument().body.style.width
    });
    const clientWidth = getParentDocument().body.clientWidth;
    getParentDocument().body.style.overflow = "hidden";
    getParentDocument().body.style.width = `${clientWidth}px`;
  };
  const bodyScrollEnable = () => {
    getParentDocument().body.style.width = prevBodyAttrs.width;
    getParentDocument().body.style.overflow = prevBodyAttrs.overflow;
    setPrevBodyAttrs({});
  };
  const handleClosePreview = () => {
    onClose == null ? void 0 : onClose();
  };
  useEffect(() => {
    api.start();
    imgApi.start();
  }, [open]);
  useEffect(() => {
    if (open) {
      setShowMask(true);
      setShowContent(true);
    }
  }, [open]);
  useEffect(() => {
    if (open && !rendered) {
      setRendered(true);
    }
  }, [open, rendered]);
  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.key === "Escape" || e.keyCode === 27) {
        e.preventDefault();
        e.stopPropagation();
        handleClosePreview();
      }
    };
    if (open && rendered) {
      bodyScrollDisable();
      getParentWindow().addEventListener("wheel", handleClosePreview);
      getParentDocument().addEventListener("keydown", handleKeyDown, false);
    } else {
      bodyScrollEnable();
      getParentWindow().removeEventListener("wheel", handleClosePreview);
      getParentWindow().removeEventListener("touchstart", handleClosePreview);
      getParentDocument().removeEventListener("keydown", handleKeyDown, false);
    }
    return () => {
      getParentWindow().removeEventListener("wheel", handleClosePreview);
      getParentWindow().removeEventListener("touchstart", handleClosePreview);
      getParentDocument().removeEventListener("keydown", handleKeyDown, false);
    };
  }, [open, rendered]);
  const onSwitchLeft = (e) => {
    var _a;
    e.stopPropagation();
    if (currentIndex > 0) {
      setCurrentSrc((_a = images[currentIndex - 1]) == null ? void 0 : _a.src);
      setCurrentIndex((prev) => prev - 1);
    }
  };
  const onSwitchRight = (e) => {
    var _a;
    e.stopPropagation();
    if (currentIndex < (images == null ? void 0 : images.length) - 1) {
      setCurrentSrc((_a = images[currentIndex + 1]) == null ? void 0 : _a.src);
      setCurrentIndex((prev) => prev + 1);
    }
  };
  const nextButton = currentIndex < (images == null ? void 0 : images.length) - 1 && /* @__PURE__ */ jsx(StyledNextButton, {
    onClick: onSwitchRight,
    children: /* @__PURE__ */ jsx("svg", {
      width: "36",
      height: "36",
      viewBox: "0 0 36 36",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: /* @__PURE__ */ jsx("path", {
        d: "M28.1933 16.9884L10.0808 2.84154C10.0335 2.80427 9.9766 2.78112 9.9167 2.77473C9.85681 2.76833 9.79632 2.77897 9.7422 2.8054C9.68807 2.83183 9.6425 2.873 9.61071 2.92416C9.57893 2.97533 9.56222 3.03443 9.5625 3.09466V6.20046C9.5625 6.39734 9.65491 6.58618 9.80759 6.70671L24.2719 18.0009L9.80759 29.2951C9.6509 29.4156 9.5625 29.6045 9.5625 29.8014V32.9072C9.5625 33.1764 9.87188 33.325 10.0808 33.1603L28.1933 19.0134C28.3473 18.8933 28.4718 18.7397 28.5574 18.5643C28.6431 18.3888 28.6876 18.1962 28.6876 18.0009C28.6876 17.8057 28.6431 17.613 28.5574 17.4376C28.4718 17.2621 28.3473 17.1085 28.1933 16.9884Z",
        fill: "black"
      })
    })
  });
  const prevButton = currentIndex > 0 && /* @__PURE__ */ jsx(StyledPrevButton, {
    onClick: onSwitchLeft,
    children: /* @__PURE__ */ jsx("svg", {
      width: "36",
      height: "36",
      viewBox: "0 0 36 36",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: /* @__PURE__ */ jsx("path", {
        d: "M26.5188 6.19866V3.09286C26.5188 2.82366 26.2095 2.675 26.0005 2.83974L7.88802 16.9866C7.73413 17.1063 7.60961 17.2595 7.52395 17.4347C7.4383 17.6098 7.39377 17.8022 7.39377 17.9971C7.39377 18.1921 7.4383 18.3844 7.52395 18.5595C7.60961 18.7347 7.73413 18.8879 7.88802 19.0076L26.0005 33.1545C26.2135 33.3192 26.5188 33.1705 26.5188 32.9013V29.7955C26.5188 29.5987 26.4264 29.4098 26.2737 29.2893L11.8095 17.9991L26.2737 6.70491C26.4264 6.58438 26.5188 6.39554 26.5188 6.19866Z",
        fill: "black"
      })
    })
  });
  const unzoomButton = /* @__PURE__ */ jsx(Fragment, {
    children: /* @__PURE__ */ jsx(StyledButtonUnzoom, {
      type: "button",
      children: /* @__PURE__ */ jsx("svg", {
        "aria-hidden": "true",
        "data-rmiz-btn-unzoom-icon": true,
        fill: "currentColor",
        focusable: "false",
        viewBox: "0 0 16 16",
        xmlns: "http://www.w3.org/2000/svg",
        children: /* @__PURE__ */ jsx("path", {
          d: "M 14.144531 1.148438 L 9 6.292969 L 9 3 L 8 3 L 8 8 L 13 8 L 13 7 L 9.707031 7 L 14.855469 1.851563 Z M 8 8 L 3 8 L 3 9 L 6.292969 9 L 1.148438 14.144531 L 1.851563 14.855469 L 7 9.707031 L 7 13 L 8 13 Z"
        })
      })
    })
  });
  const operations = images ? [prevButton, nextButton, unzoomButton] : [unzoomButton];
  return rendered ? /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx("div", {
        ref,
        style: { display: "none" }
      }),
      createPortal(
        /* @__PURE__ */ jsxs("div", {
          children: [
            showMask && /* @__PURE__ */ jsx(MaskSpring, {
              style: props
            }),
            /* @__PURE__ */ jsxs(Content, {
              onClick: onClose,
              style: showContent ? {} : { display: "none" },
              children: [
                operations,
                /* @__PURE__ */ jsx(ImageSpring, {
                  style: __spreadProps(__spreadValues({}, imgProps), { transformOrigin: "top left" }),
                  src: currentSrc,
                  onLoad: (e) => {
                    if (!previewPosition)
                      setPreviewPosition(__spreadValues({
                        width: e.currentTarget.offsetWidth
                      }, getOffset(e.currentTarget)));
                  }
                })
              ]
            })
          ]
        }),
        getParentDocument().body
      )
    ]
  }) : null;
};
const Mask = styled.div`
  position: fixed;
  inset: 0;
  z-index: 10000;
  height: 100%;
  background-color: rgba(255, 255, 255, 1);
  pointer-events: none;
`;
const MaskSpring = animated(Mask);
const Content = styled.div`
  position: fixed;
  inset: 0;
  z-index: 10001;
  overflow: auto;
  outline: 0;
  display: flex;
  align-items: center;
  justify-content: center;
`;
const Image = styled.img`
  max-width: 100vw;
  max-height: 100vh;
  cursor: zoom-out;
`;
const ImageSpring = animated(Image);
const StyledButton = `
position: absolute;
cursor: pointer;
z-index: 1;
border-radius: 50%;
background-color: transparent;
border: none;

&:hover{
  background-color: rgba(0, 0, 0, 0.25);
}
top: 0;
bottom: 0;
margin: auto 0;
padding: 0;
touch-action: manipulation;
height: 72px;
width: 72px;`;
const StyledPrevButton = styled.button`
  ${StyledButton}
  inset: 20px 20px
`;
const StyledNextButton = styled.button`
  ${StyledButton}
  right: 20px;
`;
const StyledButtonUnzoom = styled.button`
  position: absolute;
  cursor: pointer;
  inset: 20px 20px auto auto;
  z-index: 1;
  background-color: rgba(0, 0, 0, 0.7);
  border-radius: 50%;
  border: none;
  box-shadow: 0 0 1px rgba(255, 255, 255, 0.5);
  color: #fff;
  height: 40px;
  margin: 0;
  outline-offset: 2px;
  padding: 9px;
  touch-action: manipulation;
  width: 40px;
`;

export { Preview };
