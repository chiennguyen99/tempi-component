'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var getComponentProps = require('../../utils/getComponentProps.js');
var StoreContext = require('../../contexts/StoreContext.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const NodeElement = (_a) => {
  var _b = _a, {
    id
  } = _b, rest = __objRest(_b, [
    "id"
  ]);
  const _a2 = StoreContext.useStore(), { content, ssrData, componentDict, mappingDynamicSlots } = _a2, configs = __objRest(_a2, ["content", "ssrData", "componentDict", "mappingDynamicSlots"]);
  return React.useMemo(() => {
    var _a3, _b2;
    const nodeData = content[id];
    if (!nodeData || !componentDict[nodeData.tag]) {
      console.warn("Cannot found component: " + ((_a3 = nodeData == null ? void 0 : nodeData.tag) == null ? void 0 : _a3.toString()));
      return null;
    }
    const { className, props, isVisible } = getComponentProps.getComponentProps(
      nodeData,
      configs,
      ssrData[id]
    );
    if (!isVisible)
      return null;
    let children;
    if ((_b2 = nodeData == null ? void 0 : nodeData.children) == null ? void 0 : _b2.length) {
      children = nodeData.children.map((childId) => /* @__PURE__ */ jsxRuntime.jsx(NodeElement, {
        id: childId
      }, childId));
    }
    const render = React__default["default"].createElement(
      componentDict[nodeData.tag],
      __spreadValues(__spreadValues({ key: id, ssrData: ssrData[id], className }, props), rest),
      children
    );
    return render;
  }, [content[id], rest]);
};

exports.NodeElement = NodeElement;
