'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var set = require('lodash.set');
var get = require('lodash.get');
var React = require('react');
var useLocationChange = require('../hooks/useLocationChange.js');
var computeStringHandleBarsExpression = require('../utils/computeStringHandleBarsExpression.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var set__default = /*#__PURE__*/_interopDefaultLegacy(set);
var get__default = /*#__PURE__*/_interopDefaultLegacy(get);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const PageDataStateContext = React__default["default"].createContext({});
const PageDataProvider = ({ children, user }) => {
  const [queryParams, setQueryParams] = React.useState();
  const [components, setComponents] = React.useState();
  useLocationChange.useLocationChange(() => {
    const search = window.location.search;
    setQueryParams(Object.fromEntries(new URLSearchParams(search)));
  }, true);
  const setComponentValueByPath = (path, value) => {
    const newComponents = Object.assign({}, components);
    set__default["default"](newComponents, path, value);
    setComponents(newComponents);
  };
  const getValueByPath = (contextPath) => {
    if (!computeStringHandleBarsExpression.isHandleBarsVariable(contextPath))
      return get__default["default"]({ components, user, queryParams }, contextPath);
    return computeStringHandleBarsExpression.computeStringHandleBarsExpression(contextPath, {
      components,
      user,
      queryParams
    });
  };
  return /* @__PURE__ */ jsxRuntime.jsx(PageDataStateContext.Provider, {
    value: {
      setComponentValueByPath,
      getValueByPath,
      storeData: {
        components,
        queryParams,
        user
      }
    },
    children
  });
};
function usePageData() {
  const context = React.useContext(PageDataStateContext);
  if (!context) {
    throw new Error(
      "use must be inside a ComponentStateContext with a state value"
    );
  }
  return context;
}

exports.PageDataProvider = PageDataProvider;
exports.usePageData = usePageData;
