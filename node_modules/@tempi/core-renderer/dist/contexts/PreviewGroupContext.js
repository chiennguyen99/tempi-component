'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var image = require('../utils/image.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const PreviewGroupContext = React__default["default"].createContext({});
const PreviewGroupProvider = ({
  children,
  images
}) => {
  const [currentIndex, setCurrentIndex] = React.useState();
  const newSrcImages = images.map((image$1) => {
    const { src, googleImageParams } = image$1;
    const newSrc = image.getImageUrlFromGoogleUserContent(
      src,
      image.preProcesssorGoogleImageParams(googleImageParams, {
        format: "webp"
      })
    );
    const pngSrc = image.getImageUrlFromGoogleUserContent(
      src,
      image.preProcesssorGoogleImageParams(googleImageParams, { format: "png" })
    );
    return __spreadProps(__spreadValues({}, image$1), { src: newSrc || pngSrc || src });
  });
  return /* @__PURE__ */ jsxRuntime.jsx(PreviewGroupContext.Provider, {
    value: { images: newSrcImages, currentIndex, setCurrentIndex },
    children
  });
};
const usePreviewGroup = () => {
  const context = React.useContext(PreviewGroupContext);
  if (!context) {
    throw new Error(
      "usePreviewGroup must be inside a PreviewGroupContext with a state value"
    );
  }
  return context;
};

exports.PreviewGroupProvider = PreviewGroupProvider;
exports.usePreviewGroup = usePreviewGroup;
