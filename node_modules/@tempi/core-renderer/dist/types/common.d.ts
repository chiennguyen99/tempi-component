/// <reference types="node" />
import { UrlObject } from 'url';
import { AlignmentType, Style } from './style';
import { TrackingAttr } from './tracking';
export interface TimeVisibility {
    startTime?: string;
    endTime?: string;
    ruleRepeat?: string;
    date?: string;
    duration?: number[];
}
export declare enum RepeatTypeEnum {
    DAILY = "DAILY",
    DAY_IN_WEEK = "DAY_IN_WEEK",
    CUSTOM = "CUSTOM",
    NO_REPEAT = "NO_REPEAT"
}
export declare enum UnitRepeatEnum {
    DAY = "DAILY",
    WEEK = "WEEKLY",
    MONTH = "MONTH",
    YEAR = "YEAR",
    DURATION = "DURATION"
}
export declare enum RuleRepeatEnum {
    FREQ = "FREQ",
    INTERVAL = "INTERVAL",
    BYDAY = "BYDAY",
    UNTIL = "UNTIL"
}
export type ResponsiveResource<T, S = T> = T & {
    desktop?: T;
    mobile?: S;
};
export interface Responsive {
    hiddenXs?: boolean;
    hiddenMd?: boolean;
}
export interface LinkInterfaceV2 {
    openNewTab?: boolean;
    href: string | UrlObject;
    nofollow?: boolean;
}
export type EventType = 'link' | 'email' | 'phone' | 'inPage' | 'internal' | 'openPopup' | 'closePopup' | 'closePopupList' | 'openPageOfWebsite';
export interface EventInterface {
    eventType: EventType;
    link?: LinkInterfaceV2;
    email?: string;
    phone?: string;
    inPage?: string;
    sectionMarginTop?: number;
    trackingEventName?: string;
    togglePopup?: string;
    conversionGGAdsLabel?: string;
    conversionGGAdsId?: string;
    scriptCustom?: string;
    conversionValue?: string;
    openPageOfWebsite?: LinkInterfaceV2;
    tekoTrackingEvent?: TrackingAttr;
}
export interface GoogleImageParams {
    width?: number;
    percent?: number;
    height?: number;
    format?: 'webp' | 'png' | 'jpg' | 'webp';
    stretch?: boolean;
    crop?: boolean;
}
export interface TimeDelta {
    durationInSecond: number;
    days: number;
    hours: number;
    minutes: number;
    seconds: number;
}
export interface CommonAttributesInterface {
    id?: string;
    commonStyle?: Style & ResponsiveResource<Style>;
    event?: EventInterface;
    responsive?: Responsive;
    timeVisibility?: TimeVisibility;
    syncDeviceStyle?: boolean;
    dataUniqId?: string;
}
export interface Image extends CommonAttributesInterface, GoogleImageParams {
    hoverEffect?: string;
    src?: string;
    alt?: string;
    width?: number;
    customWidth?: number;
    alignment?: AlignmentType;
    googleImageParams?: GoogleImageParams;
    zoomPreview?: boolean;
    fetchPriority?: 'low' | 'auto' | 'high';
    autoOptimize?: boolean;
}
export interface BreakpointWidth {
    value: number;
    unit: 'px' | '%';
}
//# sourceMappingURL=common.d.ts.map