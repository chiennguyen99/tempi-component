import React from 'react';
export declare enum UnitEnum {
    percent = "%",
    pixel = "px"
}
export interface Spacing {
    top?: number;
    right?: number;
    bottom?: number;
    left?: number;
    unit?: UnitEnum;
}
export type BorderStyle = 'none' | 'dotted' | 'dashed' | 'solid';
export type Margin = Spacing;
export type Padding = Spacing;
export interface Border {
    borderStyle?: BorderStyle;
    borderWidth?: number;
    borderColor?: string;
    borderRadius?: number;
}
export interface Size {
    width?: number;
    maxWidth?: number;
    minWidth?: number;
    height?: number;
    maxHeight?: number;
    minHeight?: number;
}
export interface Shadow {
    color?: string;
    x?: number;
    y?: number;
    blur?: number;
    spread?: number;
    on?: boolean;
    opacity?: number;
}
export type TextShadow = Omit<Shadow, 'spread'>;
export declare enum OverlayType {
    color = "color",
    gradient = "gradient"
}
export interface Hover {
    backgroundColor?: string;
    borderColor?: string;
    color?: string;
    transparent?: number;
    zoom?: number;
    background?: string;
}
export interface AnimationProps {
    name?: string;
    delay?: number;
    duration?: number;
    repeatType?: 'infinite' | 'number';
    repeatNumber?: number;
}
export declare enum ColorType {
    solid = "solid",
    gradient = "gradient"
}
export interface ColorPickerInterface {
    colorType: ColorType;
    colorValue: string | GradientColor;
}
export declare enum GradientType {
    linear = "linear",
    radial = "radial"
}
export interface GradientColor {
    gradientType: GradientType;
    colors: Array<GradientColorItem>;
    radius?: number;
}
export interface GradientColorItem {
    color: string;
    stop: number;
}
export declare enum Alignment {
    left = "left",
    center = "center",
    right = "right",
    justify = "justify"
}
export declare enum VerticalAlignment {
    top = "top",
    center = "center",
    bottom = "bottom"
}
export interface BackgroundVideoInterface {
    src?: string;
    uploadSrc?: string;
    defaultOverlay?: string;
    background?: string;
    objectFit?: string;
}
export type Style = Partial<Pick<React.CSSProperties, 'fontSize' | 'fontStyle' | 'fontVariant' | 'lineHeight' | 'letterSpacing' | 'textTransform' | 'textDecoration' | 'textAlign' | 'width' | 'minWidth' | 'maxWidth' | 'height' | 'minHeight' | 'maxHeight' | 'marginLeft' | 'marginRight' | 'backgroundPosition' | 'backgroundSize' | 'backgroundRepeat' | 'position' | 'objectFit' | 'gap' | 'rowGap' | 'columnGap' | 'flexDirection' | 'justifyContent' | 'alignItems' | 'flexWrap' | 'borderWidth' | 'borderStyle' | 'borderColor' | 'borderRadius' | 'flex' | 'background' | 'display' | 'zIndex' | 'top' | 'right' | 'bottom' | 'left' | 'objectPosition' | 'borderTopLeftRadius' | 'borderTopRightRadius' | 'borderBottomLeftRadius' | 'borderBottomRightRadius'>> & {
    color?: string;
    fontFamily?: string;
    fontWeight?: string;
    margin?: Margin;
    padding?: Padding;
    border?: Border;
    shadow?: Shadow;
    textShadow?: TextShadow;
    bgImageWidth?: number;
    bgImagePercent?: number;
    backgroundColor?: string;
    backgroundImage?: string;
    backgroundOverlay?: string;
    backgroundOverlayType?: OverlayType;
    backgroundMarqueeDirection?: 'vertical' | 'horizontal';
    backgroundMarqueeSpeed?: number;
    hover?: Hover;
    animation?: AnimationProps;
    gap?: number;
    widthUnit?: UnitEnum;
    heightUnit?: UnitEnum;
    defaultOverlay?: string;
    backgroundVideo?: BackgroundVideoInterface;
    cornerType?: CornerType;
};
export type AlignmentType = 'left' | 'center' | 'right' | 'justify';
export type FlexBoxAlignment = 'flex-start' | 'center' | 'flex-end' | 'space-between';
export interface UnitSizeInterface {
    unit: UnitEnum;
    size?: number;
}
export type CornerType = 'common' | 'detail';
//# sourceMappingURL=style.d.ts.map