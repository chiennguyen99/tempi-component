import { UnitEnum } from '../../types';
import { getBreakpointWidthFromStyle } from '../../utils/getBreakpointWidthFromStyle';
describe('getBreakpointWidthFromStyle', () => {
    it('getBreakpointWidthFromStyle - width pixel number, not have unit', async () => {
        const brpWidth = getBreakpointWidthFromStyle({ width: 50 });
        expect(brpWidth).toEqual({
            value: 50,
            unit: 'px',
        });
    });
    it('getBreakpointWidthFromStyle - width widthUnit %', async () => {
        const brpWidth = getBreakpointWidthFromStyle({
            width: 50,
            widthUnit: UnitEnum.percent,
        });
        expect(brpWidth).toEqual({
            value: 50,
            unit: '%',
        });
    });
    it('getBreakpointWidthFromStyle - width widthUnit pixel', async () => {
        const brpWidth = getBreakpointWidthFromStyle({
            width: 50,
            widthUnit: UnitEnum.pixel,
        });
        expect(brpWidth).toEqual({
            value: 50,
            unit: 'px',
        });
    });
    it('getBreakpointWidthFromStyle - do not handle - width string, not have unit - 1', async () => {
        const brpWidth = getBreakpointWidthFromStyle({ width: '50vw' });
        expect(brpWidth).toEqual({
            value: 100,
            unit: '%',
        });
    });
    it('getBreakpointWidthFromStyle - do not handle - width string, not have unit - 2', async () => {
        const brpWidth = getBreakpointWidthFromStyle({ width: '50px' });
        expect(brpWidth).toEqual({
            value: 100,
            unit: '%',
        });
    });
    it('getBreakpointWidthFromStyle - do not handle - width string, not have unit - 3', async () => {
        const brpWidth = getBreakpointWidthFromStyle({ width: '50%' });
        expect(brpWidth).toEqual({
            value: 100,
            unit: '%',
        });
    });
    it('getBreakpointWidthFromStyle - do not handle - wrong data', async () => {
        const brpWidth = getBreakpointWidthFromStyle({
            width: '50%',
            widthUnit: UnitEnum.percent,
        });
        expect(brpWidth).toEqual({
            value: 100,
            unit: '%',
        });
    });
});
