/// <reference types="react" />
import { BaseStoreState, StoreState } from '../contexts';
import { BaseElementInterface, PageBuilderResponse, SSRData } from '../types';
export interface RenderPageProps<T extends {
    [key: string]: BaseElementInterface;
}, S = {}> {
    content?: PageBuilderResponse<T>;
    ssrData?: SSRData;
    mappingDynamicSlots?: StoreState<S & BaseStoreState>['mappingDynamicSlots'];
    configs?: StoreState<S & BaseStoreState>;
    rootId?: string;
    addGlobalStyle?: boolean;
    addLandingLinks?: boolean;
    numOfHydratedBlocks?: number;
    componentDict: {
        [tag in keyof T]?: React.ComponentType;
    };
}
export declare const RenderPage: <T extends {
    [tag: string]: BaseElementInterface;
} = {}, S = {}>({ content, configs, ssrData, mappingDynamicSlots, rootId, addGlobalStyle, numOfHydratedBlocks, addLandingLinks, componentDict, }: RenderPageProps<T, S>) => JSX.Element;
//# sourceMappingURL=RenderPage.d.ts.map