'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var dayjs = require('dayjs');
var common = require('../types/common.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);

const formatDate = (date) => {
  if (!date)
    return void 0;
  return new Date(date).toISOString();
};
const parseRuleRepeat = (field, ruleRepeat) => {
  var _a;
  const regex = new RegExp(`(${field}:)[^;]+(?=;)`, "g");
  const result = ruleRepeat.match(regex);
  return (result == null ? void 0 : result.length) > 0 ? (_a = result[0]) == null ? void 0 : _a.replaceAll(`${field}:`, "") : void 0;
};
const validateIsVisibleComponent = ({
  startTime,
  endTime,
  ruleRepeat,
  date,
  duration
}) => {
  var _a;
  const now = new Date().toISOString();
  const formattedStartTime = formatDate(startTime);
  const formattedEndTime = formatDate(endTime);
  if (formattedStartTime && now < formattedStartTime) {
    return false;
  }
  if (formattedEndTime && now >= formattedEndTime) {
    return false;
  }
  if (ruleRepeat) {
    const interval = parseRuleRepeat(common.RuleRepeatEnum.INTERVAL, ruleRepeat) ? parseInt(parseRuleRepeat(common.RuleRepeatEnum.INTERVAL, ruleRepeat)) : 1;
    const freq = parseRuleRepeat(common.RuleRepeatEnum.FREQ, ruleRepeat);
    const until = parseRuleRepeat(common.RuleRepeatEnum.UNTIL, ruleRepeat);
    const byDay = parseRuleRepeat(common.RuleRepeatEnum.BYDAY, ruleRepeat);
    if (date && now < dayjs__default["default"](date).hour(0).minute(0).second(0).toISOString())
      return false;
    if (until && now > formatDate(until))
      return false;
    let isDateVisible = true;
    const isValidTime = (unit) => {
      if (interval === 1 && (unit === "day" || unit === "week"))
        return true;
      const dateDiff = date ? dayjs__default["default"](now).diff(date, unit) : -1;
      return dateDiff >= 0 && dateDiff % interval === 0;
    };
    switch (freq) {
      case common.UnitRepeatEnum.DAY:
        isDateVisible = isValidTime("day");
        break;
      case common.UnitRepeatEnum.WEEK:
        isDateVisible = isValidTime("week") && ((_a = byDay == null ? void 0 : byDay.split(",")) == null ? void 0 : _a.includes(dayjs__default["default"](now).day().toString()));
        break;
      case common.UnitRepeatEnum.MONTH:
        isDateVisible = isValidTime("month") && dayjs__default["default"](now).get("date") === dayjs__default["default"](date).get("date");
        break;
      case common.UnitRepeatEnum.YEAR:
        isDateVisible = isValidTime("year") && dayjs__default["default"](now).get("date") === dayjs__default["default"](date).get("date") && dayjs__default["default"](now).get("month") === dayjs__default["default"](date).get("month");
        break;
    }
    if (!isDateVisible)
      return false;
    if (duration && (duration[0] && dayjs__default["default"](now).hour() * 60 + dayjs__default["default"](now).minute() < duration[0] || duration[1] && dayjs__default["default"](now).hour() * 60 + dayjs__default["default"](now).minute() >= duration[1]))
      return false;
  }
  return true;
};
const calculateTimeDelta = (startTime, endTime) => {
  const fromTimestamp = startTime.getTime();
  const endTimestamp = endTime.getTime();
  const durationInSecond = Math.max(
    0,
    Math.round((endTimestamp - fromTimestamp) / 1e3)
  );
  return {
    durationInSecond,
    days: Math.floor(durationInSecond / (3600 * 24)),
    hours: Math.floor(durationInSecond / 3600 % 24),
    minutes: Math.floor(durationInSecond / 60 % 60),
    seconds: Math.floor(durationInSecond % 60)
  };
};

exports.calculateTimeDelta = calculateTimeDelta;
exports.parseRuleRepeat = parseRuleRepeat;
exports.validateIsVisibleComponent = validateIsVisibleComponent;
