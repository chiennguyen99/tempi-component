function clamp(val, min, max) {
  return Math.min(Math.max(val, min), max);
}
function hsl2rgb(hsl) {
  const h = hsl[0] / 360, s = hsl[1] / 100, l = hsl[2] / 100;
  let t2, t3, val;
  if (s == 0) {
    val = l * 255;
    return [val, val, val];
  }
  if (l < 0.5)
    t2 = l * (1 + s);
  else
    t2 = l + s - l * s;
  const t1 = 2 * l - t2;
  const rgb = [0, 0, 0];
  for (let i = 0; i < 3; i++) {
    t3 = h + 1 / 3 * -(i - 1);
    t3 < 0 && t3++;
    t3 > 1 && t3--;
    if (6 * t3 < 1)
      val = t1 + (t2 - t1) * 6 * t3;
    else if (2 * t3 < 1)
      val = t2;
    else if (3 * t3 < 2)
      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    else
      val = t1;
    rgb[i] = val * 255;
  }
  return rgb;
}
function componentToHex(c) {
  const value = Math.round(clamp(c, 0, 255));
  const hex = value.toString(16);
  return hex.length == 1 ? "0" + hex : hex;
}
function rgb2hex(rgb) {
  const alpha = rgb.length === 4 ? componentToHex(rgb[3] * 255) : "";
  return "#" + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]) + alpha;
}
function rgb2hsl(rgb) {
  const r = rgb[0] / 255, g = rgb[1] / 255, b = rgb[2] / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), delta = max - min;
  let h, s;
  if (max == min)
    h = 0;
  else if (r == max)
    h = (g - b) / delta;
  else if (g == max)
    h = 2 + (b - r) / delta;
  else if (b == max)
    h = 4 + (r - g) / delta;
  h = Math.min(h * 60, 360);
  if (h < 0)
    h += 360;
  const l = (min + max) / 2;
  if (max == min)
    s = 0;
  else if (l <= 0.5)
    s = delta / (max + min);
  else
    s = delta / (2 - max - min);
  return [h, s * 100, l * 100];
}

export { hsl2rgb, rgb2hex, rgb2hsl };
