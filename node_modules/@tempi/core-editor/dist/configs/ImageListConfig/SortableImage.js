'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var React = require('react');
var utilities = require('@dnd-kit/utilities');
var antd = require('antd');
var sortable = require('@dnd-kit/sortable');
var styled = require('@emotion/styled');
var ImageSetting = require('./ImageSetting.js');
var reactFrameComponent = require('react-frame-component');
var reactIcons = require('@fluentui/react-icons');
var default_image = require('../../assets/images/default_image.js');
var EventConfig = require('../EventConfig/EventConfig.js');
var TimeVisibilityConfig = require('../TimingConfig/TimeVisibilityConfig.js');
var ImageUploadButton = require('../ImageConfig/ImageUploadButton.js');
var propKey = require('../../constants/propKey.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const SortableImage = ({
  id,
  src,
  index,
  onRemove,
  propKey: propKey$1,
  imageHeight = 150,
  actions = ["editInfo", "editEvent", "timingConfig"],
  separateDevice
}) => {
  const { attributes, listeners, setNodeRef, transform, transition } = sortable.useSortable({ id });
  const [openEditModal, setOpenEditModal] = React.useState(false);
  const [openEventModal, setOpenEventModal] = React.useState(false);
  const [openTimingConfig, setOpenTimingConfig] = React.useState(false);
  const { document: frameDocument } = reactFrameComponent.useFrame();
  const imageUploadRef = React__default["default"].useRef(null);
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsxs(Wrapper, {
        style: {
          transform: utilities.CSS.Transform.toString(transform),
          transition
        },
        ref: setNodeRef,
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(antd.Tag, {
            color: "#fff",
            style: {
              color: "#333",
              borderRadius: 999,
              position: "absolute",
              top: 10,
              left: 10,
              zIndex: 1,
              boxShadow: "0px 0px 4px rgba(68, 68, 68, 0.1)"
            },
            children: index + 1
          }),
          /* @__PURE__ */ jsxRuntime.jsxs(antd.Space, {
            style: {
              position: "absolute",
              top: 10,
              right: 10,
              zIndex: 1
            },
            children: [
              actions.map((Action) => {
                return /* @__PURE__ */ jsxRuntime.jsxs("div", {
                  className: "action-button",
                  children: [
                    Action === "editInfo" && /* @__PURE__ */ jsxRuntime.jsx(antd.Button, {
                      shape: "circle",
                      type: "default",
                      onClick: () => setOpenEditModal(true),
                      icon: /* @__PURE__ */ jsxRuntime.jsx(reactIcons.SettingsRegular, {
                        style: { fontSize: 14 }
                      })
                    }),
                    Action === "editEvent" && /* @__PURE__ */ jsxRuntime.jsx(antd.Button, {
                      shape: "circle",
                      type: "default",
                      onClick: () => setOpenEventModal(true),
                      icon: /* @__PURE__ */ jsxRuntime.jsx(reactIcons.LinkRegular, {
                        style: { fontSize: 14 }
                      })
                    }),
                    Action === "timingConfig" && /* @__PURE__ */ jsxRuntime.jsx(antd.Button, {
                      shape: "circle",
                      type: "default",
                      onClick: () => setOpenTimingConfig(true),
                      icon: /* @__PURE__ */ jsxRuntime.jsx(reactIcons.ClockRegular, {
                        style: { fontSize: 14 }
                      })
                    }),
                    typeof Action === "function" && /* @__PURE__ */ jsxRuntime.jsx(Action, {
                      propKey: propKey$1,
                      index,
                      separateDevice
                    })
                  ]
                });
              }),
              /* @__PURE__ */ jsxRuntime.jsx("div", {
                className: "action-button",
                children: /* @__PURE__ */ jsxRuntime.jsx(antd.Button, {
                  shape: "circle",
                  type: "default",
                  onClick: onRemove,
                  icon: /* @__PURE__ */ jsxRuntime.jsx(reactIcons.DeleteRegular, {
                    style: { fontSize: 14 }
                  })
                })
              })
            ]
          }),
          /* @__PURE__ */ jsxRuntime.jsx(antd.Image, __spreadProps(__spreadValues(__spreadValues({}, listeners), attributes), {
            src,
            height: imageHeight,
            width: "100%",
            style: {
              objectFit: "cover",
              borderRadius: 4
            },
            fallback: default_image,
            preview: false,
            onDoubleClick: () => {
              var _a, _b;
              return (_b = (_a = imageUploadRef == null ? void 0 : imageUploadRef.current) == null ? void 0 : _a.querySelector("input")) == null ? void 0 : _b.click();
            }
          }))
        ]
      }),
      /* @__PURE__ */ jsxRuntime.jsx(antd.Modal, {
        zIndex: 1080,
        open: openEditModal,
        onCancel: () => setOpenEditModal(false),
        cancelButtonProps: {
          style: {
            display: "none"
          }
        },
        destroyOnClose: true,
        onOk: () => setOpenEditModal(false),
        closable: false,
        okText: i18n.t("\u0110\xF3ng"),
        title: i18n.t("Ch\u1EC9nh s\u1EEDa th\xF4ng tin \u1EA3nh"),
        getContainer: () => (frameDocument == null ? void 0 : frameDocument.body) || (document == null ? void 0 : document.body),
        children: /* @__PURE__ */ jsxRuntime.jsx(ImageSetting.ImageSetting, {
          separateDevice,
          srcPropKey: propKey.PROP_KEY.joinKey(propKey$1, `[${index}]`, propKey.PROP_KEY.Src),
          widthPropKey: propKey.PROP_KEY.joinKey(
            propKey$1,
            `[${index}]`,
            propKey.PROP_KEY.GoogleImageParams,
            propKey.PROP_KEY.Width
          ),
          altPropKey: propKey.PROP_KEY.joinKey(propKey$1, `[${index}]`, propKey.PROP_KEY.Alt)
        })
      }),
      /* @__PURE__ */ jsxRuntime.jsx(EventConfig.EventConfig, {
        separateDevice,
        propKey: propKey.PROP_KEY.joinKey(propKey$1, `[${index}]`),
        visible: openEventModal,
        setVisible: setOpenEventModal
      }),
      /* @__PURE__ */ jsxRuntime.jsx(TimeVisibilityConfig.TimeVisibilityConfig, {
        visible: openTimingConfig,
        setVisible: setOpenTimingConfig,
        propKey: propKey.PROP_KEY.joinKey(propKey$1, `[${index}]`),
        separateDevice
      }),
      /* @__PURE__ */ jsxRuntime.jsx("div", {
        ref: imageUploadRef,
        style: { display: "none" },
        children: /* @__PURE__ */ jsxRuntime.jsx(ImageUploadButton.ImageUploadButton, {
          imagePropKey: propKey.PROP_KEY.joinKey(propKey$1, `[${index}]`, propKey.PROP_KEY.Src),
          widthPropKey: propKey.PROP_KEY.joinKey(
            propKey$1,
            `[${index}]`,
            propKey.PROP_KEY.GoogleImageParams,
            propKey.PROP_KEY.Width
          )
        })
      })
    ]
  });
};
const Wrapper = styled__default["default"].li`
  position: relative;
  list-style: none;
  cursor: grabbing;
  box-shadow: 0px 0px 4px rgba(68, 68, 68, 0.2);
  border-radius: 4px;

  .action-button {
    display: none;
  }

  :hover {
    .action-button {
      display: block;
    }
  }
`;

exports.SortableImage = SortableImage;
