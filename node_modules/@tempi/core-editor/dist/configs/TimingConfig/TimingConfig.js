'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var styled = require('@emotion/styled');
var dayjs = require('dayjs');
var React = require('react');
var coreRenderer = require('@tempi/core-renderer');
var antd = require('antd');
var SelectSegment = require('./SelectSegment.js');
var i18n = require('../../i18n.js');
var SelectConfig = require('../SelectConfig/SelectConfig.js');
var FormItem = require('../../components/FormItem/FormItem.js');
var InputNumberConfig = require('../InputNumberConfig/InputNumberConfig.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);

const formatDate = (date) => {
  if (!dayjs__default["default"].isDayjs(date))
    return void 0;
  return dayjs__default["default"](date).toISOString();
};
const TimingConfig = ({
  startTime,
  endTime,
  ruleRepeat,
  date,
  duration,
  setStartTime,
  setEndTime,
  setRuleRepeat,
  setDate,
  setDuration
}) => {
  var _a;
  const [unitRepeat, setUnitRepeat] = React.useState();
  const [endTimeRepeat, setEndTimeRepeat] = React.useState("");
  const [segmentSelected, setSegmentSelected] = React.useState();
  const [numberRepeat, setNumberRepeat] = React.useState();
  const [typeSelectTime, setTypeSelectTime] = React.useState("");
  const [startDuration, setStartDuration] = React.useState();
  const [endDuration, setEndDuration] = React.useState();
  const timeFormat = "DD/MM/YYYY HH:mm:ss";
  React.useEffect(() => {
    if (duration) {
      const [start, end] = duration;
      setStartDuration(start);
      setEndDuration(end);
    }
    initRuleRepeat();
  }, []);
  const initRuleRepeat = () => {
    var _a2;
    if (!ruleRepeat) {
      (startTime || endTime) && setTypeSelectTime(coreRenderer.RepeatTypeEnum.NO_REPEAT);
      return;
    }
    const freq = coreRenderer.parseRuleRepeat(coreRenderer.RuleRepeatEnum.FREQ, ruleRepeat);
    const interval = coreRenderer.parseRuleRepeat(coreRenderer.RuleRepeatEnum.INTERVAL, ruleRepeat) || "1";
    const until = coreRenderer.parseRuleRepeat(coreRenderer.RuleRepeatEnum.UNTIL, ruleRepeat);
    const byday = coreRenderer.parseRuleRepeat(coreRenderer.RuleRepeatEnum.BYDAY, ruleRepeat);
    setNumberRepeat(parseInt(interval));
    if (freq)
      setUnitRepeat(freq);
    if (until) {
      setEndTimeRepeat(until);
    }
    if (byday)
      setSegmentSelected((_a2 = byday.split(",")) == null ? void 0 : _a2.map((item) => parseInt(item)));
    if (freq === coreRenderer.UnitRepeatEnum.DURATION || startTime || endTime) {
      setTypeSelectTime(coreRenderer.RepeatTypeEnum.NO_REPEAT);
    }
    if (+interval === 1 && freq === coreRenderer.UnitRepeatEnum.DAY) {
      setTypeSelectTime(coreRenderer.RepeatTypeEnum.DAILY);
    }
    if (+interval > 1 || freq !== coreRenderer.UnitRepeatEnum.DAY && freq !== coreRenderer.UnitRepeatEnum.DURATION) {
      setTypeSelectTime(coreRenderer.RepeatTypeEnum.CUSTOM);
    }
  };
  const convertToDateTime = (time) => {
    if (time === void 0)
      return void 0;
    const day = date ? dayjs__default["default"](date) : dayjs__default["default"]();
    const hour = Math.floor(time / 60);
    const minute = time - hour * 60;
    return day.hour(hour).minute(minute);
  };
  const disabledStartDate = (current) => {
    if (!endTime)
      return false;
    return current == null ? void 0 : current.isAfter(endTime, "day");
  };
  const disabledEndDate = (current) => {
    if (!startTime)
      return false;
    return current == null ? void 0 : current.isBefore(startTime, "day");
  };
  const setTime = (startTime2, endTime2) => {
    if (startTime2 && endTime2 && dayjs__default["default"](startTime2).isAfter(endTime2)) {
      setStartTime(endTime2);
      setEndTime(startTime2);
    } else {
      setStartTime(startTime2);
      setEndTime(endTime2);
    }
  };
  const onChangeSegment = (item) => {
    setSegmentSelected((prev) => {
      const indexOfItem = prev == null ? void 0 : prev.indexOf(item);
      if (indexOfItem !== void 0) {
        if (indexOfItem < 0) {
          return [...prev || [], item];
        } else {
          const res = [...prev || []];
          res.splice(indexOfItem, 1);
          return res;
        }
      }
    });
  };
  React.useEffect(() => {
    handlerRuleRepeat({
      freq: unitRepeat,
      byDay: segmentSelected == null ? void 0 : segmentSelected.join(","),
      until: endTimeRepeat,
      interval: numberRepeat
    });
  }, [
    unitRepeat,
    segmentSelected,
    endTimeRepeat,
    typeSelectTime,
    numberRepeat
  ]);
  const handlerRuleRepeat = ({
    freq,
    byDay,
    until,
    interval
  }) => {
    const newRuleRepeat = `${freq ? `${coreRenderer.RuleRepeatEnum.FREQ}:${freq};` : ""}${interval ? `${coreRenderer.RuleRepeatEnum.INTERVAL}:${interval};` : ""}${byDay ? `${coreRenderer.RuleRepeatEnum.BYDAY}:${byDay};` : ""}${until ? `${coreRenderer.RuleRepeatEnum.UNTIL}:${until};` : ""}`;
    if (!ruleRepeat && !newRuleRepeat)
      return;
    setRuleRepeat(newRuleRepeat);
  };
  const handlerDuration = (value) => {
    const [start, end] = value || [void 0, void 0];
    const startToMinute = start ? start.hour() * 60 + start.minute() : void 0;
    const endToMinute = end ? end.hour() * 60 + end.minute() : void 0;
    setStartDuration(startToMinute);
    setEndDuration(endToMinute);
    setDuration(
      startToMinute !== void 0 && endToMinute !== void 0 ? [startToMinute, endToMinute] : void 0
    );
  };
  const onChangeTypeSelectTime = (value) => {
    resetRepeat();
    setTypeSelectTime(value);
    switch (value) {
      case coreRenderer.RepeatTypeEnum.CUSTOM:
        setUnitRepeat(coreRenderer.UnitRepeatEnum.WEEK);
        setSegmentSelected([1]);
        setNumberRepeat(1);
        break;
      case coreRenderer.RepeatTypeEnum.DAILY:
        setUnitRepeat(coreRenderer.UnitRepeatEnum.DAY);
        setNumberRepeat(1);
        break;
      case coreRenderer.RepeatTypeEnum.NO_REPEAT:
        setUnitRepeat(coreRenderer.UnitRepeatEnum.DURATION);
        break;
    }
  };
  const textDescForRuleRepeat = (interval, unitRepeat2, dateTime) => {
    if (!dateTime || !(unitRepeat2 === coreRenderer.UnitRepeatEnum.YEAR || unitRepeat2 === coreRenderer.UnitRepeatEnum.MONTH))
      return "";
    const unit = {
      month: i18n.t("th\xE1ng"),
      year: i18n.t("n\u0103m")
    };
    const format = unitRepeat2 == coreRenderer.UnitRepeatEnum.YEAR ? "DD/MM" : "DD";
    return `${interval > 1 ? `${interval} ${unit[unitRepeat2.toLowerCase()]} ${i18n.t("m\u1ED9t l\u1EA7n")}` : `${i18n.t("H\xE0ng")} ${unit[unitRepeat2.toLowerCase()]}`} ${i18n.t("v\xE0o ng\xE0y")} ${dayjs__default["default"](dateTime).format(format)}`;
  };
  const resetRepeat = () => {
    setStartTime(void 0);
    setEndTime(void 0);
    setDate(void 0);
    handlerDuration(void 0);
    setNumberRepeat(void 0);
    setUnitRepeat(void 0);
    setSegmentSelected(void 0);
    setEndTimeRepeat(void 0);
  };
  const isOldConfig = () => {
    if (numberRepeat && numberRepeat > 1)
      return true;
    if (unitRepeat !== coreRenderer.UnitRepeatEnum.WEEK && unitRepeat !== coreRenderer.UnitRepeatEnum.DAY)
      return true;
    return false;
  };
  const ref = React.useRef(null);
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx("div", {
        ref,
        style: { display: "none" }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(SelectConfig.SelectConfig, {
        options: [
          { label: i18n.t("Lu\xF4n hi\u1EC3n th\u1ECB"), value: "" },
          { label: i18n.t("Kho\u1EA3ng th\u1EDDi gian"), value: coreRenderer.RepeatTypeEnum.NO_REPEAT },
          { label: i18n.t("L\u1EB7p l\u1EA1i h\xE0ng ng\xE0y"), value: coreRenderer.RepeatTypeEnum.DAILY },
          {
            label: i18n.t("T\xF9y ch\u1EC9nh"),
            value: coreRenderer.RepeatTypeEnum.CUSTOM
          }
        ],
        formItemProps: {
          label: i18n.t("Ki\u1EC3u hi\u1EC3n th\u1ECB"),
          layout: "vertical"
        },
        selectProps: {
          style: {
            width: "100%"
          },
          value: typeSelectTime,
          onChange: onChangeTypeSelectTime,
          allowClear: false
        }
      }),
      typeSelectTime === coreRenderer.RepeatTypeEnum.NO_REPEAT && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(FormItem.FormItem, {
            label: i18n.t("Th\u1EDDi gian b\u1EAFt \u0111\u1EA7u"),
            layout: "vertical",
            children: /* @__PURE__ */ jsxRuntime.jsx(StyledDatePicker, {
              showTime: true,
              placeholder: i18n.t("Ch\u1ECDn th\u1EDDi gian b\u1EAFt \u0111\u1EA7u"),
              disabledDate: disabledStartDate,
              format: timeFormat,
              value: startTime ? dayjs__default["default"](startTime) : void 0,
              onChange: (value) => setTime(formatDate(value), endTime)
            })
          }),
          /* @__PURE__ */ jsxRuntime.jsx(FormItem.FormItem, {
            label: i18n.t("Th\u1EDDi gian k\u1EBFt th\xFAc"),
            layout: "vertical",
            children: /* @__PURE__ */ jsxRuntime.jsx(StyledDatePicker, {
              showTime: true,
              placeholder: i18n.t("Ch\u1ECDn th\u1EDDi gian k\u1EBFt th\xFAc"),
              disabledDate: disabledEndDate,
              format: timeFormat,
              value: endTime ? dayjs__default["default"](endTime) : void 0,
              onChange: (value) => setTime(startTime, formatDate(value))
            })
          })
        ]
      }),
      (typeSelectTime === coreRenderer.RepeatTypeEnum.CUSTOM || typeSelectTime === coreRenderer.RepeatTypeEnum.DAILY) && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
          isOldConfig() && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
            children: [
              /* @__PURE__ */ jsxRuntime.jsx(FormItem.FormItem, {
                label: i18n.t("L\u1EB7p l\u1EA1i m\u1ED7i"),
                style: { marginBottom: 0 },
                children: /* @__PURE__ */ jsxRuntime.jsxs(StyledDiv, {
                  children: [
                    /* @__PURE__ */ jsxRuntime.jsx(InputNumberConfig.InputNumberConfig, {
                      inputNumberProps: {
                        min: 1,
                        value: numberRepeat,
                        onChange: (value) => setNumberRepeat(value)
                      }
                    }),
                    /* @__PURE__ */ jsxRuntime.jsx(SelectConfig.SelectConfig, {
                      options: [
                        { label: i18n.t("Ng\xE0y"), value: coreRenderer.UnitRepeatEnum.DAY },
                        { label: i18n.t("Tu\u1EA7n"), value: coreRenderer.UnitRepeatEnum.WEEK },
                        {
                          label: i18n.t("Th\xE1ng"),
                          value: coreRenderer.UnitRepeatEnum.MONTH
                        },
                        { label: i18n.t("N\u0103m"), value: coreRenderer.UnitRepeatEnum.YEAR }
                      ],
                      selectProps: {
                        value: unitRepeat,
                        onChange: (value) => {
                          setUnitRepeat(value);
                        }
                      }
                    })
                  ]
                })
              }),
              !!numberRepeat && !!unitRepeat && !!textDescForRuleRepeat(numberRepeat, unitRepeat, date) && /* @__PURE__ */ jsxRuntime.jsx("div", {
                style: { marginBottom: 16, color: "#82869E" },
                children: textDescForRuleRepeat(numberRepeat, unitRepeat, date)
              })
            ]
          }),
          unitRepeat === coreRenderer.UnitRepeatEnum.WEEK && /* @__PURE__ */ jsxRuntime.jsx(FormItem.FormItem, {
            label: i18n.t("L\u1EB7p l\u1EA1i v\xE0o"),
            layout: "vertical",
            children: /* @__PURE__ */ jsxRuntime.jsx(SelectSegment.SelectSegment, {
              arrSelected: segmentSelected,
              onchange: onChangeSegment
            })
          }),
          /* @__PURE__ */ jsxRuntime.jsx(FormItem.FormItem, {
            label: i18n.t("Hi\u1EC3n th\u1ECB trong khung gi\u1EDD"),
            layout: "vertical",
            children: /* @__PURE__ */ jsxRuntime.jsx(StyledTimePicker, {
              placeholder: [i18n.t("B\u1EAFt \u0111\u1EA7u"), i18n.t("K\u1EBFt th\xFAc")],
              format: "HH:mm",
              picker: "time",
              value: [
                convertToDateTime(startDuration),
                convertToDateTime(endDuration)
              ],
              changeOnBlur: ((_a = ref == null ? void 0 : ref.current) == null ? void 0 : _a.ownerDocument) !== document,
              allowClear: true,
              onChange: handlerDuration
            })
          }),
          /* @__PURE__ */ jsxRuntime.jsx(FormItem.FormItem, {
            label: i18n.t("Ng\xE0y b\u1EAFt \u0111\u1EA7u"),
            layout: "vertical",
            children: /* @__PURE__ */ jsxRuntime.jsx(StyledDatePicker, {
              placeholder: i18n.t("Ch\u1ECDn th\u1EDDi gian b\u1EAFt \u0111\u1EA7u"),
              value: date ? dayjs__default["default"](date) : void 0,
              format: "DD/MM/YYYY",
              onChange: (value) => setDate(formatDate(value))
            })
          }),
          /* @__PURE__ */ jsxRuntime.jsx(FormItem.FormItem, {
            label: i18n.t("Ng\xE0y k\u1EBFt th\xFAc"),
            layout: "vertical",
            children: /* @__PURE__ */ jsxRuntime.jsx(StyledDatePicker, {
              placeholder: i18n.t("Ch\u1ECDn th\u1EDDi gian k\u1EBFt th\xFAc"),
              format: "DD/MM/YYYY",
              value: endTimeRepeat ? dayjs__default["default"](endTimeRepeat) : void 0,
              onChange: (value) => setEndTimeRepeat(formatDate(value))
            })
          })
        ]
      })
    ]
  });
};
const StyledDatePicker = styled__default["default"](antd.DatePicker)`
  width: 100%;
`;
const StyledDiv = styled__default["default"].div`
  display: flex;
  justify-content: space-between;
  width: 100%;
`;
const StyledTimePicker = styled__default["default"](antd.DatePicker.RangePicker)`
  width: 100%;
`;

exports.TimingConfig = TimingConfig;
