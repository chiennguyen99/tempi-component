'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var coreRenderer = require('@tempi/core-renderer');
var React = require('react');
var VideoConfig = require('../VideoConfig/VideoConfig.js');
var propKey = require('../../constants/propKey.js');
var usePropSeparateDevice = require('../../hooks/usePropSeparateDevice.js');
var RangeSliderConfig = require('../RangeSliderConfig/RangeSliderConfig.js');
var percentPropFormatter = require('../../utils/percentPropFormatter.js');
var percentPropParser = require('../../utils/percentPropParser.js');
var SelectConfig = require('../SelectConfig/SelectConfig.js');

const BackgroundVideoConfig = ({
  propKey: propKey$1 = propKey.PROP_KEY.CommonStyle,
  separateDevice
}) => {
  const youtubeVideoKey = propKey.PROP_KEY.joinKey(
    propKey$1,
    propKey.PROP_KEY.BackgroundVideo,
    propKey.PROP_KEY.Src
  );
  const uploadVideoKey = propKey.PROP_KEY.joinKey(
    propKey$1,
    propKey.PROP_KEY.BackgroundVideo,
    propKey.PROP_KEY.UploadSrc
  );
  const overlayKey = propKey.PROP_KEY.joinKey(
    propKey$1,
    propKey.PROP_KEY.BackgroundVideo,
    propKey.PROP_KEY.DefaultOverlay
  );
  const objectFitKey = propKey.PROP_KEY.joinKey(
    propKey$1,
    propKey.PROP_KEY.BackgroundVideo,
    propKey.PROP_KEY.ObjectFit
  );
  const [uploadUrl] = usePropSeparateDevice.usePropSeparateDevice(uploadVideoKey, separateDevice);
  const [youtubeVideo] = usePropSeparateDevice.usePropSeparateDevice(youtubeVideoKey, separateDevice);
  const [overlay, setOverlay] = usePropSeparateDevice.usePropSeparateDevice(
    overlayKey,
    separateDevice
  );
  React.useEffect(() => {
    if (!uploadUrl && !youtubeVideo && overlay) {
      setOverlay(void 0);
    }
  }, [uploadUrl, youtubeVideo]);
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(VideoConfig.VideoConfig, {
        youtubeVideoPropKey: youtubeVideoKey,
        uploadVideoPropKey: uploadVideoKey
      }),
      /* @__PURE__ */ jsxRuntime.jsx("div", {
        style: { height: "1rem", display: "block" }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(RangeSliderConfig.RangeSliderConfig, {
        propKey: overlayKey,
        separateDevice,
        formItemProps: { label: i18n.t("\u0110\u1ED9 m\u1EDD l\u1EDBp ph\u1EE7 n\u1EC1n") },
        sliderProps: {
          max: 100,
          min: 0,
          defaultValue: 0
        },
        usePropOptions: {
          formatter: percentPropFormatter.percentPropFormatter,
          parser: percentPropParser.percentPropParser
        },
        unitProps: { defaultValue: coreRenderer.UnitEnum.percent }
      }),
      /* @__PURE__ */ jsxRuntime.jsx("div", {
        style: { height: "1rem", display: "block" }
      }),
      !!uploadUrl && /* @__PURE__ */ jsxRuntime.jsx(SelectConfig.SelectConfig, {
        separateDevice,
        propKey: objectFitKey,
        formItemProps: {
          label: i18n.t("Object-fit"),
          layout: "horizontal"
        },
        selectProps: {
          defaultValue: "fill",
          allowClear: false
        },
        options: [
          {
            label: i18n.t("Cover"),
            value: "cover"
          },
          {
            label: i18n.t("Fill"),
            value: "fill"
          },
          {
            label: i18n.t("Contain"),
            value: "contain"
          },
          {
            label: i18n.t("Scale down"),
            value: "scale-down"
          },
          {
            label: i18n.t("Unset"),
            value: "unset"
          }
        ]
      })
    ]
  });
};

exports.BackgroundVideoConfig = BackgroundVideoConfig;
