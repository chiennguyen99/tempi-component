import { jsx, jsxs } from 'react/jsx-runtime';
import { TextBold16Regular, TextItalic16Regular, TextUnderline16Regular } from '@fluentui/react-icons';
import { theme, Space, Button } from 'antd';
import { usePropSeparateDevice } from '../../hooks/usePropSeparateDevice.es.js';
import { PROP_KEY } from '../../constants/propKey.es.js';
import { FormItem } from '../../components/FormItem/FormItem.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const TextConfig = (props) => {
  const { propKey, separateDevice, formItemProps } = props;
  const {
    token: { colorPrimary }
  } = theme.useToken();
  const [fontWeight, setFontWeight] = usePropSeparateDevice(
    PROP_KEY.joinKey(propKey, PROP_KEY.FontWeight),
    separateDevice
  );
  const [fontStyle, setFontStyle] = usePropSeparateDevice(
    PROP_KEY.joinKey(propKey, PROP_KEY.FontStyle),
    separateDevice
  );
  const [textDecoration, setTextDecoration] = usePropSeparateDevice(
    PROP_KEY.joinKey(propKey, PROP_KEY.TextDecoration),
    separateDevice
  );
  const onChangeFontWeight = () => {
    if (!fontWeight) {
      setFontWeight("bold");
      return;
    }
    setFontWeight(void 0);
  };
  const onChangeFontStyle = () => {
    if (!fontStyle) {
      setFontStyle("italic");
      return;
    }
    setFontStyle(void 0);
  };
  const onChangeTextDecoration = () => {
    if (!textDecoration) {
      setTextDecoration("underline");
      return;
    }
    setTextDecoration(void 0);
  };
  return /* @__PURE__ */ jsx(FormItem, __spreadProps(__spreadValues({}, formItemProps), {
    children: /* @__PURE__ */ jsxs(Space, {
      children: [
        /* @__PURE__ */ jsx(Button, {
          style: { color: fontWeight ? colorPrimary : void 0 },
          type: "text",
          icon: /* @__PURE__ */ jsx(TextBold16Regular, {}),
          onClick: onChangeFontWeight
        }),
        /* @__PURE__ */ jsx(Button, {
          style: { color: fontStyle ? colorPrimary : void 0 },
          type: "text",
          icon: /* @__PURE__ */ jsx(TextItalic16Regular, {}),
          onClick: onChangeFontStyle
        }),
        /* @__PURE__ */ jsx(Button, {
          style: { color: textDecoration ? colorPrimary : void 0 },
          type: "text",
          icon: /* @__PURE__ */ jsx(TextUnderline16Regular, {}),
          onClick: onChangeTextDecoration
        })
      ]
    })
  }));
};

export { TextConfig };
