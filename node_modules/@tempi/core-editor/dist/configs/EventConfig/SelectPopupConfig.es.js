import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import { t } from '../../i18n.es.js';
import { Empty } from 'antd';
import styled from '@emotion/styled';
import { useNode } from '@tempi/dnd-core';
import { useEffect } from 'react';
import { usePropSeparateDevice } from '../../hooks/usePropSeparateDevice.es.js';
import { useBuilder } from '../../contexts/BuilderContext.es.js';
import { SelectConfig } from '../SelectConfig/SelectConfig.es.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const SelectPopupConfig = (props) => {
  const _a = props, { label, placeholder, itemIndex, device } = _a, rest = __objRest(_a, ["label", "placeholder", "itemIndex", "device"]);
  const [_, setProp] = usePropSeparateDevice(
    rest.propKey,
    rest.separateDevice,
    rest.usePropOptions
  );
  const { setShowModalSelectPopup, relatedNodeId, setRelatedNodeId } = useBuilder();
  const { id } = useNode();
  const handleCreatePopup = () => {
    setShowModalSelectPopup(true);
    setRelatedNodeId({ componentId: id, itemIndex, device });
  };
  useEffect(() => {
    if (relatedNodeId == null ? void 0 : relatedNodeId.popupId) {
      setProp(relatedNodeId.popupId);
      setRelatedNodeId(void 0);
    }
  }, [relatedNodeId == null ? void 0 : relatedNodeId.popupId]);
  return /* @__PURE__ */ jsx(SelectConfig, __spreadValues({
    selectProps: {
      placeholder: placeholder || t("M\u1EB7c \u0111\u1ECBnh"),
      style: { width: "100%" },
      popupMatchSelectWidth: false,
      showSearch: true,
      optionFilterProp: "label",
      notFoundContent: rest.options.length ? /* @__PURE__ */ jsx(Empty, {
        style: { margin: 8 },
        image: Empty.PRESENTED_IMAGE_SIMPLE
      }) : /* @__PURE__ */ jsx(Fragment, {}),
      dropdownRender: (option) => /* @__PURE__ */ jsxs(Fragment, {
        children: [
          option,
          /* @__PURE__ */ jsxs(CreatePopup, {
            onClick: handleCreatePopup,
            children: [
              "+",
              ` `,
              t("Th\xEAm m\u1EDBi popup")
            ]
          })
        ]
      })
    },
    formItemProps: {
      label,
      style: {
        marginBottom: "0.5rem"
      }
    }
  }, rest));
};
const CreatePopup = styled.div`
  color: #7367f0;
  padding: 5px;
  width: 100%;
  cursor: pointer;
`;

export { SelectPopupConfig };
