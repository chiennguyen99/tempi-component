'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var antd = require('antd');
var React = require('react');
var useProp = require('../../hooks/useProp.js');
var FormItem = require('../../components/FormItem/FormItem.js');

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const TextareaToOptionConfig = ({
  textareaProps,
  formItemProps,
  propKey
}) => {
  const [textOption, setTextOption] = React.useState("");
  const [prop, setProp] = useProp.useProp(propKey);
  const getOptionToText = () => {
    return (prop || []).reduce((acc, curr) => {
      if (curr.label === curr.value) {
        return `${acc}${curr.label}
`;
      } else {
        return `${acc}${curr.label} | ${curr.value}
`;
      }
    }, "");
  };
  const onChangeOptions = (text) => {
    const newOptions = [];
    const options = text.trim().split("\n").map((el) => el.trim()).filter(Boolean);
    options.forEach((opt) => {
      if (opt.includes("|")) {
        newOptions.push({
          label: opt.split("|")[0].trim(),
          value: opt.split("|")[1].trim()
        });
      } else {
        newOptions.push({
          label: opt.trim(),
          value: opt.trim()
        });
      }
    });
    setProp(newOptions);
  };
  React.useEffect(() => {
    setTextOption(getOptionToText());
  }, []);
  return /* @__PURE__ */ jsxRuntime.jsx(FormItem.FormItem, __spreadProps(__spreadValues({}, formItemProps), {
    children: /* @__PURE__ */ jsxRuntime.jsx(antd.Input.TextArea, __spreadProps(__spreadValues({}, textareaProps), {
      value: textOption,
      onChange: (e) => {
        setTextOption(e.target.value);
        onChangeOptions(e.target.value);
      }
    }))
  }));
};

exports.TextareaToOptionConfig = TextareaToOptionConfig;
