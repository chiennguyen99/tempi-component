'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var coreRenderer = require('@tempi/core-renderer');
var propKey = require('../../constants/propKey.js');
var usePropSeparateDevice = require('../../hooks/usePropSeparateDevice.js');
var RangeSliderConfig = require('../RangeSliderConfig/RangeSliderConfig.js');
var SwitchConfig = require('../SwitchConfig/SwitchConfig.js');

const DEFAULT_HEIGHT = 350;
const MAX_WIDTH_PERCENT = 100;
const SizeAttribute = ({
  propKey: propKey$1 = propKey.PROP_KEY.CommonStyle,
  configs = {},
  separateDevice
}) => {
  const { allowConfigWidth = true, allowConfigHeight = true } = configs;
  const widthUnitPropKey = propKey.PROP_KEY.joinKey(propKey$1, propKey.PROP_KEY.WidthUnit);
  const heightUnitPropKey = propKey.PROP_KEY.joinKey(propKey$1, propKey.PROP_KEY.HeightUnit);
  const [widthUnit, setWidthUnit] = usePropSeparateDevice.usePropSeparateDevice(
    widthUnitPropKey,
    separateDevice
  );
  const [height, setHeight] = usePropSeparateDevice.usePropSeparateDevice(
    propKey.PROP_KEY.joinKey(propKey$1, propKey.PROP_KEY.Height),
    separateDevice
  );
  const [width, setWidth] = usePropSeparateDevice.usePropSeparateDevice(
    propKey.PROP_KEY.joinKey(propKey$1, propKey.PROP_KEY.Width),
    separateDevice
  );
  const handleChangeAutoHeight = (checked) => {
    if (checked)
      setHeight(void 0);
    else
      setHeight(DEFAULT_HEIGHT);
  };
  const onChangeUnit = (value) => {
    setWidthUnit(value);
    if (value === coreRenderer.UnitEnum.percent && width > MAX_WIDTH_PERCENT) {
      setWidth(MAX_WIDTH_PERCENT);
    }
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      allowConfigWidth && /* @__PURE__ */ jsxRuntime.jsx(RangeSliderConfig.RangeSliderConfig, {
        sliderProps: {
          min: 0,
          max: widthUnit === coreRenderer.UnitEnum.percent ? 100 : 1e3
        },
        propKey: propKey.PROP_KEY.joinKey(propKey$1, propKey.PROP_KEY.Width),
        unitProps: {
          propKey: widthUnitPropKey,
          defaultValue: coreRenderer.UnitEnum.pixel,
          options: [coreRenderer.UnitEnum.percent, coreRenderer.UnitEnum.pixel],
          onChange: onChangeUnit
        },
        formItemProps: {
          label: i18n.t("Chi\u1EC1u r\u1ED9ng")
        },
        inputNumberProps: {
          controls: false,
          min: 0
        },
        showInput: true
      }),
      allowConfigHeight && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(SwitchConfig.SwitchConfig, {
            formItemProps: {
              label: i18n.t("Chi\u1EC1u cao t\u1EF1 \u0111\u1ED9ng")
            },
            switchProps: {
              checked: height === void 0,
              onChange: handleChangeAutoHeight
            }
          }),
          height !== void 0 && /* @__PURE__ */ jsxRuntime.jsx(RangeSliderConfig.RangeSliderConfig, {
            sliderProps: {
              min: 1,
              max: 1e3
            },
            propKey: propKey.PROP_KEY.joinKey(propKey$1, propKey.PROP_KEY.Height),
            unitProps: {
              propKey: heightUnitPropKey,
              defaultValue: coreRenderer.UnitEnum.pixel
            }
          })
        ]
      })
    ]
  });
};

exports.SizeAttribute = SizeAttribute;
