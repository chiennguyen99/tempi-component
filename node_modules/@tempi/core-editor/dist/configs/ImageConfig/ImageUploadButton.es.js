import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import { t } from '../../i18n.es.js';
import { useState } from 'react';
import { ImageUpload } from './ImageUpload.es.js';
import styled from '@emotion/styled';
import { theme, Button } from 'antd';
import { CloseCircleFilled, UploadOutlined, LoadingOutlined } from '@ant-design/icons';
import defaultImage from '../../assets/images/default_image.es.js';
import { v4 } from 'uuid';
import { getImageObject } from '../../utils/file.es.js';
import { usePropSeparateDevice } from '../../hooks/usePropSeparateDevice.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const ImageUploadButton = (_a) => {
  var _b = _a, {
    multiple = false,
    imagePropKey,
    widthPropKey,
    listType = "picture-card",
    placeholder = /* @__PURE__ */ jsx(Fragment, {
      children: t("T\u1EA3i \u1EA3nh l\xEAn (T\u1ED1i \u0111a 20MB)")
    }),
    deleteImage,
    separateDevice,
    layout = "horizontal",
    defaultNewImage,
    showButtonUpload,
    stateImageUpload
  } = _b, rest = __objRest(_b, [
    "multiple",
    "imagePropKey",
    "widthPropKey",
    "listType",
    "placeholder",
    "deleteImage",
    "separateDevice",
    "layout",
    "defaultNewImage",
    "showButtonUpload",
    "stateImageUpload"
  ]);
  const [image, setImage] = usePropSeparateDevice(imagePropKey, separateDevice);
  const [, setWidth] = usePropSeparateDevice(widthPropKey, separateDevice);
  const [uploading, setUploading] = useState(false);
  const { token: themeToken } = theme.useToken();
  const mergeImage = stateImageUpload ? stateImageUpload.image : image;
  const mergeSetImage = stateImageUpload ? stateImageUpload.setImage : setImage;
  const mergeSetWidth = stateImageUpload ? stateImageUpload.setWidth : setWidth;
  const uploadAction = async (data, file) => {
    if (!data)
      return;
    const imageUrl = data.imageUrl;
    if (imageUrl && imagePropKey) {
      if (widthPropKey) {
        const img = await getImageObject(file);
        mergeSetWidth(img.width);
      }
      mergeSetImage(imageUrl);
    }
    setUploading(data.uploading);
  };
  const uploadImageListAction = async (data, file) => {
    if (!data)
      return;
    const imageUrl = data.imageUrl;
    if (imageUrl && imagePropKey) {
      const newObject = __spreadValues({
        src: imageUrl,
        googleImageParams: {
          width: 0
        }
      }, defaultNewImage);
      if (newObject.id) {
        newObject.id = v4();
      }
      const img = await getImageObject(file);
      newObject.googleImageParams.width = img.width;
      const newImage = [...image];
      newImage.push(newObject);
      mergeSetImage(newImage);
    }
    setUploading(data.uploading);
  };
  const renderContent = () => {
    if (multiple) {
      return /* @__PURE__ */ jsx(Button, {
        block: true,
        type: "primary",
        icon: /* @__PURE__ */ jsx(UploadOutlined, {}),
        loading: uploading,
        children: placeholder
      });
    }
    if (mergeImage && mergeImage != defaultImage && !uploading) {
      return /* @__PURE__ */ jsx(PreviewImage, {
        src: mergeImage,
        alt: "uploaded img"
      });
    }
    return /* @__PURE__ */ jsx("div", {
      style: { width: "100%" },
      children: uploading ? /* @__PURE__ */ jsx(LoadingOutlined, {}) : /* @__PURE__ */ jsx(Fragment, {
        children: showButtonUpload ? /* @__PURE__ */ jsx(Button, {
          icon: /* @__PURE__ */ jsx(UploadOutlined, {}),
          loading: uploading,
          children: placeholder
        }) : /* @__PURE__ */ jsxs(Fragment, {
          children: [
            /* @__PURE__ */ jsx(UploadOutlined, {}),
            /* @__PURE__ */ jsx("div", {
              style: { marginTop: 4 },
              children: placeholder
            })
          ]
        })
      })
    });
  };
  return /* @__PURE__ */ jsxs("div", {
    style: { position: "relative" },
    children: [
      /* @__PURE__ */ jsx(ImageUpload, __spreadProps(__spreadValues({
        multiple,
        showUploadList: false,
        disabled: uploading,
        listType,
        onUpdateImageUrl: multiple ? uploadImageListAction : uploadAction,
        layout
      }, rest), {
        children: renderContent()
      })),
      !multiple && !!mergeImage && /* @__PURE__ */ jsx(CloseCircleFilled, {
        onClick: () => {
          if (deleteImage)
            deleteImage();
          else {
            mergeSetImage(void 0);
          }
        },
        style: {
          cursor: "pointer",
          color: themeToken.colorText,
          position: "absolute",
          top: -6,
          right: -6,
          fontSize: 16,
          borderRadius: 8
        }
      })
    ]
  });
};
const PreviewImage = styled.img`
  width: 100%;
  height: 100%;
  object-fit: contain;
`;

export { ImageUploadButton };
