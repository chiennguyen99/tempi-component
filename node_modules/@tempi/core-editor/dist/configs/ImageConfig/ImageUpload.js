'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var React = require('react');
var antd = require('antd');
var styled = require('@emotion/styled');
var clsx = require('clsx');
var ImgCrop = require('antd-img-crop');
var BuilderContext = require('../../contexts/BuilderContext.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
var clsx__default = /*#__PURE__*/_interopDefaultLegacy(clsx);
var ImgCrop__default = /*#__PURE__*/_interopDefaultLegacy(ImgCrop);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const IMAGE_STATUS = {
  done: "done",
  error: "error"
};
const ImageUpload = (_a) => {
  var _b = _a, {
    accept = "image/jpg, image/jpeg, image/png, image/webp",
    onUpdateImageUrl,
    multiple,
    children,
    layout = "horizontal",
    allowCropImage = false,
    cropProps = {},
    maxSize = 20
  } = _b, props = __objRest(_b, [
    "accept",
    "onUpdateImageUrl",
    "multiple",
    "children",
    "layout",
    "allowCropImage",
    "cropProps",
    "maxSize"
  ]);
  const [ratio, setRatio] = React.useState(1);
  const demoUploadImage = (file, _type) => {
    return URL.createObjectURL(file);
  };
  const { uploadFileHandler = demoUploadImage } = BuilderContext.useBuilder();
  const resetRatio = () => setRatio(1);
  const handleRatio = (_url) => {
    const img = new Image();
    img.src = _url;
    img.onload = () => {
      if (img.complete && img.width > 0 && img.height > 0) {
        setRatio(img.width / img.height);
      }
    };
  };
  const onUploadImage = async (options) => {
    const { onSuccess, onError, file } = options;
    if (!validateImgSize(file))
      return;
    try {
      await onUpdateImageUrl({ uploading: true }, file);
      const url = await uploadFileHandler(file, "image");
      file.thumbUrl = url;
      onSuccess(file);
    } catch (e) {
      console.error(e);
      onError();
    }
  };
  const onChange = async ({ file }) => {
    if (onUpdateImageUrl) {
      const { status, thumbUrl } = file;
      if (status === IMAGE_STATUS.error || status === IMAGE_STATUS.done) {
        await onUpdateImageUrl(
          { imageUrl: thumbUrl, uploading: false },
          file.originFileObj
        );
      }
    }
  };
  const validateImgSize = (file) => {
    var _a3;
    if (file.size > maxSize * 1024 * 1024) {
      (_a3 = antd.notification) == null ? void 0 : _a3.error({
        message: i18n.t("max_size_upload_error", {
          MAX_SIZE_UPLOAD: maxSize
        })
      });
      return false;
    }
    return true;
  };
  const _a2 = props, { beforeUpload } = _a2, rest = __objRest(_a2, ["beforeUpload"]);
  return allowCropImage ? /* @__PURE__ */ jsxRuntime.jsx(ImgCrop__default["default"], __spreadProps(__spreadValues({
    rotationSlider: true,
    modalProps: { zIndex: 2e3 },
    aspectSlider: true,
    aspect: ratio,
    showReset: true,
    beforeCrop: (file, files) => {
      handleRatio(URL.createObjectURL(file));
      return beforeUpload(file, files);
    },
    onModalOk: resetRatio,
    onModalCancel: resetRatio,
    modalTitle: i18n.t("Ch\u1EC9nh s\u1EEDa \u1EA3nh"),
    modalOk: "Xong",
    modalCancel: i18n.t("common.cancel"),
    resetText: i18n.t("\u0110\u1EB7t l\u1EA1i")
  }, cropProps), {
    children: /* @__PURE__ */ jsxRuntime.jsx(StyledUpload, __spreadProps(__spreadValues({
      className: clsx__default["default"]({ vertical: layout === "vertical" }),
      multiple,
      accept,
      customRequest: onUploadImage,
      onChange
    }, rest), {
      children
    }))
  })) : /* @__PURE__ */ jsxRuntime.jsx(StyledUpload, __spreadProps(__spreadValues({
    className: clsx__default["default"]({ vertical: layout === "vertical" }),
    multiple,
    customRequest: onUploadImage,
    accept,
    onChange
  }, props), {
    children
  }));
};
const StyledUpload = styled__default["default"](antd.Upload)`
  &.vertical {
    .ant-upload-select {
      width: 100% !important;
    }
  }

  .ant-upload-select {
    margin-bottom: 0 !important;
    margin-inline-end: 0 !important;
  }
`;

exports.ImageUpload = ImageUpload;
