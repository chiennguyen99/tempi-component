'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var dndCore = require('@tempi/dnd-core');
var React = require('react');
var useEditor = require('../../hooks/useEditor.js');
var useProp = require('../../hooks/useProp.js');
var InputConfig = require('../InputConfig/InputConfig.js');

const AttributeId = ({ readOnlyElementId = false }) => {
  const ELEMENT_ID = {
    label: i18n.t("M\xE3 th\xE0nh ph\u1EA7n"),
    existed: i18n.t("M\xE3 \u0111\xE3 t\u1ED3n t\u1EA1i")
  };
  const { id: nodeId } = dndCore.useNode();
  const { query } = useEditor.useEditor();
  const [elementId, setElementId] = useProp.useProp("id");
  const [warning, setWarning] = React.useState("");
  const validateElementId = (value) => {
    let warning2 = "";
    if (value) {
      const nodes = query.getSerializedNodes();
      const existedIds = Object.keys(nodes).filter(
        (key) => {
          var _a;
          return value === ((_a = nodes[key].props) == null ? void 0 : _a.id) && key !== nodeId;
        }
      );
      if (existedIds.length)
        warning2 = ELEMENT_ID.existed;
    }
    setWarning(warning2);
  };
  const onChangeId = (e) => {
    const value = e.target.value.trim() || void 0;
    validateElementId(value);
    setElementId(value);
  };
  return /* @__PURE__ */ jsxRuntime.jsx(InputConfig.InputConfig, {
    formItemProps: {
      label: i18n.t("M\xE3 th\xE0nh ph\u1EA7n"),
      warning,
      style: { margin: "0.5rem" }
    },
    inputProps: {
      value: elementId,
      onChange: onChangeId,
      placeholder: i18n.t("Nh\u1EADp m\xE3"),
      readOnly: readOnlyElementId
    }
  });
};

exports.AttributeId = AttributeId;
