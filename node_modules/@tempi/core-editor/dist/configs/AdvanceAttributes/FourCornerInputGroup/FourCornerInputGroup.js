'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var styled = require('@emotion/styled');
var dndCore = require('@tempi/dnd-core');
var usePropSeparateDevice = require('../../../hooks/usePropSeparateDevice.js');
var propKey = require('../../../constants/propKey.js');
var InputNumberConfig = require('../../InputNumberConfig/InputNumberConfig.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var PositionEnum = /* @__PURE__ */ ((PositionEnum2) => {
  PositionEnum2["top"] = "top";
  PositionEnum2["right"] = "right";
  PositionEnum2["bottom"] = "bottom";
  PositionEnum2["left"] = "left";
  PositionEnum2["main"] = "main";
  return PositionEnum2;
})(PositionEnum || {});
const FourCornerInputGroup = ({
  propKey: propKey$1,
  separateDevice
}) => {
  const { defaultValues } = dndCore.useNode(({ data }) => {
    var _a;
    return {
      defaultValues: (_a = data.custom.defaultValues) == null ? void 0 : _a[propKey$1]
    };
  });
  const [prop, setProp] = usePropSeparateDevice.usePropSeparateDevice(propKey$1, separateDevice);
  const onChange = (value, position) => {
    const newValue = value !== null ? value : void 0;
    let newProp = prop;
    if (position === "main" /* main */) {
      newProp = __spreadValues(__spreadValues({}, newProp), Object.values(PositionEnum).reduce(
        (pre, cur) => __spreadProps(__spreadValues({}, pre), { [cur]: newValue }),
        {}
      ));
    } else {
      newProp = __spreadProps(__spreadValues({}, newProp), {
        [position]: newValue,
        ["main" /* main */]: void 0
      });
    }
    setProp(newProp);
  };
  return /* @__PURE__ */ jsxRuntime.jsx(Wrapper, {
    children: Object.values(PositionEnum).map((position) => /* @__PURE__ */ jsxRuntime.jsx(PositionedInput, {
      position,
      separateDevice,
      propKey: propKey.PROP_KEY.joinKey(propKey$1, position),
      placeholder: (defaultValues == null ? void 0 : defaultValues[position]) || 0,
      onChange: (value) => onChange(value, position)
    }, position))
  });
};
const Wrapper = styled__default["default"].div`
  position: relative;
  height: 90px;
  width: 60%;
  margin: 24px auto;
  border: 1px solid var(--border-color);
  border-radius: 10px;
`;
const PositionedInput = styled__default["default"](InputNumberConfig.InputNumber)(({ position }) => {
  const getPositionedStyle = () => {
    switch (position) {
      case "top" /* top */:
        return ` 
          left: 50%;
        `;
      case "right" /* right */:
        return `
          left: 100%;
          top: 50%;
        `;
      case "bottom" /* bottom */:
        return `
          top: 100%;
          left: 50%;
        `;
      case "left" /* left */:
        return `
          top: 50%;
        `;
      default:
        return `
          top: 50%;
          left: 50%;
        `;
    }
  };
  return `
    width: 50px;
    position: absolute;
    border-radius: 4px;
    ${getPositionedStyle()}
    transform: translateX(-50%) translateY(-50%);

    .ant-input-number {
      &-handler-wrap {
        visibility: hidden;
      }

      &-input {
        border-radius: 4px;
        padding: 0 8px;
        text-align: center;
      }
    } 
  `;
});

exports.FourCornerInputGroup = FourCornerInputGroup;
