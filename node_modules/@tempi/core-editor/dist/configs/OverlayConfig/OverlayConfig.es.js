import { jsx } from 'react/jsx-runtime';
import { t } from '../../i18n.es.js';
import { useState, useEffect } from 'react';
import { OverlayType } from '@tempi/core-renderer';
import { SwitchToShow } from '../../components/SwitchToShow/SwitchToShow.es.js';
import { PROP_KEY } from '../../constants/propKey.es.js';
import { usePropSeparateDevice } from '../../hooks/usePropSeparateDevice.es.js';
import { ColorPickerConfig } from '../ColorPickerConfig/ColorPickerConfig.es.js';

const OverlayConfig = ({
  propKey = PROP_KEY.CommonStyle,
  separateDevice
}) => {
  const [checkedOverlay, setCheckedOverlay] = useState(false);
  const overlayTypeKey = PROP_KEY.joinKey(
    propKey,
    PROP_KEY.BackgroundOverlayType
  );
  const bgOverlayKey = PROP_KEY.joinKey(propKey, PROP_KEY.BackgroundOverlay);
  const [overlayType, setOverlayType] = usePropSeparateDevice(
    overlayTypeKey,
    separateDevice
  );
  const [backgroundOverlay, setBackgroundOverlay] = usePropSeparateDevice(
    bgOverlayKey,
    separateDevice
  );
  const handleChangeOverlay = (checked) => {
    if (checked) {
      setCheckedOverlay(true);
      setOverlayType(OverlayType.color);
    } else {
      setCheckedOverlay(false);
      setOverlayType(void 0);
      setBackgroundOverlay(void 0);
    }
  };
  useEffect(() => {
    if (overlayType || backgroundOverlay) {
      setCheckedOverlay(true);
    }
  }, []);
  return /* @__PURE__ */ jsx(SwitchToShow, {
    show: checkedOverlay,
    setShow: handleChangeOverlay,
    formItemProps: {
      label: t("L\u1EDBp ph\u1EE7 n\u1EC1n")
    },
    children: /* @__PURE__ */ jsx(ColorPickerConfig, {
      propKey: bgOverlayKey,
      gradientPicker: true,
      separateDevice
    })
  });
};

export { OverlayConfig };
