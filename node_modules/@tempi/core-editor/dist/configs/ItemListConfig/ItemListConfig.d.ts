import React from 'react';
import { SettingConfigProps } from '../../types';
export interface DnDItemConfig {
    title?: string;
    dndId?: string;
    id?: string;
}
export interface DnDActiveItem extends SettingConfigProps {
    index?: number;
}
export interface ItemConfigProps<TItem, TActiveItem> extends SettingConfigProps {
    item: TItem;
    onRemove: () => void;
    onDuplicate: () => void;
    activeItem: number;
    setActiveItem: (val?: number) => void;
    index: number;
    activeItemConfig?: React.FC<DnDActiveItem>;
    activeItemConfigProps?: TActiveItem;
    allowRemove?: boolean;
    allowDuplicate?: boolean;
    allowInsert?: boolean;
    allowDrag?: boolean;
    titleKey?: string;
    customTitle?: (item: TItem) => string;
}
export interface ItemListConfigProps<TItem, TActiveItem extends DnDActiveItem> extends SettingConfigProps {
    activeItemConfig: React.FC<TActiveItem>;
    activeItemConfigProps?: TActiveItem;
    defaultActiveItem?: number;
    defaultItem?: TItem;
    maxItem?: number;
    allowRemove?: boolean;
    allowDuplicate?: boolean;
    allowInsert?: boolean;
    allowDrag?: boolean;
    addItemText?: string;
    customRemove?: (index: number) => void;
    customDuplicate?: (index: number) => void;
    customInsert?: () => void;
    titleKey?: string;
    customTitle?: (item: TItem) => string;
    emptyDescription?: string;
}
export declare const ItemConfig: <TItem extends DnDItemConfig, TActiveItem extends DnDActiveItem>({ index, item, onDuplicate, onRemove, activeItem: activeField, setActiveItem: setActiveField, activeItemConfig, activeItemConfigProps, allowRemove, allowDuplicate, separateDevice, allowDrag, titleKey, customTitle, }: ItemConfigProps<TItem, TActiveItem>) => JSX.Element;
export declare const ItemListConfig: <TItem extends DnDItemConfig, TActiveItem extends DnDActiveItem = DnDActiveItem>({ activeItemConfig, activeItemConfigProps, defaultActiveItem, defaultItem, propKey, maxItem, allowDuplicate, allowRemove, allowInsert, allowDrag, addItemText, separateDevice, customDuplicate, customInsert, customRemove, titleKey, customTitle, emptyDescription, }: ItemListConfigProps<TItem, TActiveItem>) => JSX.Element;
//# sourceMappingURL=ItemListConfig.d.ts.map