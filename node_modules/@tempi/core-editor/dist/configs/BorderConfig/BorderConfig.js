'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var icons = require('@ant-design/icons');
var coreRenderer = require('@tempi/core-renderer');
var ButtonGroup = require('../ButtonGroup/ButtonGroup.js');
var ButtonGroupItem = require('../ButtonGroup/ButtonGroupItem.js');
var usePropSeparateDevice = require('../../hooks/usePropSeparateDevice.js');
var propKey = require('../../constants/propKey.js');
var RangeSliderConfig = require('../RangeSliderConfig/RangeSliderConfig.js');
var FormItem = require('../../components/FormItem/FormItem.js');
var ColorPickerConfig = require('../ColorPickerConfig/ColorPickerConfig.js');

const BorderConfig = ({
  propKey: propKey$1,
  separateDevice
}) => {
  const [borderStyle, setBorderStyle] = usePropSeparateDevice.usePropSeparateDevice(
    propKey.PROP_KEY.joinKey(propKey$1, propKey.PROP_KEY.BorderStyle),
    separateDevice
  );
  const [borderWidth, setBorderWidth] = usePropSeparateDevice.usePropSeparateDevice(
    propKey.PROP_KEY.joinKey(propKey$1, propKey.PROP_KEY.BorderWidth),
    separateDevice
  );
  const clickBorderStyle = (value) => {
    if (value === borderStyle) {
      setBorderStyle(void 0);
      setBorderWidth(void 0);
      return;
    }
    setBorderStyle(value);
    setBorderWidth(1);
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(RangeSliderConfig.RangeSliderConfig, {
        sliderProps: {
          min: 0,
          max: 100,
          defaultValue: 0,
          step: 4
        },
        formItemProps: {
          label: i18n.t("Bo g\xF3c")
        },
        propKey: propKey.PROP_KEY.joinKey(propKey$1, propKey.PROP_KEY.BorderRadius),
        unitProps: { defaultValue: coreRenderer.UnitEnum.pixel }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(FormItem.FormItem, {
        label: i18n.t("Ki\u1EC3u vi\u1EC1n"),
        children: /* @__PURE__ */ jsxRuntime.jsxs(ButtonGroup.ButtonGroup, {
          children: [
            /* @__PURE__ */ jsxRuntime.jsx(ButtonGroupItem.ButtonGroupItem, {
              onClick: () => clickBorderStyle("solid"),
              isActive: borderStyle === "solid",
              children: /* @__PURE__ */ jsxRuntime.jsx(icons.LineOutlined, {
                style: { fontSize: 18 }
              })
            }),
            /* @__PURE__ */ jsxRuntime.jsx(ButtonGroupItem.ButtonGroupItem, {
              onClick: () => clickBorderStyle("dashed"),
              isActive: borderStyle === "dashed",
              children: /* @__PURE__ */ jsxRuntime.jsx(icons.DashOutlined, {
                style: { fontSize: 18 }
              })
            }),
            /* @__PURE__ */ jsxRuntime.jsx(ButtonGroupItem.ButtonGroupItem, {
              onClick: () => clickBorderStyle("dotted"),
              isActive: borderStyle === "dotted",
              children: /* @__PURE__ */ jsxRuntime.jsx(icons.SmallDashOutlined, {
                style: { fontSize: 18 }
              })
            })
          ]
        })
      }),
      borderStyle && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(FormItem.FormItem, {
            label: i18n.t("\u0110\u1ED9 r\u1ED9ng (px)"),
            children: /* @__PURE__ */ jsxRuntime.jsxs(ButtonGroup.ButtonGroup, {
              children: [
                /* @__PURE__ */ jsxRuntime.jsx(ButtonGroupItem.ButtonGroupItem, {
                  onClick: () => setBorderWidth(1),
                  isActive: borderWidth === 1,
                  children: "1"
                }),
                /* @__PURE__ */ jsxRuntime.jsx(ButtonGroupItem.ButtonGroupItem, {
                  onClick: () => setBorderWidth(2),
                  isActive: borderWidth === 2,
                  children: "2"
                }),
                /* @__PURE__ */ jsxRuntime.jsx(ButtonGroupItem.ButtonGroupItem, {
                  onClick: () => setBorderWidth(3),
                  isActive: borderWidth === 3,
                  children: "3"
                })
              ]
            })
          }),
          /* @__PURE__ */ jsxRuntime.jsx(ColorPickerConfig.ColorPickerConfig, {
            propKey: propKey.PROP_KEY.joinKey(propKey$1, propKey.PROP_KEY.BorderColor),
            formItemProps: {
              label: i18n.t("M\xE0u vi\u1EC1n")
            }
          })
        ]
      })
    ]
  });
};

exports.BorderConfig = BorderConfig;
