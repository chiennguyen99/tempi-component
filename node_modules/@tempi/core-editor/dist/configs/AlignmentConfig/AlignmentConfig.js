'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var reactIcons = require('@fluentui/react-icons');
var antd = require('antd');
var usePropSeparateDevice = require('../../hooks/usePropSeparateDevice.js');
var FormItem = require('../../components/FormItem/FormItem.js');

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const AlignmentConfig = (props) => {
  const { propKey, buttonGroupProps, formItemProps, separateDevice } = props;
  const { listAlignment = ["left", "center", "right"] } = buttonGroupProps || {};
  const [prop, setProp] = usePropSeparateDevice.usePropSeparateDevice(propKey, separateDevice);
  const clickAlign = (value) => {
    if (value === prop) {
      setProp(void 0);
      return;
    }
    setProp(value);
  };
  const renderIcon = (value) => {
    switch (value) {
      case "left":
        return /* @__PURE__ */ jsxRuntime.jsx(reactIcons.AlignLeftFilled, {
          fontSize: 16
        });
      case "flex-start":
        return /* @__PURE__ */ jsxRuntime.jsx(reactIcons.AlignLeftFilled, {
          fontSize: 16
        });
      case "center":
        return /* @__PURE__ */ jsxRuntime.jsx(reactIcons.AlignCenterVerticalFilled, {
          fontSize: 16
        });
      case "right":
        return /* @__PURE__ */ jsxRuntime.jsx(reactIcons.AlignRightFilled, {
          fontSize: 16
        });
      case "flex-end":
        return /* @__PURE__ */ jsxRuntime.jsx(reactIcons.AlignRightFilled, {
          fontSize: 16
        });
      case "justify":
        return /* @__PURE__ */ jsxRuntime.jsx(reactIcons.TextAlignJustifyRotate90Filled, {
          fontSize: 16
        });
      case "space-between":
        return /* @__PURE__ */ jsxRuntime.jsx(reactIcons.TextAlignJustifyRotate90Filled, {
          fontSize: 16
        });
    }
  };
  return /* @__PURE__ */ jsxRuntime.jsx(FormItem.FormItem, __spreadProps(__spreadValues({}, formItemProps), {
    children: /* @__PURE__ */ jsxRuntime.jsx(antd.Radio.Group, {
      value: prop,
      optionType: "button",
      buttonStyle: "solid",
      children: listAlignment.map((value, index) => /* @__PURE__ */ jsxRuntime.jsx(antd.Radio, {
        onClick: () => clickAlign(value),
        value,
        children: renderIcon(value)
      }, index))
    })
  }));
};

exports.AlignmentConfig = AlignmentConfig;
