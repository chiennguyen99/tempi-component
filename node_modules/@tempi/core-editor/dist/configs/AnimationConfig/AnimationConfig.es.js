import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../i18n.es.js';
import { Select } from 'antd';
import { RangeSliderConfig } from '../RangeSliderConfig/RangeSliderConfig.es.js';
import { usePropSeparateDevice } from '../../hooks/usePropSeparateDevice.es.js';
import { PROP_KEY } from '../../constants/propKey.es.js';
import { useProp } from '../../hooks/useProp.es.js';
import { SelectConfig } from '../SelectConfig/SelectConfig.es.js';
import { SwitchConfig } from '../SwitchConfig/SwitchConfig.es.js';

const animationNameOptions = [
  {
    label: "Fading entrances",
    options: [
      "fadeIn",
      "fadeInUp",
      "fadeInUpBig",
      "fadeInDown",
      "fadeInLeft",
      "fadeInRight",
      "fadeInTopLeft",
      "fadeInTopRight",
      "fadeInBottomLeft",
      "fadeInBottomRight"
    ]
  },
  {
    label: "Sliding entrances",
    options: ["slideInUp", "slideInDown", "slideInLeft", "slideInRight"]
  },
  {
    label: "Rotating entrances",
    options: [
      "rotateIn",
      "rotateInUpLeft",
      "rotateInUpRight",
      "rotateInDownLeft",
      "rotateInDownRight"
    ]
  },
  {
    label: "Bouncing entrances",
    options: [
      "bounceIn",
      "bounceInUp",
      "bounceInDown",
      "bounceInLeft",
      "bounceInRight"
    ]
  },
  {
    label: "Zooming entrances",
    options: ["zoomIn", "zoomInUp", "zoomInDown", "zoomInLeft", "zoomInRight"]
  },
  {
    label: "Lightspeed",
    options: [
      "lightSpeedInRight",
      "lightSpeedInLeft",
      "lightSpeedOutRight",
      "lightSpeedOutLeft"
    ]
  },
  {
    label: "Attention seekers",
    options: [
      "bounce",
      "flash",
      "pulse",
      "rubberBand",
      "shakeX",
      "shakeY",
      "headShake",
      "swing",
      "tada",
      "wobble",
      "jello",
      "heartBeat"
    ]
  },
  {
    label: "Specials",
    options: ["hinge", "jackInTheBox", "rollIn"]
  }
];
const AnimationConfig = ({
  propKey = PROP_KEY.CommonStyle,
  separateDevice
}) => {
  const { Option, OptGroup } = Select;
  const [repeatType, setRepeatType] = usePropSeparateDevice(
    PROP_KEY.joinKey(propKey, PROP_KEY.AnimationRepeatType),
    separateDevice
  );
  const [animation, _] = useProp(
    PROP_KEY.joinKey(propKey, PROP_KEY.AnimationName)
  );
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(SelectConfig, {
        separateDevice,
        propKey: PROP_KEY.joinKey(propKey, PROP_KEY.AnimationName),
        formItemProps: {
          label: t("Lo\u1EA1i hi\u1EC7u \u1EE9ng"),
          placeholder: t("Ch\u1ECDn hi\u1EC7u \u1EE9ng"),
          layout: "vertical"
        },
        selectProps: {
          style: { width: "100%" },
          children: /* @__PURE__ */ jsx(Fragment, {
            children: animationNameOptions.map((opt) => /* @__PURE__ */ jsx(OptGroup, {
              label: opt.label,
              children: opt.options.map((name) => /* @__PURE__ */ jsx(Option, {
                value: name,
                children: name[0].toUpperCase() + name.slice(1).split(/(?=[A-Z])/).join(" ")
              }, name))
            }, opt.label))
          })
        }
      }),
      animation && /* @__PURE__ */ jsxs(Fragment, {
        children: [
          /* @__PURE__ */ jsx(RangeSliderConfig, {
            separateDevice,
            propKey: PROP_KEY.joinKey(propKey, PROP_KEY.AnimationDuration),
            formItemProps: {
              label: t("Kho\u1EA3ng th\u1EDDi gian di\u1EC5n ra hi\u1EC7u \u1EE9ng (s)")
            },
            sliderProps: {
              defaultValue: 1,
              min: 0,
              max: 5
            },
            unitProps: {
              defaultValue: "s"
            }
          }),
          /* @__PURE__ */ jsx(RangeSliderConfig, {
            separateDevice,
            propKey: PROP_KEY.joinKey(propKey, PROP_KEY.AnimationDelay),
            formItemProps: {
              label: t("\u0110\u1ED9 tr\u1EC5 xu\u1EA5t hi\u1EC7n hi\u1EC7u \u1EE9ng (s)")
            },
            sliderProps: {
              defaultValue: 1,
              min: 0,
              max: 5
            },
            unitProps: {
              defaultValue: "s"
            }
          }),
          /* @__PURE__ */ jsx(SwitchConfig, {
            formItemProps: { label: t("L\u1EB7p l\u1EA1i hi\u1EC7u \u1EE9ng") },
            switchProps: {
              checked: repeatType === "infinite",
              onChange: (checked) => {
                if (checked)
                  setRepeatType("infinite");
                else
                  setRepeatType(void 0);
              }
            }
          })
        ]
      })
    ]
  });
};

export { AnimationConfig };
