const rgbaStringToObject = (rgba) => {
  if (!rgba)
    return null;
  const isRgbColor = /rgb\(/.test(rgba);
  const sep = rgba.indexOf(",") > -1 ? "," : " ";
  const rgbArr = rgba.substr(isRgbColor ? 4 : 5).split(")")[0].split(sep);
  let r = (+rgbArr[0]).toString(16), g = (+rgbArr[1]).toString(16), b = (+rgbArr[2]).toString(16), a = 1, aHex = "ff";
  if (rgbArr.length >= 4) {
    a = parseFloat(rgbArr[3]);
    aHex = a === 0 ? "00" : Math.round(255 * a).toString(16);
  }
  if (r.length === 1)
    r = "0" + r;
  if (g.length === 1)
    g = "0" + g;
  if (b.length === 1)
    b = "0" + b;
  if (aHex.length === 1)
    aHex = "0" + aHex;
  return {
    hex: "#" + r + g + b + aHex,
    rgba: {
      r: parseInt(rgbArr[0]),
      g: parseInt(rgbArr[1]),
      b: parseInt(rgbArr[2]),
      a
    }
  };
};
const rgbaToString = (rgba) => {
  return `rgba(${rgba.r},${rgba.g},${rgba.b},${rgba.a != null ? rgba.a : 1})`;
};
const getHexColor = (color) => {
  if (color.startsWith("#"))
    return color;
  if (color.startsWith("rgb"))
    return rgbaStringToObject(color).hex;
};

export { getHexColor, rgbaStringToObject, rgbaToString };
