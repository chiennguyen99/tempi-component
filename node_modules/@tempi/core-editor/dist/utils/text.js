'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreRenderer = require('@tempi/core-renderer');

const isNumeric = (str) => {
  if (typeof str === "number")
    return true;
  if (typeof str != "string")
    return false;
  return !isNaN(str) && !isNaN(parseFloat(str));
};
const isPrefixUrl = (str) => {
  return /^url\((.*)\)$/.test(str);
};
const extractUrlFromCssUrl = (str) => {
  const result = str.match(/^url\((.*)\)$/);
  return result ? result[1] : "";
};
const extractSize = (size, defaultSize = coreRenderer.UnitEnum.pixel) => {
  if (size == null ? void 0 : size.includes(coreRenderer.UnitEnum.pixel)) {
    const numberSize = Number(size.replace(coreRenderer.UnitEnum.pixel, ""));
    if (!isNaN(numberSize)) {
      return [numberSize, coreRenderer.UnitEnum.pixel];
    }
    return [void 0, coreRenderer.UnitEnum.pixel];
  }
  if (size == null ? void 0 : size.includes(coreRenderer.UnitEnum.percent)) {
    const numberSize = Number(size.replace(coreRenderer.UnitEnum.percent, ""));
    if (!isNaN(numberSize)) {
      return [numberSize, coreRenderer.UnitEnum.percent];
    }
    return [void 0, coreRenderer.UnitEnum.percent];
  }
  return [void 0, defaultSize];
};
const combineSize = (value, unit = coreRenderer.UnitEnum.pixel) => {
  if (!value) {
    return void 0;
  }
  return `${value}${unit}`;
};
const nomalizeText = (text) => {
  let str = text.toLowerCase().trim();
  str = str.replace(/\s+/g, " ");
  str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, "a");
  str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, "e");
  str = str.replace(/ì|í|ị|ỉ|ĩ/g, "i");
  str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, "o");
  str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, "u");
  str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, "y");
  str = str.replace(/đ/g, "d");
  return str;
};
const usePropOptionsUnitPercent = {
  parser: (val) => typeof val === "number" ? `${val}%` : val,
  formatter: (val) => !isNaN(+(val == null ? void 0 : val.replace("%", ""))) ? +val.replace("%", "") : val
};
const removeUnit = (value, unit = coreRenderer.UnitEnum.pixel) => {
  var _a, _b;
  return value !== void 0 && value !== null ? parseInt((_b = (_a = `${value}`) == null ? void 0 : _a.replace) == null ? void 0 : _b.call(_a, unit, "")) : value;
};

exports.combineSize = combineSize;
exports.extractSize = extractSize;
exports.extractUrlFromCssUrl = extractUrlFromCssUrl;
exports.isNumeric = isNumeric;
exports.isPrefixUrl = isPrefixUrl;
exports.nomalizeText = nomalizeText;
exports.removeUnit = removeUnit;
exports.usePropOptionsUnitPercent = usePropOptionsUnitPercent;
