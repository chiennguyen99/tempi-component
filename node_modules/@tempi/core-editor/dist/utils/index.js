'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreRenderer = require('@tempi/core-renderer');
var cloneDeep = require('lodash.clonedeep');
var index = require('../constants/index.js');
var set = require('lodash.set');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var cloneDeep__default = /*#__PURE__*/_interopDefaultLegacy(cloneDeep);
var set__default = /*#__PURE__*/_interopDefaultLegacy(set);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const floorPercentage = (percent) => {
  return Math.floor(percent * 100) / 100;
};
const percentage = (x, y) => {
  return floorPercentage(x / y * 100) + "%";
};
const serializePB = (query, options) => {
  const { serializedNodeIds, isEditingBlock, isEditingPopup } = options || {};
  const result = Object.assign({}, query);
  const checkCanSerializeNode = (id) => {
    if (serializedNodeIds == null ? void 0 : serializedNodeIds.length)
      return serializedNodeIds.includes(id);
    if (isEditingBlock || isEditingPopup)
      return id !== coreRenderer.ROOT;
    return true;
  };
  Object.keys(result).forEach((key) => {
    var _a, _c, _d, _e, _f, _g, _h;
    const canSerialize = checkCanSerializeNode(key);
    if (!canSerialize) {
      delete result[key];
    } else {
      const obj = result[key];
      let tag = (_a = obj == null ? void 0 : obj.custom) == null ? void 0 : _a.tag;
      let children = [];
      if (tag === "galleryslideshow" && obj.parent === coreRenderer.ROOT) {
        tag = "slider";
      }
      if (tag === "section" || tag === "row") {
        children = obj.nodes.length ? obj.nodes : Object.values(obj.linkedNodes);
      } else {
        children = obj.nodes;
      }
      const _b = obj.props || {}, { commonStyle, hidden, id } = _b, rest = __objRest(_b, ["commonStyle", "hidden", "id"]);
      const { startTime, endTime, date, duration, ruleRepeat } = obj.custom;
      if (commonStyle == null ? void 0 : commonStyle.margin) {
        delete commonStyle.margin.main;
      }
      if (commonStyle == null ? void 0 : commonStyle.padding) {
        delete commonStyle.padding.main;
      }
      const desktopCommonStyle = ((_c = rest == null ? void 0 : rest.desktop) == null ? void 0 : _c.commonStyle) || {};
      const mobileCommonStyle = ((_d = rest == null ? void 0 : rest.mobile) == null ? void 0 : _d.commonStyle) || {};
      (_e = rest == null ? void 0 : rest.desktop) == null ? true : delete _e.commonStyle;
      (_f = rest == null ? void 0 : rest.mobile) == null ? true : delete _f.commonStyle;
      if (desktopCommonStyle == null ? void 0 : desktopCommonStyle.margin) {
        delete desktopCommonStyle.margin.main;
      }
      if (desktopCommonStyle == null ? void 0 : desktopCommonStyle.padding) {
        delete desktopCommonStyle.padding.main;
      }
      if (mobileCommonStyle == null ? void 0 : mobileCommonStyle.margin) {
        delete mobileCommonStyle.margin.main;
      }
      if (mobileCommonStyle == null ? void 0 : mobileCommonStyle.padding) {
        delete mobileCommonStyle.padding.main;
      }
      result[key] = {
        id: key,
        elementId: id,
        parentId: obj.parent || null,
        tag,
        displayName: (_g = obj == null ? void 0 : obj.custom) == null ? void 0 : _g.displayName,
        resolvedName: (_h = obj == null ? void 0 : obj.type) == null ? void 0 : _h.resolvedName,
        style: __spreadProps(__spreadValues({}, commonStyle || {}), {
          desktop: Object.keys(desktopCommonStyle).length ? desktopCommonStyle : void 0,
          mobile: Object.keys(mobileCommonStyle).length ? mobileCommonStyle : void 0
        }),
        isCanvas: obj.isCanvas,
        customAttributes: {
          [tag]: rest
        },
        children,
        startTime,
        endTime,
        date,
        duration,
        ruleRepeat
      };
    }
  });
  return result;
};
const resolvedNameMapping = {
  Row: "RowEditor",
  Col: "ColEditor",
  GallerySlideshowEditor: "SliderEditor"
};
const deserializePB = (tree, isEditingBlock, isEditingPopup) => {
  if (!tree || Object.keys(tree).length === 0)
    return "";
  const result = Object.assign({}, cloneDeep__default["default"](tree));
  const rootBlockId = [];
  Object.keys(result).forEach((key) => {
    var _a, _b;
    const obj = result[key];
    const nodes = (obj == null ? void 0 : obj.children) || [];
    let props = {};
    let tag = obj.tag;
    if (!!((_a = obj.customAttributes) == null ? void 0 : _a[tag])) {
      const customAttr = (_b = obj.customAttributes) == null ? void 0 : _b[tag];
      if (tag === "galleryslideshow") {
        tag = "slider";
      }
      props = __spreadValues(__spreadValues({}, props), tag === "col" ? convertGridToPercentage(customAttr) : customAttr);
    }
    if (!!obj.style && !!Object.keys(obj.style).length) {
      props.commonStyle = obj.style;
      if (obj.style.desktop && Object.keys(obj.style.desktop).length && props.desktop) {
        props.desktop.commonStyle = obj.style.desktop;
        delete props.commonStyle.desktop;
      }
      if (obj.style.mobile && Object.keys(obj.style.mobile).length && props.mobile) {
        props.mobile.commonStyle = obj.style.mobile;
        delete props.commonStyle.mobile;
      }
    }
    result[key] = {
      type: {
        resolvedName: resolvedNameMapping[obj.resolvedName] || obj.resolvedName
      },
      displayName: obj.resolvedName,
      isCanvas: obj.isCanvas === void 0 ? tag === "root" || tag === "col" || tag === "menucol" : obj.isCanvas,
      nodes,
      parent: obj.parentId,
      custom: {
        tag,
        displayName: obj.displayName,
        startTime: obj.startTime,
        endTime: obj.endTime,
        ruleRepeat: obj.ruleRepeat,
        date: obj.date,
        duration: obj.duration
      },
      props: __spreadProps(__spreadValues({}, props), {
        id: obj.elementId
      })
    };
    if (isEditingBlock && (obj.tag === "section" || obj.tag === "globalblock") || isEditingPopup && ["popupv1", "inlinebanner"].includes(obj.tag)) {
      rootBlockId.push(key);
    }
  });
  if (isEditingBlock || isEditingPopup) {
    result[coreRenderer.ROOT] = {
      type: {
        resolvedName: "RootEditor"
      },
      displayName: coreRenderer.ROOT,
      isCanvas: true,
      nodes: rootBlockId,
      parent: null,
      custom: {
        tag: coreRenderer.ROOT.toLowerCase(),
        isEditingBlock
      },
      props: {}
    };
  }
  return result;
};
const convertGridToPercentage = (customAttributes) => {
  const { md, xs } = customAttributes;
  if (typeof md === "number") {
    customAttributes.md = {
      flex: percentage(md, index.GRID_COLUMNS)
    };
  }
  if (typeof xs === "number") {
    customAttributes.xs = {
      flex: percentage(xs, index.GRID_COLUMNS)
    };
  }
  return customAttributes;
};
const setPbConfigProperties = (pageContent, attributes, value = null) => {
  for (const key in pageContent) {
    attributes.forEach((element) => {
      if (pageContent[key].tag === element.tag) {
        set__default["default"](pageContent[key], element.path, value);
      }
    });
  }
};
const clonePageContent = (pageContent, callbackTransformNestedContent, returnMappingKeys = false) => {
  if (!pageContent)
    return pageContent;
  const mappingOldNewKey = {};
  const level1Keys = Object.keys(pageContent).filter(
    (el) => pageContent[el].parentId === coreRenderer.ROOT
  );
  const anchor = parseInt(coreRenderer.generateRandomId(10).replaceAll(".", ""), 36);
  for (let i = 0; i < level1Keys.length; i++) {
    mappingOldNewKey[level1Keys[i]] = "." + (anchor + i).toString(36);
  }
  for (const k in pageContent) {
    if (k === coreRenderer.ROOT)
      mappingOldNewKey[k] = k;
    else if (!mappingOldNewKey[k])
      mappingOldNewKey[k] = coreRenderer.generateRandomId(10);
  }
  const newPageContent = {};
  Object.entries(pageContent).forEach(([key, val]) => {
    val.id = mappingOldNewKey[val.id] || val.id;
    val.children = (val.children || []).map((el) => mappingOldNewKey[el] || el);
    val.parentId = mappingOldNewKey[val.parentId] || val.parentId;
    const newKey = mappingOldNewKey[key];
    newPageContent[newKey] = callbackTransformNestedContent(
      val,
      mappingOldNewKey
    );
  });
  if (returnMappingKeys)
    return [newPageContent, mappingOldNewKey];
  return newPageContent;
};

exports.clonePageContent = clonePageContent;
exports.deserializePB = deserializePB;
exports.floorPercentage = floorPercentage;
exports.percentage = percentage;
exports.resolvedNameMapping = resolvedNameMapping;
exports.serializePB = serializePB;
exports.setPbConfigProperties = setPbConfigProperties;
