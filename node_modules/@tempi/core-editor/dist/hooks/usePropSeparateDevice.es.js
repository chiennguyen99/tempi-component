import { useProp } from './useProp.es.js';
import { useBuilder } from '../contexts/BuilderContext.es.js';
import { PROP_KEY } from '../constants/propKey.es.js';

function usePropSeparateDevice(propKey, separateDevice = false, usePropOptions) {
  const { realDevice: device } = useBuilder();
  const newPropKey = PROP_KEY.joinKey(separateDevice && device, propKey);
  const desktopPropKey = PROP_KEY.joinKey(PROP_KEY.Desktop, propKey);
  const mobilePropKey = PROP_KEY.joinKey(PROP_KEY.Mobile, propKey);
  const [syncDeviceStyle] = useProp(PROP_KEY.SyncDeviceStyle);
  const [prop, setProp] = useProp(newPropKey, usePropOptions);
  const [desktopProp, setDesktopProp] = useProp(desktopPropKey, usePropOptions);
  const [, setMobileProp] = useProp(mobilePropKey, usePropOptions);
  const [commonProp, setCommonProp] = useProp(propKey, usePropOptions);
  const handleSetProp = (newValue) => {
    setProp(newValue);
    if (separateDevice) {
      if (syncDeviceStyle) {
        if (device === "desktop") {
          setMobileProp(newValue);
        } else {
          setDesktopProp(newValue);
        }
      }
      if ((syncDeviceStyle || device !== "mobile") && newValue === void 0 && commonProp !== void 0) {
        setCommonProp(newValue);
      }
    }
  };
  const getValue = () => {
    if (!separateDevice || prop !== void 0)
      return prop;
    if (syncDeviceStyle === void 0 && desktopProp !== void 0)
      return desktopProp;
    return commonProp;
  };
  const value = getValue();
  return [value, handleSetProp];
}

export { usePropSeparateDevice };
