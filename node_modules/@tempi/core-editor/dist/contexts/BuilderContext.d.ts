import React from 'react';
import { TrackCustomEventPayload, TrackingAttr, TrackingManualProps, TrackingObject, Device, BaseStoreState } from '@tempi/core-renderer';
import { PreviewDevice } from '../types';
import { RcFile } from 'antd/es/upload';
import { Node } from '@tempi/dnd-core';
import { LabeledValue } from 'antd/es/select';
interface ByPassProps {
    pageId?: number;
    uploadFileHandler?: (file: string | RcFile | Blob, type: 'image' | 'url' | 'video' | 'videoUrl') => Promise<string>;
    popupListSelection?: LabeledValue[];
    pageListInWebsiteSelection?: LabeledValue[];
    hideAdvancedSetting?: boolean;
}
interface CreatePopupFromEventType {
    popupId?: string;
    componentId?: string;
    itemIndex?: number;
    device?: Device;
}
export interface BuilderState extends ByPassProps {
    draggingNode?: Node;
    setDraggingNode?: React.Dispatch<React.SetStateAction<Node>>;
    insertIndex?: number;
    setInsertIndex?: React.Dispatch<React.SetStateAction<number>>;
    showSettingDialog?: boolean;
    setShowSettingDialog?: React.Dispatch<React.SetStateAction<boolean>>;
    getAttrTracking?: (opt: TrackingAttr) => TrackingObject;
    track?: (opt: TrackingManualProps) => void;
    trackCustomEvent?: (eventName: string, opt: TrackCustomEventPayload) => void;
    frame?: HTMLDocument;
    setFrame?: React.Dispatch<React.SetStateAction<HTMLDocument> | {
        head: HTMLElement;
        body: HTMLElement;
        shadowRoot: any;
    }>;
    openElementMenu?: boolean;
    setOpenElementMenu?: React.Dispatch<React.SetStateAction<boolean>>;
    showHiddenElements?: boolean;
    setShowHiddenElements?: React.Dispatch<React.SetStateAction<boolean>>;
    showModalSelectBlock?: boolean;
    setShowModalSelectBlock?: React.Dispatch<React.SetStateAction<boolean>>;
    showModalSelectPopup?: boolean;
    setShowModalSelectPopup?: React.Dispatch<React.SetStateAction<boolean>>;
    relatedNodeId?: CreatePopupFromEventType;
    setRelatedNodeId?: React.Dispatch<React.SetStateAction<CreatePopupFromEventType>>;
    showBubbleSetting?: boolean;
    setShowBubbleSetting?: React.Dispatch<React.SetStateAction<boolean>>;
    device?: PreviewDevice;
    realDevice?: Device;
    setDevice?: React.Dispatch<React.SetStateAction<PreviewDevice>>;
    allowConfigResponsive?: boolean;
    setAllowConfigResponsive?: React.Dispatch<React.SetStateAction<boolean>>;
    hideBubbleOnEditor?: boolean;
    setHideBubbleOnEditor?: React.Dispatch<React.SetStateAction<boolean>>;
    isEditingText?: boolean;
    setIsEditingText?: React.Dispatch<React.SetStateAction<boolean>>;
    isEditingBlock?: boolean;
    isEditingPopup?: boolean;
    enableTekoTracking?: boolean;
}
export interface BuilderProviderProps<S, U> extends ByPassProps {
    initialDevice?: PreviewDevice;
    children?: React.ReactNode;
    trackHelper?: {
        enable?: boolean;
        target?: string;
        screenName?: string;
    };
    storeState?: S;
    extraBuilderState?: U;
}
export declare const BuilderStateContext: React.Context<BuilderState>;
export declare const BuilderProvider: <S extends BaseStoreState, U extends {}>({ children, trackHelper, initialDevice, storeState, extraBuilderState, ...rest }: BuilderProviderProps<S, U>) => JSX.Element;
export declare function useBuilder<U = BuilderState>(): BuilderState & U;
export {};
//# sourceMappingURL=BuilderContext.d.ts.map