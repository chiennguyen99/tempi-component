import { jsx } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { stringifyColor, ColorType } from '@tempi/core-renderer';
import { useRef } from 'react';

function GradientBar({
  gradientColor,
  setSelectedGradientItem,
  onChange
}) {
  var _a, _b;
  const barRef = useRef(null);
  const handleDrag = (index, e) => {
    if (!(barRef == null ? void 0 : barRef.current))
      return;
    const barWidth = barRef.current.clientWidth;
    let startPos = e.clientX;
    barRef.current.onmousemove = (e2) => {
      const delta = Math.round((e2.clientX - startPos) * 100 / barWidth);
      const clone = [...gradientColor.colors];
      const endVal = clone[index].stop + delta;
      clone[index].stop += delta;
      if (Math.abs(delta) >= 1 && endVal >= 0 && endVal <= 100) {
        startPos = e2.clientX;
        clone[index].stop = endVal;
        onChange("colors", clone);
      }
    };
    barRef.current.onmouseup = () => {
      if (barRef.current.onmousemove)
        barRef.current.onmousemove = null;
    };
    barRef.current.onmouseleave = () => {
      if (barRef.current.onmousemove)
        barRef.current.onmousemove = null;
    };
  };
  return /* @__PURE__ */ jsx(TransparentBackground, {
    children: /* @__PURE__ */ jsx(GradientBarWrapper, {
      gradientColor,
      ref: barRef,
      children: (_b = (_a = gradientColor == null ? void 0 : gradientColor.colors) == null ? void 0 : _a.map) == null ? void 0 : _b.call(_a, (gColor, index) => /* @__PURE__ */ jsx(GradientItem, {
        gColor,
        onMouseDown: (e) => {
          setSelectedGradientItem(index);
          handleDrag(index, e);
        }
      }, index))
    })
  });
}
const TransparentBackground = styled.div`
  border-radius: 8px;
  background-color: var(--background-color);
  background-image: url('data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill-opacity=".05"><path d="M8 0h8v8H8zM0 8h8v8H0z"/></svg>');
`;
const GradientBarWrapper = styled.div(
  ({ gradientColor }) => `
      height: 12px;
      border-radius: 8px;
      margin-top: 12px;
      margin-bottom: 12px;
      position: relative;
      background: ${stringifyColor({
    colorType: ColorType.gradient,
    colorValue: gradientColor
  })};
      `
);
const GradientItem = styled.div(
  ({ gColor: color }) => `
    height: 16px;
    width: 16px;
    padding-left: 2px;
    padding-right: 2px;
    position: absolute;
    z-index: 10000;
    background: ${color.color};
    left: min(max(${color.stop}%, 0%), 100%);
    top: 50%;
    transform: translate(-50%,-50%);
    border: 2px solid #fff;
    border-radius: 50%;
    box-shadow: 0 2px 4px rgb(0 0 0 / 20%);
    &:hover {
      cursor: pointer;
    }
  `
);

export { GradientBar as default };
