'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var antd = require('antd');
var get = require('lodash.get');
var set = require('lodash.set');
var React = require('react');
var coreRenderer = require('@tempi/core-renderer');
var reactColorful = require('react-colorful');
var RgbaField = require('./RgbaField.js');
var style = require('./style.js');
var styled = require('@emotion/styled');
var reactFrameComponent = require('react-frame-component');
var constants = require('./constants.js');
var useEditor = require('../../hooks/useEditor.js');
var propKey = require('../../constants/propKey.js');
var color = require('../../utils/color.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var get__default = /*#__PURE__*/_interopDefaultLegacy(get);
var set__default = /*#__PURE__*/_interopDefaultLegacy(set);
var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

const getRGBAColor = (color$1) => {
  var _a;
  if (!color$1)
    return null;
  let rgbaColor = color$1;
  if (/^#.+$/.test(color$1)) {
    rgbaColor = coreRenderer.getRgbaFromHex(color$1);
  }
  const rgbaObject = (_a = color.rgbaStringToObject(rgbaColor)) == null ? void 0 : _a.rgba;
  return color.rgbaToString(rgbaObject);
};
const ColorPickerModal = ({
  color: color$1 = "rgba(0, 0, 0, 1)",
  visible,
  setVisible,
  onChange
}) => {
  var _a;
  const {
    actions: { history },
    myColors
  } = useEditor.useEditor((state) => {
    var _a2;
    const rootNode = state.nodes[coreRenderer.ROOT];
    return {
      myColors: get__default["default"]((_a2 = rootNode.data) == null ? void 0 : _a2.props, propKey.PROP_KEY.MyColors, [])
    };
  });
  const { document: frameDocument } = reactFrameComponent.useFrame();
  const [selectedRgbaColor, setSelectedRgbaColor] = React.useState();
  const currentColor = selectedRgbaColor || "";
  React.useEffect(() => {
    if (visible) {
      const rgbaString = getRGBAColor(color$1);
      setSelectedRgbaColor(rgbaString);
    }
  }, [visible]);
  const renderCirclePicker = (label, colors) => {
    if (!(colors == null ? void 0 : colors.length))
      return null;
    return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(Label, {
          children: label
        }),
        /* @__PURE__ */ jsxRuntime.jsx(CircleColorPicker, {
          children: colors.map((color2, index) => {
            var _a2;
            const rgbaColor = getRGBAColor(color2);
            const hexColor = (_a2 = color.rgbaStringToObject(rgbaColor)) == null ? void 0 : _a2.hex;
            return /* @__PURE__ */ jsxRuntime.jsx(ColorCircle, {
              title: hexColor,
              style: { backgroundColor: color2 },
              className: rgbaColor === selectedRgbaColor ? "active" : "",
              onClick: () => {
                setSelectedRgbaColor(rgbaColor);
              }
            }, index);
          })
        })
      ]
    });
  };
  const onClose = () => setVisible(false);
  const onOk = () => {
    var _a2;
    const hexColor = (_a2 = color.rgbaStringToObject(selectedRgbaColor)) == null ? void 0 : _a2.hex;
    onChange(hexColor);
    let newMyColors = [...myColors];
    let isExistInMyColors = false;
    for (const color2 of myColors) {
      const rgba = getRGBAColor(color2);
      if (rgba === selectedRgbaColor) {
        isExistInMyColors = true;
        break;
      }
    }
    if (!isExistInMyColors) {
      if (myColors.length === 10) {
        newMyColors = [...myColors.slice(1), hexColor];
      } else
        newMyColors.push(hexColor);
      history.ignore().setProp(coreRenderer.ROOT, (prop) => {
        set__default["default"](prop, propKey.PROP_KEY.MyColors, newMyColors);
      });
    }
    onClose();
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(StyledModal, {
    open: visible,
    title: i18n.t("Ch\u1ECDn m\xE0u"),
    onCancel: onClose,
    width: 300,
    bodyStyle: { padding: "16px 8px" },
    zIndex: 9999,
    destroyOnClose: true,
    getContainer: () => (frameDocument == null ? void 0 : frameDocument.body) || (document == null ? void 0 : document.body),
    footer: /* @__PURE__ */ jsxRuntime.jsxs(Footer, {
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(ResetButton, {
          type: "link",
          onClick: () => {
            onChange();
            onClose();
          },
          children: i18n.t("\u0110\u1EB7t l\u1EA1i")
        }),
        /* @__PURE__ */ jsxRuntime.jsxs("div", {
          style: { display: "flex" },
          children: [
            /* @__PURE__ */ jsxRuntime.jsx(antd.Button, {
              onClick: onClose,
              children: i18n.t("common.cancel")
            }),
            /* @__PURE__ */ jsxRuntime.jsx(antd.Button, {
              type: "primary",
              onClick: onOk,
              children: "OK"
            })
          ]
        })
      ]
    }),
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(StyledColorPicker, {
        color: currentColor,
        onChange: setSelectedRgbaColor
      }),
      /* @__PURE__ */ jsxRuntime.jsxs("div", {
        style: { display: "flex", columnGap: 16 },
        children: [
          /* @__PURE__ */ jsxRuntime.jsxs("div", {
            style: { flex: 1 },
            children: [
              /* @__PURE__ */ jsxRuntime.jsx(StyledHexColorInput, {
                alpha: true,
                prefixed: true,
                color: (_a = color.rgbaStringToObject(selectedRgbaColor)) == null ? void 0 : _a.hex,
                onChange: (color2) => {
                  setSelectedRgbaColor(coreRenderer.getRgbaFromHex(color2));
                }
              }),
              /* @__PURE__ */ jsxRuntime.jsx(InputLabel, {
                children: "hex"
              })
            ]
          }),
          /* @__PURE__ */ jsxRuntime.jsx(StyledRgbaField, {
            color: currentColor,
            onChange: setSelectedRgbaColor
          })
        ]
      }),
      renderCirclePicker(i18n.t("M\xE0u c\u1EE7a t\xF4i"), myColors),
      renderCirclePicker(i18n.t("M\xE0u m\u1EABu"), constants.sampleColors)
    ]
  });
};
const Label = styled__default["default"].div`
  font-size: 12px;
  font-weight: 500;
  margin: 8px 0 4px;
`;
const StyledModal = styled__default["default"](antd.Modal)`
  &.ant-modal {
    top: 80px;
  }

  .ant-modal {
    &-header,
    &-footer {
      padding: 8px;
    }

    &-title {
      font-size: 14px;
    }

    &-close-x {
      width: 32px;
      height: 32px;
      line-height: 32px;
      font-size: 14px;
    }
  }
`;
const StyledColorPicker = styled__default["default"](reactColorful.RgbaStringColorPicker)`
  width: 100% !important;
  margin-bottom: 16px;

  .react-colorful {
    &__pointer {
      width: 16px;
      height: 16px;
    }

    &__alpha,
    &__hue {
      height: 12px;
      margin-top: 12px;
      border-radius: 8px;
    }
  }
`;
const StyledHexColorInput = styled__default["default"](reactColorful.HexColorInput)(style.inputCss);
const InputLabel = styled__default["default"].label(style.labelCss);
const CircleColorPicker = styled__default["default"].div`
  display: flex;
  flex-wrap: wrap;
  row-gap: 8px;
  column-gap: 8px;
`;
const ColorCircle = styled__default["default"].div`
  width: 20px;
  height: 20px;
  border-radius: 50%;
  transform: scale(1);
  transition: all 100ms ease 0s;
  cursor: pointer;
  border: 1px solid #d9d9d9;

  &.active {
    border: 2px solid #000;
    transform: scale(1.1);
  }

  &:hover {
    transform: scale(1.2);
  }
`;
const Footer = styled__default["default"].div`
  display: flex;
  justify-content: space-between;
`;
const ResetButton = styled__default["default"](antd.Button)`
  padding-left: 0;
  padding-right: 0;
`;
const StyledRgbaField = styled__default["default"](RgbaField.RgbaField)`
  flex: 2;
`;

exports.ColorPickerModal = ColorPickerModal;
