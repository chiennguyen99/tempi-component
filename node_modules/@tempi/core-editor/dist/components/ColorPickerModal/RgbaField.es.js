import { jsx, jsxs } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { EditableInput } from './EditableInput.es.js';
import { labelCss } from './style.es.js';
import { rgbaStringToObject, rgbaToString } from '../../utils/color.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const RgbaField = ({
  color,
  onChange,
  className
}) => {
  var _a;
  const rgbaObject = (_a = rgbaStringToObject(color)) == null ? void 0 : _a.rgba;
  const renderRGBAInputs = () => {
    return ["r", "g", "b", "a"].map((key) => /* @__PURE__ */ jsxs("div", {
      children: [
        /* @__PURE__ */ jsx(EditableInput, {
          value: (rgbaObject == null ? void 0 : rgbaObject[key]) || null,
          onChange: (value) => {
            onChange(
              rgbaToString(__spreadProps(__spreadValues({}, rgbaObject), {
                [key]: value
              }))
            );
          },
          min: 0,
          max: key === "a" ? 1 : 255,
          precision: key === "a" ? 2 : void 0
        }),
        /* @__PURE__ */ jsx(StyledLabel, {
          children: key
        })
      ]
    }, key));
  };
  return /* @__PURE__ */ jsx("div", {
    className,
    style: { display: "flex", columnGap: 4 },
    children: renderRGBAInputs()
  });
};
const StyledLabel = styled.label(labelCss);

export { RgbaField };
