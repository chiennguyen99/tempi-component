import { jsx } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { useState, useEffect } from 'react';
import { inputCss } from './style.es.js';

const NUMBER_REGEX = /^\d(\.\d+)*$/;
const EditableInput = ({
  value,
  onChange,
  min,
  max,
  precision
}) => {
  const [changingValue, setChangingValue] = useState();
  const valueString = Number(value).toString();
  const getIsFloatInput = () => {
    return precision !== void 0;
  };
  useEffect(() => {
    const parsedValue = getIsFloatInput() ? parseFloat(changingValue) : parseInt(changingValue);
    if (value !== parsedValue) {
      setChangingValue(valueString);
    }
  }, [value]);
  const handleChange = (e) => {
    var _a;
    let newValue = e.target.value;
    if (!newValue) {
      setChangingValue(newValue);
      return;
    }
    let parsedValue = parseInt(newValue);
    const numberArr = newValue.split(/(\.|,)/);
    if (numberArr.length > 1) {
      if (getIsFloatInput()) {
        const decimal = ((_a = numberArr[2]) == null ? void 0 : _a.substr(0, precision)) || "";
        newValue = `${numberArr[0]}.${decimal}`;
        parsedValue = parseFloat(newValue);
      } else {
        newValue = numberArr[0];
      }
    }
    if (parsedValue >= min && parsedValue <= max) {
      setChangingValue(newValue);
      if (value !== parsedValue) {
        onChange(parsedValue);
      }
    }
  };
  const handleBlur = () => {
    if (!NUMBER_REGEX.test(changingValue)) {
      setChangingValue(valueString);
    }
  };
  return /* @__PURE__ */ jsx(StyledInput, {
    value: changingValue || "",
    onChange: handleChange,
    onBlur: handleBlur
  });
};
const StyledInput = styled.input(inputCss);

export { EditableInput };
