'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var antd = require('antd');
var get = require('lodash.get');
var set = require('lodash.set');
var React = require('react');
var coreRenderer = require('@tempi/core-renderer');
var reactColorful = require('react-colorful');
var styled = require('@emotion/styled');
var reactFrameComponent = require('react-frame-component');
var constants = require('./constants.js');
var GradientBar = require('./GradientBar.js');
var color = require('../../utils/color.js');
var SelectConfig = require('../../configs/SelectConfig/SelectConfig.js');
var InputNumberConfig = require('../../configs/InputNumberConfig/InputNumberConfig.js');
var useEditor = require('../../hooks/useEditor.js');
var propKey = require('../../constants/propKey.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var get__default = /*#__PURE__*/_interopDefaultLegacy(get);
var set__default = /*#__PURE__*/_interopDefaultLegacy(set);
var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const gradientTypeOptions = [
  { label: "Linear", value: coreRenderer.GradientType.linear },
  { label: "Radial", value: coreRenderer.GradientType.radial }
];
const getRGBAColor = (color$1) => {
  var _a;
  if (!color$1)
    return null;
  let rgbaColor = color$1;
  if (/^#.+$/.test(color$1)) {
    rgbaColor = coreRenderer.getRgbaFromHex(color$1);
  }
  const rgbaObject = (_a = color.rgbaStringToObject(rgbaColor)) == null ? void 0 : _a.rgba;
  return color.rgbaToString(rgbaObject);
};
const colorTypeOptions = [
  { label: "Solid", value: coreRenderer.ColorType.solid },
  { label: "Gradient", value: coreRenderer.ColorType.gradient }
];
const ColorPickerModalV2 = ({
  color: color$1 = coreRenderer.stringifyColor({
    colorType: coreRenderer.ColorType.solid,
    colorValue: "rgba(255,255,255,1)"
  }),
  visible,
  setVisible,
  onChange,
  hasGradientColor
}) => {
  const {
    actions: { history },
    myColors
  } = useEditor.useEditor((state) => {
    var _a;
    const rootNode = state.nodes[coreRenderer.ROOT];
    return {
      myColors: get__default["default"]((_a = rootNode == null ? void 0 : rootNode.data) == null ? void 0 : _a.props, propKey.PROP_KEY.MyColors, [])
    };
  });
  const { document: frameDocument } = reactFrameComponent.useFrame();
  const [colorType, setColorType] = React.useState();
  const [selectedGradientItem, setSelectedGradientItem] = React.useState();
  const [gradientColor, setGradientColor] = React.useState();
  const [hexInput, setHexInput] = React.useState();
  const getCurrentColorValue = () => {
    if (colorType === coreRenderer.ColorType.gradient)
      return gradientColor;
    if (!hexInput)
      return "";
    return coreRenderer.getRgbaFromHex(hexInput).replaceAll(" ", "");
  };
  const currentColorValue = getCurrentColorValue();
  React.useEffect(() => {
    var _a, _b, _c;
    if (visible) {
      const colorObjInit = coreRenderer.parseColor(color$1);
      const initColorType = (colorObjInit == null ? void 0 : colorObjInit.colorType) || coreRenderer.ColorType.solid;
      const initColorValue = (colorObjInit == null ? void 0 : colorObjInit.colorValue) || "rgba(255,255,255,1)";
      const initSelectedGradientItem = 0;
      const isGradientColor = initColorType === coreRenderer.ColorType.gradient;
      const initGradientColor = isGradientColor ? initColorValue : void 0;
      setColorType(initColorType);
      setGradientColor(initGradientColor);
      setSelectedGradientItem(initSelectedGradientItem);
      const initCurrentColor = ((_c = isGradientColor ? (_b = (_a = initColorValue == null ? void 0 : initColorValue.colors) == null ? void 0 : _a[initSelectedGradientItem]) == null ? void 0 : _b.color : initColorValue) == null ? void 0 : _c.toString()) || "";
      setHexInput(color.getHexColor(initCurrentColor));
    }
  }, [visible]);
  React.useEffect(() => {
    var _a, _b;
    if (colorType === coreRenderer.ColorType.gradient && selectedGradientItem !== void 0) {
      setHexInput(
        color.getHexColor((_b = (_a = gradientColor == null ? void 0 : gradientColor.colors) == null ? void 0 : _a[selectedGradientItem]) == null ? void 0 : _b.color)
      );
    }
  }, [selectedGradientItem]);
  const onChangeGradientType = (value) => {
    if (value === coreRenderer.GradientType.linear) {
      onChangeGradient("radius", 90);
    }
    onChangeGradient("gradientType", value);
  };
  const onChangeGradientRadius = (e) => {
    const radius = !e.target.value ? 0 : parseInt(e.target.value);
    onChangeGradient("radius", radius);
  };
  const onChangeColorType = (colorType2) => {
    var _a, _b;
    if (colorType2 === coreRenderer.ColorType.solid) {
      setGradientColor(void 0);
      setHexInput(color.getHexColor("rgba(255,255,255,1)"));
    } else {
      const defaultGradientColor = {
        colors: [
          { color: "rgb(254,214,227)", stop: 0 },
          { color: "rgba(168,237,234)", stop: 100 }
        ],
        radius: 90,
        gradientType: coreRenderer.GradientType.linear
      };
      setGradientColor(defaultGradientColor);
      setHexInput(color.getHexColor((_b = (_a = defaultGradientColor == null ? void 0 : defaultGradientColor.colors) == null ? void 0 : _a[0]) == null ? void 0 : _b.color));
    }
    setColorType(colorType2);
    setSelectedGradientItem(0);
  };
  const onChangeColor = (hexColor) => {
    setHexInput(hexColor);
    if (colorType === coreRenderer.ColorType.gradient && gradientColor && hexColor) {
      const clone = JSON.parse(JSON.stringify(gradientColor.colors));
      clone[selectedGradientItem].color = coreRenderer.getRgbaFromHex(hexColor).replaceAll(
        " ",
        ""
      );
      onChangeGradient("colors", clone);
    }
  };
  const renderSquarePicker = (label, colors) => {
    if (!(colors == null ? void 0 : colors.length))
      return null;
    return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(Label, {
          children: label
        }),
        /* @__PURE__ */ jsxRuntime.jsx(CircleColorPicker, {
          children: colors.map((color2, index) => {
            var _a;
            const rgbaColor = getRGBAColor(color2);
            const hexColor = (_a = color.rgbaStringToObject(rgbaColor)) == null ? void 0 : _a.hex;
            return /* @__PURE__ */ jsxRuntime.jsx(ColorSquare, {
              title: hexColor,
              style: { backgroundColor: color2 },
              onClick: () => {
                onChangeColor(hexColor);
              }
            }, index);
          })
        })
      ]
    });
  };
  const onClose = () => setVisible(false);
  const onOk = () => {
    const selectedColor = {
      colorType,
      colorValue: currentColorValue
    };
    onChange(coreRenderer.stringifyColor(selectedColor));
    if (colorType === coreRenderer.ColorType.solid) {
      let newMyColors = [...myColors];
      const isExistInMyColors = myColors.some(
        (color2) => getRGBAColor(color2) === currentColorValue
      );
      if (!isExistInMyColors) {
        if (myColors.length === 10) {
          newMyColors = [...myColors.slice(1), currentColorValue];
        } else
          newMyColors.push(currentColorValue);
        history.ignore().setProp(coreRenderer.ROOT, (prop) => {
          set__default["default"](prop, propKey.PROP_KEY.MyColors, newMyColors);
        });
      }
    }
    onClose();
  };
  const onChangeGradient = (name, value) => {
    setGradientColor((prev) => __spreadProps(__spreadValues({}, prev), {
      [name]: Array.isArray(value) ? [...value] : value
    }));
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(StyledModal, {
    open: visible,
    title: i18n.t("Ch\u1ECDn m\xE0u"),
    onCancel: onClose,
    width: 300,
    bodyStyle: { padding: "8px 8px" },
    zIndex: 9999,
    destroyOnClose: true,
    getContainer: () => (frameDocument == null ? void 0 : frameDocument.body) || (document == null ? void 0 : document.body),
    footer: /* @__PURE__ */ jsxRuntime.jsxs(Footer, {
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(ResetButton, {
          type: "link",
          onClick: () => {
            onChange(void 0);
            onClose();
          },
          children: i18n.t("\u0110\u1EB7t l\u1EA1i")
        }),
        /* @__PURE__ */ jsxRuntime.jsxs("div", {
          style: { display: "flex" },
          children: [
            /* @__PURE__ */ jsxRuntime.jsx(StyledButton, {
              onClick: onClose,
              children: i18n.t("common.cancel")
            }),
            /* @__PURE__ */ jsxRuntime.jsx(StyledButton, {
              type: "primary",
              onClick: onOk,
              children: "OK"
            })
          ]
        })
      ]
    }),
    children: [
      /* @__PURE__ */ jsxRuntime.jsxs(Header, {
        children: [
          hasGradientColor && /* @__PURE__ */ jsxRuntime.jsx(SelectConfig.SelectConfig, {
            selectProps: {
              allowClear: false,
              value: colorType,
              options: colorTypeOptions,
              onChange: onChangeColorType,
              getPopupContainer: (trigger) => trigger
            }
          }),
          /* @__PURE__ */ jsxRuntime.jsx(TransparentBackground, {
            children: /* @__PURE__ */ jsxRuntime.jsx(ColorDiv, {
              colorConfig: { colorType, colorValue: currentColorValue }
            })
          })
        ]
      }),
      /* @__PURE__ */ jsxRuntime.jsx(StyledColorPicker, {
        color: hexInput,
        onChange: onChangeColor
      }),
      colorType === coreRenderer.ColorType.gradient && /* @__PURE__ */ jsxRuntime.jsx(GradientBar, {
        gradientColor,
        selectedGradientItem,
        setSelectedGradientItem,
        onChange: onChangeGradient
      }),
      /* @__PURE__ */ jsxRuntime.jsxs(StyledRow, {
        gutter: [8, 8],
        className: "mt-base",
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(antd.Col, {
            span: 11,
            children: /* @__PURE__ */ jsxRuntime.jsx(StyledHexColorInput, {
              alpha: true,
              prefixed: true,
              color: hexInput,
              onChange: onChangeColor
            })
          }),
          colorType === coreRenderer.ColorType.gradient && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
            children: [
              /* @__PURE__ */ jsxRuntime.jsx(antd.Col, {
                span: 8,
                children: /* @__PURE__ */ jsxRuntime.jsx(SelectConfig.SelectConfig, {
                  selectProps: {
                    allowClear: false,
                    value: gradientColor == null ? void 0 : gradientColor.gradientType,
                    options: gradientTypeOptions,
                    onChange: onChangeGradientType,
                    getPopupContainer: (trigger) => trigger
                  }
                })
              }),
              /* @__PURE__ */ jsxRuntime.jsxs(antd.Col, {
                span: 5,
                children: [
                  /* @__PURE__ */ jsxRuntime.jsx(StyledNumberInput, {
                    formItemProps: {
                      onChange: onChangeGradientRadius,
                      value: gradientColor == null ? void 0 : gradientColor.radius
                    },
                    inputNumberProps: {
                      disabled: (gradientColor == null ? void 0 : gradientColor.gradientType) === coreRenderer.GradientType.radial,
                      min: 0,
                      max: 360,
                      value: gradientColor == null ? void 0 : gradientColor.radius
                    }
                  }),
                  (gradientColor == null ? void 0 : gradientColor.gradientType) === coreRenderer.GradientType.linear && /* @__PURE__ */ jsxRuntime.jsx(Degree, {
                    children: "\xB0"
                  })
                ]
              })
            ]
          })
        ]
      }),
      colorType === coreRenderer.ColorType.solid && renderSquarePicker(i18n.t("M\xE0u c\u1EE7a t\xF4i"), myColors),
      renderSquarePicker(i18n.t("M\xE0u m\u1EABu"), constants.sampleColors)
    ]
  });
};
const Label = styled__default["default"].div`
  font-size: 12px;
  font-weight: 500;
  margin: 8px 0 4px;
`;
const StyledModal = styled__default["default"](antd.Modal)`
  &.ant-modal {
    top: 80px;
  }

  .ant-modal {
    &-header,
    &-footer {
      padding: 8px;
      border-radius: 8px;
    }

    &-title {
      font-size: 14px;
    }

    &-close-x {
      width: 32px;
      height: 32px;
      line-height: 32px;
      font-size: 14px;
    }
    &-content {
      border-radius: 8px;
      padding: 8px;
    }
  }
`;
const StyledColorPicker = styled__default["default"](reactColorful.HexAlphaColorPicker)`
  width: 100% !important;
  margin-bottom: 16px;

  .react-colorful {
    &__pointer {
      width: 16px;
      height: 16px;
    }

    &__alpha,
    &__hue {
      height: 12px;
      margin-top: 12px;
      border-radius: 8px;
    }
  }
`;
const StyledHexColorInput = styled__default["default"](reactColorful.HexColorInput)`
  width: 100%;
  padding: 4px;
  text-align: center;
  border: 1px solid var(--border-color);
  border-radius: 4px;
  &:focus {
    outline: none;
  }
`;
const CircleColorPicker = styled__default["default"].div`
  display: flex;
  flex-wrap: wrap;
  row-gap: 8px;
  column-gap: 8px;
`;
const ColorSquare = styled__default["default"].div`
  width: 25px;
  height: 25px;
  border-radius: 6px;
  transform: scale(1);
  transition: all 100ms ease 0s;
  cursor: pointer;

  &:hover {
    transform: scale(1.2);
    border: 2px solid #d9d9d9;
  }
`;
const Footer = styled__default["default"].div`
  display: flex;
  justify-content: space-between;
`;
const ResetButton = styled__default["default"](antd.Button)`
  color: var(--text-color);
  padding-left: 0;
  padding-right: 0;
`;
const Header = styled__default["default"].div`
  height: 32px;
  display: flex;
  justify-content: space-between;
  margin-bottom: 8px;
`;
const TransparentBackground = styled__default["default"].div`
  border-radius: 4px;
  background-image: url('data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill-opacity=".05"><path d="M8 0h8v8H8zM0 8h8v8H0z"/></svg>');
`;
const ColorDiv = styled__default["default"].div(
  ({ colorConfig }) => `
    width: 32px;
    height: 32px;
    border-radius: 4px;
    margin-left: auto;
    background: ${coreRenderer.stringifyColor(colorConfig)};
    border: 1px solid rgba(0, 0, 0, 0.05);
`
);
const StyledNumberInput = styled__default["default"](InputNumberConfig.InputNumberConfig)`
  .ant-input-number-handler-wrap {
    display: none;
  }
`;
const Degree = styled__default["default"].div`
  font-size: 24px;
  position: absolute;
  top: -18px;
  right: -8px;
`;
const StyledRow = styled__default["default"](antd.Row)`
  margin-top: 16px;
`;
const StyledButton = styled__default["default"](antd.Button)`
  border-radius: 6px;
`;

exports.ColorPickerModalV2 = ColorPickerModalV2;
