'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var styled = require('@emotion/styled');
var reactIcons = require('@fluentui/react-icons');
var antd = require('antd');
var BuilderContext = require('../../contexts/BuilderContext.js');
var useEditor = require('../../hooks/useEditor.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const PrevNext = ({ disabled }) => {
  const { getAttrTracking, isEditingText } = BuilderContext.useBuilder();
  const {
    canUndo,
    canRedo,
    actions: { history }
  } = useEditor.useEditor((_, query) => {
    return {
      canUndo: !isEditingText && query.history.canUndo() && !disabled,
      canRedo: !isEditingText && query.history.canRedo() && !disabled
    };
  });
  const onUndo = () => {
    canUndo && history.undo();
  };
  const onRedo = () => {
    canUndo && history.redo();
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(antd.Space, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(IconButton, __spreadProps(__spreadValues({}, getAttrTracking({
        regionName: "pageEditor",
        contentName: "undoBtn"
      })), {
        onClick: onUndo,
        type: "text",
        disabled: !canUndo,
        icon: /* @__PURE__ */ jsxRuntime.jsx(reactIcons.ArrowHookUpLeft20Regular, {
          color: canUndo ? "var(--text-color)" : "var(--text-secondary-color)"
        })
      })),
      /* @__PURE__ */ jsxRuntime.jsx(IconButton, __spreadProps(__spreadValues({}, getAttrTracking({
        regionName: "pageEditor",
        contentName: "redoBtn"
      })), {
        onClick: onRedo,
        type: "text",
        disabled: !canRedo,
        icon: /* @__PURE__ */ jsxRuntime.jsx(reactIcons.ArrowHookUpRight20Regular, {
          color: canRedo ? "var(--text-color)" : "var(--text-secondary-color)"
        })
      }))
    ]
  });
};
const IconButton = styled__default["default"](antd.Button)`
  display: flex;
  align-items: center;
  width: fit-content;
  padding: 0;
  background: transparent !important;

  &:not([disabled]):hover {
    path,
    stroke {
      fill: var(--text-color);
    }
  }
`;

exports.PrevNext = PrevNext;
