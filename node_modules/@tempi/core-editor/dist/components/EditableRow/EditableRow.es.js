import { jsx } from 'react/jsx-runtime';
import { Form } from 'antd';
import React from 'react';
import { CSS } from '@dnd-kit/utilities';
import { useSortable } from '@dnd-kit/sortable';
import { MenuOutlined } from '@ant-design/icons';
import styled from '@emotion/styled';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const EditableContext = React.createContext(
  null
);
const EditableRow = (_a) => {
  var _b = _a, {
    index,
    children,
    style
  } = _b, props = __objRest(_b, [
    "index",
    "children",
    "style"
  ]);
  var _a2;
  const [form] = Form.useForm();
  const {
    attributes,
    listeners,
    setNodeRef,
    setActivatorNodeRef,
    transform,
    transition,
    isDragging
  } = useSortable({
    id: props["data-row-key"]
  });
  const dragStyle = __spreadValues(__spreadProps(__spreadValues({}, style), {
    transform: (_a2 = CSS.Transform.toString(
      transform && __spreadProps(__spreadValues({}, transform), { scaleY: 1 })
    )) == null ? void 0 : _a2.replace(/translate3d\(([^,]+),/, "translate3d(0,"),
    transition
  }), isDragging ? { position: "relative", zIndex: 9999 } : {});
  return /* @__PURE__ */ jsx(StyledRow, __spreadProps(__spreadValues(__spreadValues({
    ref: setNodeRef
  }, attributes), props), {
    style: dragStyle,
    children: /* @__PURE__ */ jsx(Form, {
      form,
      component: false,
      children: /* @__PURE__ */ jsx(EditableContext.Provider, {
        value: form,
        children: React.Children.map(children, (child) => {
          if (child.key === "sort") {
            return React.cloneElement(child, {
              children: /* @__PURE__ */ jsx(MenuOutlined, __spreadValues({
                ref: setActivatorNodeRef,
                style: { touchAction: "none", cursor: "move" }
              }, listeners))
            });
          }
          return child;
        })
      })
    })
  }));
};
const StyledRow = styled.tr`
  &:hover .editable-cell {
    padding: 4px 11px;
    border: 1px solid #d9d9d9;
    border-radius: 2px;
  }
`;

export { EditableContext, EditableRow };
