'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var antd = require('antd');
var React = require('react');
var uuid = require('uuid');
var BuilderContext = require('../../contexts/BuilderContext.js');

const MAX_IMAGE_UPLOAD = 5;
const demoUploadImage = (file, _type) => {
  return URL.createObjectURL(file);
};
const UploadImageButton = ({
  acceptedFiles = [
    "image/jpg",
    "image/jpeg",
    "image/png",
    "image/gif",
    "image/webp"
  ],
  handlerAfterUpload
}) => {
  const [uploading, setUploading] = React.useState(false);
  const fileInputRef = React.useRef();
  const { uploadFileHandler = demoUploadImage } = BuilderContext.useBuilder();
  const [uid, setUid] = React.useState(uuid.v4());
  const onClick = () => {
    if (!fileInputRef) {
      return;
    }
    const parent = fileInputRef.current.parentNode;
    parent.focus();
    parent.querySelector("button").blur();
    fileInputRef.current.click();
  };
  const onChange = (e) => {
    try {
      const { files } = e.target;
      const fileList = [...files];
      if ((files == null ? void 0 : files.length) > MAX_IMAGE_UPLOAD) {
        antd.notification.error({
          message: i18n.t(
            "Vui l\xF2ng ch\u1EC9 t\u1EA3i l\xEAn t\u1ED1i \u0111a {{MAX_IMAGE_UPLOAD}} \u1EA3nh 1 l\u1EA7n!",
            { MAX_IMAGE_UPLOAD }
          )
        });
        return;
      }
      const errorAcceptedFile = fileList.some(
        (file) => !acceptedFiles.includes(file.type)
      );
      if (errorAcceptedFile) {
        antd.notification.error({
          message: i18n.t("Ch\u1EC9 upload c\xE1c \u0111\u1ECBnh d\u1EA1ng file: {{acceptedFiles}}", {
            acceptedFiles
          })
        });
        return;
      }
      uploadFiles(fileList);
    } finally {
      reset();
    }
  };
  const uploadFiles = (files) => {
    setUploading(true);
    const postFiles = files.map((file) => {
      return uploadFileHandler(file, "image");
    });
    Promise.all(postFiles).then((fileList) => {
      handlerAfterUpload == null ? void 0 : handlerAfterUpload(fileList);
    }).finally(() => setUploading(false));
  };
  const reset = () => {
    setUid(uuid.v4());
  };
  return /* @__PURE__ */ jsxRuntime.jsxs("div", {
    onKeyDown: onClick,
    onClick,
    children: [
      /* @__PURE__ */ jsxRuntime.jsx("input", {
        ref: fileInputRef,
        disabled: uploading,
        id: "image-file",
        type: "file",
        hidden: true,
        multiple: true,
        onClick: (e) => e.stopPropagation(),
        onChange: (e) => onChange(e)
      }, uid),
      /* @__PURE__ */ jsxRuntime.jsx(antd.Button, {
        loading: uploading,
        shape: "round",
        children: i18n.t("T\u1EA3i l\xEAn \u1EA3nh s\u1EA3n ph\u1EA9m (t\u1ED1i \u0111a 20MB)")
      })
    ]
  });
};

exports.UploadImageButton = UploadImageButton;
