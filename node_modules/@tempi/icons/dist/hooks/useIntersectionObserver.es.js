import { useState, useEffect } from 'react';

const useIntersectionObserver = (elementRef, {
  threshold = 0,
  root = null,
  rootMargin = "0%",
  freezeOnceVisible = false
}) => {
  const [isIntersected, setIsIntersected] = useState(false);
  const frozen = isIntersected && freezeOnceVisible;
  useEffect(() => {
    const node = elementRef == null ? void 0 : elementRef.current;
    const hasIOSupport = !!window.IntersectionObserver;
    if (!hasIOSupport || frozen || !node)
      return;
    const observerParams = { threshold, root, rootMargin };
    const observer = new IntersectionObserver(([entry], observer2) => {
      if (entry.isIntersecting) {
        setIsIntersected(true);
        if (freezeOnceVisible) {
          observer2.disconnect();
        }
      } else {
        setIsIntersected(false);
      }
    }, observerParams);
    observer.observe(node);
    return () => observer.disconnect();
  }, [elementRef == null ? void 0 : elementRef.current, threshold, root, rootMargin, frozen]);
  return isIntersected;
};

export { useIntersectionObserver };
