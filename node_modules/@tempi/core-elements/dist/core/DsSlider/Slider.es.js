import { jsxs, jsx } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { unitParse, UnitEnum, getStyle } from '@tempi/core-renderer';
import { useState, useEffect, Children } from 'react';
import { Swiper, SwiperSlide } from 'swiper/react';
import { renderPaginationStyle, renderSwipeButton } from './helper.es.js';
import SwiperCore, { Navigation, Pagination, Thumbs, Autoplay, Virtual } from 'swiper';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
SwiperCore.use([Navigation, Pagination, Thumbs, Autoplay, Virtual]);
const DSSlider = (_a) => {
  var _b = _a, {
    className,
    children,
    paginationStyle,
    navigationStyle,
    speed = 3e3,
    pauseOnMouseEnter = true,
    paginationColor,
    virtual,
    paginationPosition = "inside",
    paginationDeactiveColor,
    commonStyle,
    slidesPerViewMobile,
    navigationColor
  } = _b, swiperProps = __objRest(_b, [
    "className",
    "children",
    "paginationStyle",
    "navigationStyle",
    "speed",
    "pauseOnMouseEnter",
    "paginationColor",
    "virtual",
    "paginationPosition",
    "paginationDeactiveColor",
    "commonStyle",
    "slidesPerViewMobile",
    "navigationColor"
  ]);
  const {
    slidesPerView,
    slidesPerColumn,
    pagination,
    autoplay,
    loop,
    showThumbnail,
    alignThumbnail
  } = swiperProps;
  const [swiperKey, setSwiperKey] = useState(0);
  let breakpoints;
  const [thumbsSwiper, setThumbsSwiper] = useState(null);
  const isMultipleRows = slidesPerColumn && slidesPerColumn > 1;
  if (pagination) {
    swiperProps.pagination = {
      clickable: true
    };
  }
  if (isMultipleRows)
    swiperProps.loop = false;
  if (autoplay) {
    swiperProps.autoplay = {
      delay: speed,
      disableOnInteraction: false,
      pauseOnMouseEnter
    };
  }
  if (slidesPerViewMobile) {
    breakpoints = {
      320: { slidesPerView: slidesPerViewMobile },
      640: { slidesPerView }
    };
  }
  useEffect(() => {
    setSwiperKey((key) => key + 1);
  }, [
    showThumbnail,
    autoplay,
    loop,
    speed,
    pauseOnMouseEnter,
    virtual,
    slidesPerColumn
  ]);
  return /* @__PURE__ */ jsxs(Wrapper, {
    className,
    paginationStyle,
    navigationStyle,
    isMultipleRows,
    paginationColor,
    paginationDeactiveColor,
    navigationColor,
    paginationPosition,
    commonStyle,
    slidesPerView,
    slidesPerColumn,
    itemsCount: Children.toArray(children).length,
    spaceBetween: swiperProps == null ? void 0 : swiperProps.spaceBetween,
    children: [
      /* @__PURE__ */ jsx(Swiper, __spreadProps(__spreadValues({
        breakpoints
      }, swiperProps), {
        thumbs: {
          swiper: thumbsSwiper && !thumbsSwiper.destroyed ? thumbsSwiper : null
        },
        virtual: virtual && slidesPerView ? {
          addSlidesBefore: slidesPerView
        } : false,
        resizeObserver: true,
        slidesPerColumnFill: "row",
        children: Children.map(children, (child, index) => /* @__PURE__ */ jsx(SwiperSlide, {
          virtualIndex: index,
          children: child
        }, `slide-${index}`))
      }), `swiper-${swiperKey}`),
      showThumbnail && /* @__PURE__ */ jsx(Swiper, {
        className: `swiper-thumbnail ${alignThumbnail ? `swiper-thumbnail__${alignThumbnail}` : ""}`,
        onSwiper: setThumbsSwiper,
        spaceBetween: 10,
        slidesPerView: "auto",
        watchSlidesProgress: true,
        slideToClickedSlide: true,
        children: Children.map(children, (child, index) => /* @__PURE__ */ jsx(SwiperSlide, {
          virtualIndex: index,
          children: child
        }, `thumb-${index}`))
      })
    ]
  });
};
const Wrapper = styled.div(
  ({
    isMultipleRows,
    paginationStyle,
    paginationColor,
    paginationPosition,
    paginationDeactiveColor,
    navigationStyle,
    navigationColor,
    commonStyle,
    slidesPerView = 1,
    slidesPerColumn = 1,
    itemsCount,
    spaceBetween = 10
  }) => {
    var _a;
    const isServerless = typeof window === "undefined";
    let totalItemPerRow, serverWidthWrapper, serverWidthItem;
    if (isServerless) {
      totalItemPerRow = Math.ceil(itemsCount / slidesPerColumn);
      serverWidthWrapper = `${totalItemPerRow / slidesPerView * 100}%`;
      serverWidthItem = `calc(100% / ${totalItemPerRow} - ${spaceBetween * (totalItemPerRow - 1) / totalItemPerRow}px)`;
    }
    return `
    .swiper-container {
      margin-left: auto;
      margin-right: auto;
      position: relative;
      overflow: hidden;
      list-style: none;
      padding: 0;
      ${paginationStyle && paginationPosition === "outside" ? "padding-bottom: 3em;" : ""}
    }
    .swiper-wrapper {
      position: relative;
      height: 100%;
      display: flex;
      transition-property: transform;
      box-sizing: content-box;
      flex-wrap: ${isMultipleRows ? "wrap" : "nowrap"};
      // Ch\u1EC9 c\xF3 t\xE1c d\u1EE5ng \u1EDF SSR, khi v\u1EC1 CSR th\u01B0 vi\u1EC7n swiper s\u1EBD t\u1EF1 \u0111\u1ED9ng override css n\xE0y b\u1EB1ng pixel
      ${isServerless ? `width: ${serverWidthWrapper}` : ""}
    }
    .swiper-slide {
      flex-shrink: 0;
      height: 100%;
      position: relative;
      border-radius: ${unitParse(
      (_a = commonStyle == null ? void 0 : commonStyle.borderRadius) != null ? _a : 0,
      UnitEnum.percent
    )};
      overflow: hidden;
      transition-property: transform;
      ${isMultipleRows ? `margin-top: 0px !important` : ""};
      // Ch\u1EC9 c\xF3 t\xE1c d\u1EE5ng \u1EDF SSR, khi v\u1EC1 CSR th\u01B0 vi\u1EC7n swiper s\u1EBD t\u1EF1 \u0111\u1ED9ng override css n\xE0y b\u1EB1ng pixel
      ${isServerless ? `width: ${serverWidthItem};
            margin-right: ${spaceBetween}px;` : ""}
    }
    &:hover {
      .swiper-button-next,
      .swiper-button-prev {
        opacity: 1;
        &.swiper-button-disabled {
          opacity: 0.35;
        }
      }
    }
    .swiper-pagination {
      position: absolute;
      text-align: center;
      transform: translate3d(0, 0, 0);
      z-index: 10;
    }
    .swiper-pagination-fraction {
      bottom: 0;
      left: 0;
      width: 100%;
    }
    .swiper-pagination-bullets {
      bottom: 10px;
      left: 0;
      width: 100%;
    }
    ${paginationStyle ? renderPaginationStyle(
      paginationStyle,
      paginationColor,
      paginationDeactiveColor
    ) : ""}
    .swiper-button-prev,
    .swiper-button-next {
      position: absolute;
      top: 50%;
      z-index: 10;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 44px;
      height: 44px;
      margin-top: -22px;
      opacity: 0;
      &.swiper-button-disabled {
        opacity: 0;
        cursor: auto;
        pointer-events: auto;
      }
    }
    .swiper-thumbnail {
      padding-top: 10px;

      &.swiper-thumbnail__left {
        display: flex;
        align-items: center;
        justify-content: flex-start;
      }

      &.swiper-thumbnail__center {
        display: flex;
        align-items: center;
        justify-content: center;
      }

      &.swiper-thumbnail__right {
        display: flex;
        align-items: center;
        justify-content: flex-end;
      }

      .swiper-slide {
        width: 80px !important;
        height: 80px;
        cursor: pointer;

        img {
          width: 80px;
          height: 80px;
        }

        &.swiper-slide-thumb-active::after {
          background: transparent;
        }

        &::after {
          content: "";
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0,0,0,.5);
        }
      }
    }
    ${getStyle(commonStyle)}
    ${navigationStyle ? renderSwipeButton(navigationStyle, navigationColor) : ""}
`;
  }
);

export { DSSlider };
