import { jsx } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { useState, useLayoutEffect, useEffect } from 'react';

const Wrapper = styled.div`
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  overflow: hidden;
  z-index: 0;
  border-radius: inherit;
  span {
    transform: scale(0);
    border-radius: 100%;
    position: absolute;
    opacity: 0.75;
    background-color: rgba(255, 255, 255, 0.6);
    animation: ripple;
    animation-duration: 696ms;
  }
  @keyframes ripple {
    to {
      opacity: 0;
      transform: scale(2);
    }
  }
`;
const useDebouncedRippleCleanUp = (rippleCount, duration, cleanUpFunction) => {
  const useIsomorphicLayoutEffect = typeof window !== "undefined" ? useLayoutEffect : useEffect;
  useIsomorphicLayoutEffect(() => {
    let bounce = null;
    if (rippleCount > 0) {
      clearTimeout(bounce);
      bounce = setTimeout(() => {
        cleanUpFunction();
        clearTimeout(bounce);
      }, duration * 4);
    }
    return () => clearTimeout(bounce);
  }, [rippleCount, duration, cleanUpFunction]);
};
const Ripple = ({
  duration = 600,
  color = "rgba(255,255,255,0.6)"
}) => {
  const [rippleArray, setRippleArray] = useState([]);
  useDebouncedRippleCleanUp(rippleArray.length, duration, () => {
    setRippleArray([]);
  });
  const addRipple = (event) => {
    const rippleContainer = event.currentTarget.getBoundingClientRect();
    const size = rippleContainer.width > rippleContainer.height ? rippleContainer.width : rippleContainer.height;
    const x = event.clientX - rippleContainer.x - size / 2;
    const y = event.clientY - rippleContainer.y - size / 2;
    const newRipple = {
      x,
      y,
      size
    };
    setRippleArray([...rippleArray, newRipple]);
  };
  return /* @__PURE__ */ jsx(Wrapper, {
    onMouseDown: addRipple,
    children: rippleArray.map((ripple, index) => {
      return /* @__PURE__ */ jsx("span", {
        style: {
          top: ripple.y,
          left: ripple.x,
          width: ripple.size,
          height: ripple.size,
          backgroundColor: color,
          animationDuration: `${duration}ms`
        }
      }, "span" + index);
    })
  });
};

export { Ripple };
