import { jsx } from 'react/jsx-runtime';
import React__default, { useState } from 'react';

const LazyComponent = ({
  children,
  debounce = 0
}) => {
  const ref = React__default.useRef(null);
  const [hydrated, setHydrated] = useState(false);
  React__default.useEffect(() => {
    if (!ref.current)
      return;
    const ob = new IntersectionObserver((entries, observer) => {
      for (const entry of entries) {
        if (entry.isIntersecting) {
          setHydrated(true);
          observer.disconnect();
          return;
        }
      }
    });
    ob.observe(ref.current);
    function hydrate(deadline) {
      if (deadline.timeRemaining() > debounce) {
        setHydrated(true);
        ob.disconnect();
      } else {
        requestIdleCallback(hydrate);
      }
    }
    if (debounce > 0) {
      requestIdleCallback(hydrate);
    }
    return () => ob.disconnect();
  }, [debounce]);
  return /* @__PURE__ */ jsx("div", {
    ref,
    className: "lazy-component",
    children: hydrated ? children : /* @__PURE__ */ jsx("div", {
      className: "fake-body",
      style: { width: "100%", height: 200 }
    })
  });
};

export { LazyComponent };
