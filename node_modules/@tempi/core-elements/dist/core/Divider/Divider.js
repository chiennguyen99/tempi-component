'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var coreRenderer = require('@tempi/core-renderer');
var styled = require('@emotion/styled');
var type = require('../../components/divider/type.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const Divider = (_a) => {
  var _b = _a, {
    width = "100%",
    height = "1px",
    color = "black",
    dividerStyle = type.DividerStyleEnum.solid,
    align,
    gap,
    alignContent,
    spacingContent,
    children
  } = _b, rest = __objRest(_b, [
    "width",
    "height",
    "color",
    "dividerStyle",
    "align",
    "gap",
    "alignContent",
    "spacingContent",
    "children"
  ]);
  const renderSeparator = () => {
    if (!children) {
      return /* @__PURE__ */ jsxRuntime.jsx(WrapperSeparator, {
        width,
        weight: height,
        dividerStyle,
        color,
        align
      });
    }
    return /* @__PURE__ */ jsxRuntime.jsx(WrapperSeparatorText, {
      width,
      weight: height,
      dividerStyle,
      color,
      align,
      alignContent,
      spacingContent,
      children: /* @__PURE__ */ jsxRuntime.jsx("span", {
        children
      })
    });
  };
  return /* @__PURE__ */ jsxRuntime.jsx(WrapperDivider, __spreadProps(__spreadValues({}, rest), {
    gap,
    children: renderSeparator()
  }));
};
const WrapperDivider = styled__default["default"].div(
  ({ gap }) => `
  --divider-gap: ${coreRenderer.unitParse(gap) || "12px"};
  display: flex;
  padding-top: var(--divider-gap);
  padding-bottom: var(--divider-gap);
`
);
const transformAlign = (align) => {
  switch (align) {
    case coreRenderer.Alignment.center:
      return "margin: 0 auto;";
    case coreRenderer.Alignment.right:
      return `
        margin: 0 auto;
        margin-right: 0;
      `;
    default:
      return "";
  }
};
const transformAlignContent = (alignContent) => {
  const css = `{
    display: block;
    content: "";
    border-bottom: 0;
    flex-grow: 1;
    border-top: var(--divider-border-width) var(--divider-border-style) var(--divider-color);
  }`;
  switch (alignContent) {
    case coreRenderer.Alignment.left:
      return `
          &:after ${css}
        `;
    case coreRenderer.Alignment.right:
      return `
          &:before ${css}
        `;
    default:
      return `
          &:after, &:before ${css}
        `;
  }
};
const WrapperSeparator = styled__default["default"].div(
  ({ width, weight, dividerStyle, color, align }) => `
  --divider-border-style: ${dividerStyle};
  --divider-color: ${color || "#000000"};
  --divider-border-width: ${weight || "1px"};
  display: flex;
  width: ${width ? width : "100%"};
  border-top: var(--divider-border-width) var(--divider-border-style) var(--divider-color);
  ${transformAlign(align)}
`
);
const WrapperSeparatorText = styled__default["default"].div(
  ({
    width,
    weight,
    dividerStyle,
    color = "black",
    align,
    alignContent,
    spacingContent
  }) => `
  --divider-border-style: ${dividerStyle};
  --divider-color: ${color};
  --divider-border-width: ${weight || "1px"};
  --divider-content-spacing: ${spacingContent || "10px"};
  display: flex;
  align-items: center;
  width: ${width ? width : "100%"};
  ${transformAlign(align)}
  ${transformAlignContent(alignContent)}

  > span {
    margin: 0 var(--divider-content-spacing);
    margin-left: ${alignContent === "left" ? "0" : "var(--divider-content-spacing)"};
    margin-right: ${alignContent === "right" ? "0" : "var(--divider-content-spacing)"};
  }
`
);
Divider.displayName = "Divider";

exports.Divider = Divider;
