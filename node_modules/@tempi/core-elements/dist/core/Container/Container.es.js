import { jsx } from 'react/jsx-runtime';
import React__default from 'react';
import { unitParse } from '@tempi/core-renderer';
import styled from '@emotion/styled';
import { BREAK_POINTS } from '../../constants/grid.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const Wrapper = styled.div`
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  position: relative;
  @media (min-width: ${BREAK_POINTS.xl}) {
    max-width: ${(props) => props.fluid ? "100%" : unitParse(props.maxWidth)};
  }
`;
const Container = React__default.forwardRef(
  (props, ref) => {
    const _a = props, { children, fluid = false, maxWidth = 1232 } = _a, others = __objRest(_a, ["children", "fluid", "maxWidth"]);
    return /* @__PURE__ */ jsx(Wrapper, __spreadProps(__spreadValues({
      maxWidth,
      fluid,
      ref
    }, others), {
      children
    }));
  }
);
Container.displayName = "Container";

export { Container };
