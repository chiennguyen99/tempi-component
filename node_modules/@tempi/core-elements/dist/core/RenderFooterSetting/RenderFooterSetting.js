'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var styled = require('@emotion/styled');
var coreEditor = require('@tempi/core-editor');
var antd = require('antd');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

const RenderFooterSetting = ({
  children,
  footerSetting
}) => {
  const {
    query: { node },
    hoveredNodes,
    selectedNodes
  } = coreEditor.useEditor((state) => ({
    hoveredNodes: state.events.hovered,
    selectedNodes: state.events.selected
  }));
  const { allDescendants, isActive, isHover } = coreEditor.useNode(({ events, id }) => ({
    allDescendants: node(id).descendants(true),
    isActive: events.selected,
    isHover: events.hovered
  }));
  const showFooterSetting = () => {
    if (allDescendants.some((el) => selectedNodes.has(el)))
      return true;
    const hoveredChildren = allDescendants.some((el) => hoveredNodes.has(el));
    return !allDescendants.length || hoveredChildren || isHover || isActive;
  };
  const { setShowModalSelectBlock, setInsertIndex } = coreEditor.useBuilder();
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      showFooterSetting() && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(Indicator, {}),
          /* @__PURE__ */ jsxRuntime.jsxs(ActionWrapper, {
            children: [
              /* @__PURE__ */ jsxRuntime.jsx(Title, {
                children: i18n.t("Ch\xE2n trang")
              }),
              /* @__PURE__ */ jsxRuntime.jsx(SettingWrapper, {
                children: footerSetting
              })
            ]
          })
        ]
      }),
      allDescendants.length ? children : /* @__PURE__ */ jsxRuntime.jsx(StyledAddBlockButton, {
        type: "primary",
        shape: "round",
        onClick: () => {
          setInsertIndex(0);
          setShowModalSelectBlock(true);
        },
        children: i18n.t("common.add_block")
      })
    ]
  });
};
const ActionWrapper = styled__default["default"].div`
  height: 32px;
  position: absolute;
  top: -16px;
  left: 0;
  display: flex;
  z-index: 1051;
`;
const Title = styled__default["default"].div`
  color: ${(props) => props.theme.colorWhite};
  background: ${(props) => props.theme.colorPrimary};
  text-align: center;
  line-height: 32px;
  padding: 0px 8px;
  border-radius: 999px;
  margin-left: 24px;
  margin-right: 16px;
`;
const SettingWrapper = styled__default["default"].div`
  height: 32px;
  background: ${(props) => props.theme.colorBgBase};
  box-shadow: ${(props) => props.theme.boxShadowSecondary};
  border-radius: 999px;
  display: flex;
  align-items: center;
`;
const Indicator = styled__default["default"].div`
  border: 2px solid ${(props) => props.theme.colorPrimary};
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1049;
  pointer-events: none;
`;
const StyledAddBlockButton = styled__default["default"](antd.Button)`
  padding: 0 2em;
  transform: translateX(-50%);
  font-size: 0.9em;
  z-index: 1050;
  margin: 50px 50%;
`;

exports.RenderFooterSetting = RenderFooterSetting;
