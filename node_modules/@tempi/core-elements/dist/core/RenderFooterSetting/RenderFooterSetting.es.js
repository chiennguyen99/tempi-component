import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../i18n.es.js';
import styled from '@emotion/styled';
import { useEditor, useNode, useBuilder } from '@tempi/core-editor';
import { Button } from 'antd';

const RenderFooterSetting = ({
  children,
  footerSetting
}) => {
  const {
    query: { node },
    hoveredNodes,
    selectedNodes
  } = useEditor((state) => ({
    hoveredNodes: state.events.hovered,
    selectedNodes: state.events.selected
  }));
  const { allDescendants, isActive, isHover } = useNode(({ events, id }) => ({
    allDescendants: node(id).descendants(true),
    isActive: events.selected,
    isHover: events.hovered
  }));
  const showFooterSetting = () => {
    if (allDescendants.some((el) => selectedNodes.has(el)))
      return true;
    const hoveredChildren = allDescendants.some((el) => hoveredNodes.has(el));
    return !allDescendants.length || hoveredChildren || isHover || isActive;
  };
  const { setShowModalSelectBlock, setInsertIndex } = useBuilder();
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      showFooterSetting() && /* @__PURE__ */ jsxs(Fragment, {
        children: [
          /* @__PURE__ */ jsx(Indicator, {}),
          /* @__PURE__ */ jsxs(ActionWrapper, {
            children: [
              /* @__PURE__ */ jsx(Title, {
                children: t("Ch\xE2n trang")
              }),
              /* @__PURE__ */ jsx(SettingWrapper, {
                children: footerSetting
              })
            ]
          })
        ]
      }),
      allDescendants.length ? children : /* @__PURE__ */ jsx(StyledAddBlockButton, {
        type: "primary",
        shape: "round",
        onClick: () => {
          setInsertIndex(0);
          setShowModalSelectBlock(true);
        },
        children: t("common.add_block")
      })
    ]
  });
};
const ActionWrapper = styled.div`
  height: 32px;
  position: absolute;
  top: -16px;
  left: 0;
  display: flex;
  z-index: 1051;
`;
const Title = styled.div`
  color: ${(props) => props.theme.colorWhite};
  background: ${(props) => props.theme.colorPrimary};
  text-align: center;
  line-height: 32px;
  padding: 0px 8px;
  border-radius: 999px;
  margin-left: 24px;
  margin-right: 16px;
`;
const SettingWrapper = styled.div`
  height: 32px;
  background: ${(props) => props.theme.colorBgBase};
  box-shadow: ${(props) => props.theme.boxShadowSecondary};
  border-radius: 999px;
  display: flex;
  align-items: center;
`;
const Indicator = styled.div`
  border: 2px solid ${(props) => props.theme.colorPrimary};
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1049;
  pointer-events: none;
`;
const StyledAddBlockButton = styled(Button)`
  padding: 0 2em;
  transform: translateX(-50%);
  font-size: 0.9em;
  z-index: 1050;
  margin: 50px 50%;
`;

export { RenderFooterSetting };
