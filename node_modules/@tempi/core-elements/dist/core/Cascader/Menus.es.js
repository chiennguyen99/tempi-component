import { jsxs, jsx } from 'react/jsx-runtime';
import * as React from 'react';
import arrayTreeFilter from 'array-tree-filter';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
class Menus extends React.Component {
  constructor() {
    super(...arguments);
    this.menuItems = {};
    this.saveMenuItem = (index) => (node) => {
      this.menuItems[index] = node;
    };
  }
  componentDidMount() {
    this.scrollActiveItemToView();
  }
  componentDidUpdate(prevProps) {
    if (!prevProps.visible && this.props.visible) {
      this.scrollActiveItemToView();
    }
  }
  getFieldName(name) {
    const { fieldNames, defaultFieldNames } = this.props;
    return fieldNames[name] || defaultFieldNames[name];
  }
  getOption(option, menuIndex) {
    const { prefixCls, expandTrigger, expandIcon, loadingIcon } = this.props;
    const onSelect = this.props.onSelect.bind(this, option, menuIndex);
    const onItemDoubleClick = this.props.onItemDoubleClick.bind(
      this,
      option,
      menuIndex
    );
    let expandProps = {
      onClick: onSelect,
      onDoubleClick: onItemDoubleClick
    };
    let menuItemCls = `${prefixCls}-menu-item`;
    let expandIconNode = null;
    const hasChildren = option[this.getFieldName("children")] && option[this.getFieldName("children")].length > 0;
    if (hasChildren || option.isLeaf === false) {
      menuItemCls += ` ${prefixCls}-menu-item-expand`;
      if (!option.loading) {
        expandIconNode = /* @__PURE__ */ jsx("span", {
          className: `${prefixCls}-menu-item-expand-icon`,
          children: expandIcon
        });
      }
    }
    if (expandTrigger === "hover" && (hasChildren || option.isLeaf === false)) {
      expandProps = {
        onMouseEnter: this.delayOnSelect.bind(this, onSelect),
        onMouseLeave: this.delayOnSelect.bind(this),
        onClick: onSelect
      };
    }
    if (this.isActiveOption(option, menuIndex)) {
      menuItemCls += ` ${prefixCls}-menu-item-active`;
      expandProps.ref = this.saveMenuItem(menuIndex);
    }
    if (option.disabled) {
      menuItemCls += ` ${prefixCls}-menu-item-disabled`;
    }
    let loadingIconNode = null;
    if (option.loading) {
      menuItemCls += ` ${prefixCls}-menu-item-loading`;
      loadingIconNode = loadingIcon || null;
    }
    let title = "";
    if ("title" in option) {
      title = option.title;
    } else if (typeof option[this.getFieldName("label")] === "string") {
      title = option[this.getFieldName("label")];
    }
    return /* @__PURE__ */ jsxs("li", __spreadProps(__spreadValues({
      className: menuItemCls,
      title
    }, expandProps), {
      role: "menuitem",
      onMouseDown: (e) => e.preventDefault(),
      children: [
        option[this.getFieldName("label")],
        expandIconNode,
        loadingIconNode
      ]
    }), option[this.getFieldName("value")]);
  }
  getActiveOptions(values) {
    const { options } = this.props;
    const activeValue = values || this.props.activeValue;
    return arrayTreeFilter(
      options,
      (o, level) => o[this.getFieldName("value")] === activeValue[level],
      { childrenKeyName: this.getFieldName("children") }
    );
  }
  getShowOptions() {
    const { options } = this.props;
    const result = this.getActiveOptions().map((activeOption) => activeOption[this.getFieldName("children")]).filter((activeOption) => !!activeOption);
    result.unshift(options);
    return result;
  }
  delayOnSelect(onSelect, ...args) {
    if (this.delayTimer) {
      clearTimeout(this.delayTimer);
      this.delayTimer = null;
    }
    if (typeof onSelect === "function") {
      this.delayTimer = window.setTimeout(() => {
        onSelect(args);
        this.delayTimer = null;
      }, 150);
    }
  }
  scrollActiveItemToView() {
    const optionsLength = this.getShowOptions().length;
    for (let i = 0; i < optionsLength; i++) {
      const itemComponent = this.menuItems[i];
      if (itemComponent && itemComponent.parentElement) {
        itemComponent.parentElement.scrollTop = itemComponent.offsetTop;
      }
    }
  }
  isActiveOption(option, menuIndex) {
    const { activeValue = [] } = this.props;
    return activeValue[menuIndex] === option[this.getFieldName("value")];
  }
  render() {
    const { prefixCls, dropdownMenuColumnStyle } = this.props;
    return /* @__PURE__ */ jsx("div", {
      children: this.getShowOptions().map((options, menuIndex) => /* @__PURE__ */ jsx("ul", {
        className: `${prefixCls}-menu`,
        style: dropdownMenuColumnStyle,
        children: options.map((option) => this.getOption(option, menuIndex))
      }, menuIndex))
    });
  }
}
Menus.defaultProps = {
  options: [],
  value: [],
  activeValue: [],
  onSelect() {
  },
  prefixCls: "rc-cascader-menus",
  visible: false,
  expandTrigger: "click"
};
var Menus$1 = Menus;

export { Menus$1 as default };
