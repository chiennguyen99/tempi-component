'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var Trigger = require('rc-trigger');
var warning = require('warning');
var KeyCode = require('rc-util/lib/KeyCode');
var arrayTreeFilter = require('array-tree-filter');
var utils = require('./utils.js');
var Menus = require('./Menus.js');
var placements = require('./placements.js');
var styled = require('@emotion/styled');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var Trigger__default = /*#__PURE__*/_interopDefaultLegacy(Trigger);
var warning__default = /*#__PURE__*/_interopDefaultLegacy(warning);
var KeyCode__default = /*#__PURE__*/_interopDefaultLegacy(KeyCode);
var arrayTreeFilter__default = /*#__PURE__*/_interopDefaultLegacy(arrayTreeFilter);
var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
class Cascader extends React__namespace.Component {
  constructor(props) {
    super(props);
    this.setPopupVisible = (popupVisible) => {
      const { value } = this.state;
      if (!("popupVisible" in this.props)) {
        this.setState({ popupVisible });
      }
      if (popupVisible && !this.state.popupVisible) {
        this.setState({
          activeValue: value
        });
      }
      this.props.onPopupVisibleChange(popupVisible);
    };
    this.handleChange = (options, { visible }, e) => {
      if (e.type !== "keydown" || e.keyCode === KeyCode__default["default"].ENTER) {
        this.props.onChange(
          options.map((o) => o[this.getFieldName("value")]),
          options
        );
        this.setPopupVisible(visible);
      }
    };
    this.handlePopupVisibleChange = (popupVisible) => {
      this.setPopupVisible(popupVisible);
    };
    this.handleMenuSelect = (targetOption, menuIndex, e) => {
      const triggerNode = this.trigger.getRootDomNode();
      if (triggerNode && triggerNode.focus) {
        triggerNode.focus();
      }
      const { changeOnSelect, loadData, expandTrigger } = this.props;
      if (!targetOption || targetOption.disabled) {
        return;
      }
      let { activeValue } = this.state;
      activeValue = activeValue.slice(0, menuIndex + 1);
      activeValue[menuIndex] = targetOption[this.getFieldName("value")];
      const activeOptions = this.getActiveOptions(activeValue);
      if (targetOption.isLeaf === false && !targetOption[this.getFieldName("children")] && loadData) {
        if (changeOnSelect) {
          this.handleChange(activeOptions, { visible: true }, e);
        }
        this.setState({ activeValue });
        loadData(activeOptions);
        return;
      }
      const newState = {};
      if (!targetOption[this.getFieldName("children")] || !targetOption[this.getFieldName("children")].length) {
        this.handleChange(activeOptions, { visible: false }, e);
        newState.value = activeValue;
      } else if (changeOnSelect && (e.type === "click" || e.type === "keydown")) {
        if (expandTrigger === "hover") {
          this.handleChange(activeOptions, { visible: false }, e);
        } else {
          this.handleChange(activeOptions, { visible: true }, e);
        }
        newState.value = activeValue;
      }
      newState.activeValue = activeValue;
      if ("value" in this.props || e.type === "keydown" && e.keyCode !== KeyCode__default["default"].ENTER) {
        delete newState.value;
      }
      this.setState(newState);
    };
    this.handleItemDoubleClick = () => {
      const { changeOnSelect } = this.props;
      if (changeOnSelect) {
        this.setPopupVisible(false);
      }
    };
    this.handleKeyDown = (e) => {
      const { children } = this.props;
      if (children && children.props.onKeyDown) {
        children.props.onKeyDown(e);
        return;
      }
      const activeValue = [...this.state.activeValue];
      const currentLevel = activeValue.length - 1 < 0 ? 0 : activeValue.length - 1;
      const currentOptions = this.getCurrentLevelOptions();
      const currentIndex = currentOptions.map((o) => o[this.getFieldName("value")]).indexOf(activeValue[currentLevel]);
      if (e.keyCode !== KeyCode__default["default"].DOWN && e.keyCode !== KeyCode__default["default"].UP && e.keyCode !== KeyCode__default["default"].LEFT && e.keyCode !== KeyCode__default["default"].RIGHT && e.keyCode !== KeyCode__default["default"].ENTER && e.keyCode !== KeyCode__default["default"].SPACE && e.keyCode !== KeyCode__default["default"].BACKSPACE && e.keyCode !== KeyCode__default["default"].ESC && e.keyCode !== KeyCode__default["default"].TAB) {
        return;
      }
      if (!this.state.popupVisible && e.keyCode !== KeyCode__default["default"].BACKSPACE && e.keyCode !== KeyCode__default["default"].LEFT && e.keyCode !== KeyCode__default["default"].RIGHT && e.keyCode !== KeyCode__default["default"].ESC && e.keyCode !== KeyCode__default["default"].TAB) {
        this.setPopupVisible(true);
        if (this.props.onKeyDown) {
          this.props.onKeyDown(e);
        }
        return;
      }
      if (e.keyCode === KeyCode__default["default"].DOWN || e.keyCode === KeyCode__default["default"].UP) {
        e.preventDefault();
        let nextIndex = currentIndex;
        if (nextIndex !== -1) {
          if (e.keyCode === KeyCode__default["default"].DOWN) {
            nextIndex += 1;
            nextIndex = nextIndex >= currentOptions.length ? 0 : nextIndex;
          } else {
            nextIndex -= 1;
            nextIndex = nextIndex < 0 ? currentOptions.length - 1 : nextIndex;
          }
        } else {
          nextIndex = 0;
        }
        activeValue[currentLevel] = currentOptions[nextIndex][this.getFieldName("value")];
      } else if (e.keyCode === KeyCode__default["default"].LEFT || e.keyCode === KeyCode__default["default"].BACKSPACE) {
        e.preventDefault();
        activeValue.splice(activeValue.length - 1, 1);
      } else if (e.keyCode === KeyCode__default["default"].RIGHT) {
        e.preventDefault();
        if (currentOptions[currentIndex] && currentOptions[currentIndex][this.getFieldName("children")]) {
          activeValue.push(
            currentOptions[currentIndex][this.getFieldName("children")][0][this.getFieldName("value")]
          );
        }
      } else if (e.keyCode === KeyCode__default["default"].ESC || e.keyCode === KeyCode__default["default"].TAB) {
        this.setPopupVisible(false);
        if (this.props.onKeyDown) {
          this.props.onKeyDown(e);
        }
        return;
      }
      if (!activeValue || activeValue.length === 0) {
        this.setPopupVisible(false);
      }
      const activeOptions = this.getActiveOptions(activeValue);
      const targetOption = activeOptions[activeOptions.length - 1];
      this.handleMenuSelect(targetOption, activeOptions.length - 1, e);
      if (this.props.onKeyDown) {
        this.props.onKeyDown(e);
      }
    };
    this.saveTrigger = (node) => {
      this.trigger = node;
    };
    let initialValue = [];
    if ("value" in props) {
      initialValue = props.value || [];
    } else if ("defaultValue" in props) {
      initialValue = props.defaultValue || [];
    }
    warning__default["default"](
      !("filedNames" in props),
      "`filedNames` of Cascader is a typo usage and deprecated, please use `fieldNames` instead."
    );
    this.state = {
      popupVisible: props.popupVisible,
      activeValue: initialValue,
      value: initialValue,
      prevProps: props
    };
    this.defaultFieldNames = {
      label: "label",
      value: "value",
      children: "children"
    };
  }
  static getDerivedStateFromProps(nextProps, prevState) {
    const { prevProps = {} } = prevState;
    const newState = {
      prevProps: nextProps
    };
    if ("value" in nextProps && !utils.isEqualArrays(prevProps.value, nextProps.value)) {
      newState.value = nextProps.value || [];
      if (!("loadData" in nextProps)) {
        newState.activeValue = nextProps.value || [];
      }
    }
    if ("popupVisible" in nextProps) {
      newState.popupVisible = nextProps.popupVisible;
    }
    return newState;
  }
  getPopupDOMNode() {
    return this.trigger.getPopupDomNode();
  }
  getFieldName(name) {
    const { defaultFieldNames } = this;
    const { fieldNames, filedNames } = this.props;
    if ("filedNames" in this.props) {
      return filedNames[name] || defaultFieldNames[name];
    }
    return fieldNames[name] || defaultFieldNames[name];
  }
  getFieldNames() {
    const { fieldNames, filedNames } = this.props;
    if ("filedNames" in this.props) {
      return filedNames;
    }
    return fieldNames;
  }
  getCurrentLevelOptions() {
    const { options = [] } = this.props;
    const { activeValue = [] } = this.state;
    const result = arrayTreeFilter__default["default"](
      options,
      (o, level) => o[this.getFieldName("value")] === activeValue[level],
      { childrenKeyName: this.getFieldName("children") }
    );
    if (result[result.length - 2]) {
      return result[result.length - 2][this.getFieldName("children")];
    }
    return [...options].filter((o) => !o.disabled);
  }
  getActiveOptions(activeValue) {
    return arrayTreeFilter__default["default"](
      this.props.options || [],
      (o, level) => o[this.getFieldName("value")] === activeValue[level],
      { childrenKeyName: this.getFieldName("children") }
    );
  }
  render() {
    const _a = this.props, {
      prefixCls,
      transitionName,
      popupClassName,
      options = [],
      disabled,
      builtinPlacements,
      popupPlacement,
      children,
      dropdownRender
    } = _a, restProps = __objRest(_a, [
      "prefixCls",
      "transitionName",
      "popupClassName",
      "options",
      "disabled",
      "builtinPlacements",
      "popupPlacement",
      "children",
      "dropdownRender"
    ]);
    let menus = /* @__PURE__ */ jsxRuntime.jsx("div", {});
    let emptyMenuClassName = "";
    if (options && options.length > 0) {
      menus = /* @__PURE__ */ jsxRuntime.jsx(StyledMenus, __spreadProps(__spreadValues({}, this.props), {
        fieldNames: this.getFieldNames(),
        defaultFieldNames: this.defaultFieldNames,
        activeValue: this.state.activeValue,
        onSelect: this.handleMenuSelect,
        onItemDoubleClick: this.handleItemDoubleClick,
        visible: this.state.popupVisible
      }));
    } else {
      emptyMenuClassName = ` ${prefixCls}-menus-empty`;
    }
    let popupNode = menus;
    if (dropdownRender) {
      popupNode = dropdownRender(menus);
    }
    return /* @__PURE__ */ jsxRuntime.jsx(Trigger__default["default"], __spreadProps(__spreadValues({
      ref: this.saveTrigger
    }, restProps), {
      popupPlacement,
      builtinPlacements,
      popupTransitionName: transitionName,
      action: disabled ? [] : ["click"],
      popupVisible: disabled ? false : this.state.popupVisible,
      onPopupVisibleChange: this.handlePopupVisibleChange,
      prefixCls: `${prefixCls}-menus`,
      popupClassName: popupClassName + emptyMenuClassName,
      popup: popupNode,
      children: React__namespace.cloneElement(children, {
        onKeyDown: this.handleKeyDown,
        tabIndex: disabled ? void 0 : 0
      })
    }));
  }
}
Cascader.defaultProps = {
  onChange: () => {
  },
  onPopupVisibleChange: () => {
  },
  disabled: false,
  transitionName: "",
  prefixCls: "rc-cascader",
  popupClassName: "",
  popupPlacement: "bottomLeft",
  builtinPlacements: placements,
  expandTrigger: "click",
  fieldNames: { label: "label", value: "value", children: "children" },
  expandIcon: ">"
};
var Cascader$1 = Cascader;
const StyledMenus = styled__default["default"](Menus)`
  .rc-cascader {
    font-size: 12px;
  }
  .rc-cascader-menus {
    font-size: 12px;
    overflow: hidden;
    background: #fff;
    position: absolute;
    border: 1px solid #d9d9d9;
    border-radius: 6px;
    box-shadow: 0 0 4px rgba(0, 0, 0, 0.17);
    white-space: nowrap;
  }
  .rc-cascader-menus-hidden {
    display: none;
  }
  .rc-cascader-menus.slide-up-enter,
  .rc-cascader-menus.slide-up-appear {
    animation-duration: 0.3s;
    animation-fill-mode: both;
    transform-origin: 0 0;
    opacity: 0;
    animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
    animation-play-state: paused;
  }
  .rc-cascader-menus.slide-up-leave {
    animation-duration: 0.3s;
    animation-fill-mode: both;
    transform-origin: 0 0;
    opacity: 1;
    animation-timing-function: cubic-bezier(0.6, 0.04, 0.98, 0.34);
    animation-play-state: paused;
  }
  .rc-cascader-menus.slide-up-enter.slide-up-enter-active.rc-cascader-menus-placement-bottomLeft,
  .rc-cascader-menus.slide-up-appear.slide-up-appear-active.rc-cascader-menus-placement-bottomLeft {
    animation-name: SlideUpIn;
    animation-play-state: running;
  }
  .rc-cascader-menus.slide-up-enter.slide-up-enter-active.rc-cascader-menus-placement-topLeft,
  .rc-cascader-menus.slide-up-appear.slide-up-appear-active.rc-cascader-menus-placement-topLeft {
    animation-name: SlideDownIn;
    animation-play-state: running;
  }
  .rc-cascader-menus.slide-up-leave.slide-up-leave-active.rc-cascader-menus-placement-bottomLeft {
    animation-name: SlideUpOut;
    animation-play-state: running;
  }
  .rc-cascader-menus.slide-up-leave.slide-up-leave-active.rc-cascader-menus-placement-topLeft {
    animation-name: SlideDownOut;
    animation-play-state: running;
  }
  .rc-cascader-menu {
    display: inline-block;
    width: 100px;
    height: 192px;
    list-style: none;
    margin: 0;
    padding: 0;
    border-right: 1px solid #e9e9e9;
    overflow: auto;
  }
  .rc-cascader-menu:last-child {
    border-right: 0;
  }
  .rc-cascader-menu-item {
    height: 32px;
    line-height: 32px;
    padding: 0 16px;
    cursor: pointer;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    transition: all 0.3s ease;
    position: relative;
  }
  .rc-cascader-menu-item:hover {
    background: tint(#2db7f5, 90%);
  }
  .rc-cascader-menu-item-disabled {
    cursor: not-allowed;
    color: #ccc;
  }
  .rc-cascader-menu-item-disabled:hover {
    background: transparent;
  }
  .rc-cascader-menu-item-loading:after {
    position: absolute;
    right: 12px;
    content: 'loading';
    color: #aaa;
    font-style: italic;
  }
  .rc-cascader-menu-item-active {
    background: tint(#2db7f5, 80%);
  }
  .rc-cascader-menu-item-active:hover {
    background: tint(#2db7f5, 80%);
  }
  .rc-cascader-menu-item-expand {
    position: relative;
  }
  .rc-cascader-menu-item-expand-icon {
    font-size: 12px;
    color: #999;
    position: absolute;
    right: 16px;
    line-height: 32px;
  }
  @keyframes SlideUpIn {
    0% {
      opacity: 0;
      transform-origin: 0% 0%;
      transform: scaleY(0.8);
    }
    100% {
      opacity: 1;
      transform-origin: 0% 0%;
      transform: scaleY(1);
    }
  }
  @keyframes SlideUpOut {
    0% {
      opacity: 1;
      transform-origin: 0% 0%;
      transform: scaleY(1);
    }
    100% {
      opacity: 0;
      transform-origin: 0% 0%;
      transform: scaleY(0.8);
    }
  }
  @keyframes SlideDownIn {
    0% {
      opacity: 0;
      transform-origin: 0% 100%;
      transform: scaleY(0.8);
    }
    100% {
      opacity: 1;
      transform-origin: 0% 100%;
      transform: scaleY(1);
    }
  }
  @keyframes SlideDownOut {
    0% {
      opacity: 1;
      transform-origin: 0% 100%;
      transform: scaleY(1);
    }
    100% {
      opacity: 0;
      transform-origin: 0% 100%;
      transform: scaleY(0.8);
    }
  }
`;

module.exports = Cascader$1;
