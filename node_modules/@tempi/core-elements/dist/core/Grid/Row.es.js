import { jsx } from 'react/jsx-runtime';
import React__default from 'react';
import clsx from 'clsx';
import RowContext from './RowContext.es.js';
import ResponsiveObserve, { responsiveArray } from './util.es.js';
import styled from '@emotion/styled';
import { BREAK_POINTS } from '../../constants/grid.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const Row = React__default.forwardRef(
  (props, ref) => {
    const _a = props, {
      justify,
      align,
      className,
      style,
      children,
      gutter = 0,
      wrap
    } = _a, others = __objRest(_a, [
      "justify",
      "align",
      "className",
      "style",
      "children",
      "gutter",
      "wrap"
    ]);
    const [screens, setScreens] = React__default.useState({
      xs: true,
      sm: true,
      md: true,
      lg: true,
      xl: true,
      xxl: true
    });
    const gutterRef = React__default.useRef(gutter);
    React__default.useEffect(() => {
      const token = ResponsiveObserve.subscribe((screen) => {
        const currentGutter = gutterRef.current || 0;
        if (!Array.isArray(currentGutter) && typeof currentGutter === "object" || Array.isArray(currentGutter) && (typeof currentGutter[0] === "object" || typeof currentGutter[1] === "object")) {
          setScreens(screen);
        }
      });
      return () => ResponsiveObserve.unsubscribe(token);
    }, []);
    const getGutter = () => {
      const results = [0, 0];
      const normalizedGutter = Array.isArray(gutter) ? gutter : [gutter, 0];
      normalizedGutter.forEach((g, index) => {
        if (typeof g === "object") {
          for (let i = 0; i < responsiveArray.length; i++) {
            const breakpoint = responsiveArray[i];
            if (screens[breakpoint] && g[breakpoint] !== void 0) {
              results[index] = g[breakpoint];
              break;
            }
          }
        } else {
          results[index] = g || 0;
        }
      });
      return results;
    };
    const prefixCls = "teko-row";
    const gutters = getGutter();
    const classes = clsx(
      prefixCls,
      {
        [`${prefixCls}-no-wrap`]: wrap === false,
        [`${prefixCls}-${justify}`]: justify,
        [`${prefixCls}-${align}`]: align
      },
      className
    );
    const rowStyle = __spreadValues(__spreadValues(__spreadValues({}, gutters[0] && gutters[0] > 0 ? {
      marginLeft: gutters[0] / -2,
      marginRight: gutters[0] / -2
    } : {}), gutters[1] && gutter[1] > 0 ? {
      rowGap: gutters[1]
    } : {}), style);
    return /* @__PURE__ */ jsx(RowContext.Provider, {
      value: { gutter: gutters, wrap },
      children: /* @__PURE__ */ jsx(StyledRow, __spreadProps(__spreadValues({}, others), {
        className: classes,
        style: rowStyle,
        ref,
        children
      }))
    });
  }
);
Row.displayName = "Row";
const StyledRow = styled.div`
  &.teko-row {
    display: flex;
    flex-flow: row wrap;
  }
  @media (min-width: ${BREAK_POINTS.lg}) {
    &.teko-row {
      justify-content: center;
    }
  }
  &.teko-row:before,
  &.teko-row:after {
    display: flex;
  }

  // No wrap of flex
  &.teko-row-no-wrap {
    flex-wrap: nowrap;
  }

  &.teko-row-start {
    justify-content: flex-start;
  }

  &.teko-row-center {
    justify-content: center;
  }

  &.teko-row-end {
    justify-content: flex-end;
  }

  &.teko-row-space-between {
    justify-content: space-between;
  }

  &.teko-row-space-around {
    justify-content: space-around;
  }

  &.teko-row-top {
    align-items: flex-start;
  }

  &.teko-row-middle {
    align-items: center;
  }

  &.teko-row-bottom {
    align-items: flex-end;
  }
`;

export { Row };
