'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var styled = require('@emotion/styled');
var reactIcons = require('@fluentui/react-icons');
var coreEditor = require('@tempi/core-editor');
var antd = require('antd');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

const AddBlockButton = () => {
  const {
    query: { node },
    hoveredNodes,
    getParent
  } = coreEditor.useEditor((state) => ({
    hoveredNodes: state.events.hovered
  }));
  const { id, isHover, allDescendants } = coreEditor.useNode(({ events, id: id2 }) => ({
    isHover: events.hovered,
    allDescendants: node(id2).descendants(true)
  }));
  const { setShowModalSelectBlock, setInsertIndex, device } = coreEditor.useBuilder();
  const hoveredChilds = allDescendants.some((el) => hoveredNodes.has(el));
  const showBottomIndicator = hoveredChilds || isHover;
  return showBottomIndicator && /* @__PURE__ */ jsxRuntime.jsx(StyledAddBlockButton, {
    type: "primary",
    shape: "round",
    size: device === "desktop" ? "middle" : "small",
    onClick: () => {
      const currentIndex = getParent(id).data.nodes.findIndex(
        (childId) => childId === id
      );
      setInsertIndex(currentIndex + 1);
      setShowModalSelectBlock(true);
    },
    children: device === "desktop" ? i18n.t("common.add_block") : /* @__PURE__ */ jsxRuntime.jsx(reactIcons.AddRegular, {
      fontSize: 14
    })
  });
};
const StyledAddBlockButton = styled__default["default"](antd.Button)`
  padding: 0 2em;
  position: absolute !important;
  bottom: 0px;
  left: 50%;
  transform: translate(-50%, 50%);
  font-size: 0.9em;
  z-index: 1000;
`;

exports.AddBlockButton = AddBlockButton;
