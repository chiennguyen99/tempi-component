'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');

const convertHref = (href, type) => {
  if (type === "email")
    return `mailto:${href}`;
  if (type === "phone")
    return `tel:${href}`;
  if (type === "internal")
    return `/${href}`;
  return href;
};
const LinkV1 = ({
  href,
  target,
  linkType,
  children,
  className,
  sectionMarginTop = 0
}) => {
  const ref = React.useRef();
  if (!href)
    return children;
  const scrollToElement = (elementId) => {
    const isInIframe = ref.current.ownerDocument !== document;
    let innerWindow = window;
    if (isInIframe) {
      const iframeElements = window.document.getElementsByTagName("iframe");
      for (const iframe of iframeElements) {
        if (iframe.contentDocument === ref.current.ownerDocument) {
          innerWindow = iframe.contentWindow;
          break;
        }
      }
    }
    const elements = ref.current.ownerDocument.querySelectorAll(
      `[data-id="${elementId}"]`
    );
    for (const element of elements) {
      if (innerWindow.getComputedStyle(element).display !== "none") {
        const top = element.getBoundingClientRect().top + innerWindow.pageYOffset - sectionMarginTop;
        innerWindow.scrollTo({
          top,
          behavior: "smooth"
        });
      }
    }
  };
  const computedTarget = () => {
    if (target === "_blank")
      return "_blank";
    if (target === "_self")
      return "_top";
  };
  if (linkType === "inPage") {
    return /* @__PURE__ */ jsxRuntime.jsx("div", {
      ref,
      style: { cursor: "pointer" },
      onClick: () => scrollToElement(href),
      children
    });
  }
  return /* @__PURE__ */ jsxRuntime.jsx("a", {
    style: { textDecoration: "none", color: "unset", cursor: "pointer" },
    href: convertHref(href, linkType),
    target: computedTarget(),
    className,
    rel: "noopener noreferrer",
    children
  });
};

exports.LinkV1 = LinkV1;
