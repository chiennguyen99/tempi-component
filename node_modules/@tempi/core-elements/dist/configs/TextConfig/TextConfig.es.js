import { jsx, jsxs } from 'react/jsx-runtime';
import { t } from '../../i18n.es.js';
import { useEditor, useBuilder, useProp, FormItem, SelectConfig, InputNumberConfig, AlignmentConfig } from '@tempi/core-editor';
import { ROOT, UnitEnum } from '@tempi/core-renderer';
import { Collapse, Select } from 'antd';
import get from 'lodash.get';
import { fontFamilyOptions, fontWeightOptions, textTransformOptions, textDecorationOptions, fontStyleOptions, fontVariantOptions } from '../../constants/fonts.es.js';
import { PROP_KEY } from '../../constants/propKey.es.js';
import { ShadowConfig } from '../ShadowConfig/ShadowConfig.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const { Panel } = Collapse;
const TextConfig = ({
  propKey = "",
  config,
  title
}) => {
  var _a, _b;
  const { rootNode } = useEditor((state) => ({
    rootNode: state.nodes[ROOT]
  }));
  const { realDevice } = useBuilder();
  const fontFamilyKey = PROP_KEY.joinKey(propKey, PROP_KEY.FontFamily);
  const [fontFamily, setFontFamily] = useProp(fontFamilyKey);
  return /* @__PURE__ */ jsx(FormItem, {
    layout: "vertical",
    label: !title ? t("Ki\u1EC3u ch\u1EEF") : title,
    children: /* @__PURE__ */ jsxs(Collapse, {
      defaultActiveKey: [],
      children: [
        /* @__PURE__ */ jsxs(Panel, {
          header: t("Ph\xF4ng ch\u1EEF"),
          children: [
            /* @__PURE__ */ jsx(FormItem, {
              label: t("Ph\xF4ng ch\u1EEF"),
              children: /* @__PURE__ */ jsx(Select, __spreadProps(__spreadValues({}, {
                virtual: false,
                style: {
                  width: 140
                },
                showSearch: true,
                placeholder: t("Ph\xF4ng ch\u1EEF"),
                value: fontFamily || get(
                  (_b = (_a = rootNode == null ? void 0 : rootNode.data) == null ? void 0 : _a.props) == null ? void 0 : _b[realDevice],
                  PROP_KEY.joinKey(PROP_KEY.CommonStyle, PROP_KEY.FontFamily)
                ),
                onChange: setFontFamily,
                getPopupContainer: (trigger) => trigger,
                allowClear: true
              }), {
                children: fontFamilyOptions.map((el) => /* @__PURE__ */ jsx(Select.Option, {
                  value: el.value,
                  children: /* @__PURE__ */ jsx("span", {
                    style: { fontFamily: el.value },
                    children: el.label
                  })
                }, el.value))
              }))
            }),
            /* @__PURE__ */ jsx(SelectConfig, {
              propKey: PROP_KEY.joinKey(propKey, PROP_KEY.FontWeight),
              options: fontWeightOptions,
              formItemProps: {
                label: t("\u0110\u1ED9 d\xE0y ph\xF4ng ch\u1EEF")
              },
              selectProps: {
                allowClear: true,
                placeholder: t("M\u1EB7c \u0111\u1ECBnh")
              }
            }),
            (config == null ? void 0 : config.fontSize) && /* @__PURE__ */ jsx(InputNumberConfig, {
              propKey: PROP_KEY.joinKey(propKey, PROP_KEY.FontSize),
              formItemProps: __spreadValues({
                label: t("C\u1EE1 ch\u1EEF")
              }, config.isCountdownTextSetting && {
                tooltip: t(
                  "\u1EDE mobile, c\u1EE1 ch\u1EEF >30px \u0111\u01B0\u1EE3c t\u1EF1 \u0111\u1ED9ng gi\u1EA3m xu\u1ED1ng 30px \u0111\u1EC3 \u0111\u1EA3m b\u1EA3o hi\u1EC3n th\u1ECB"
                )
              }),
              unitProps: { defaultValue: UnitEnum.pixel }
            }),
            /* @__PURE__ */ jsx(InputNumberConfig, {
              propKey: PROP_KEY.joinKey(propKey, PROP_KEY.LineHeight),
              formItemProps: {
                label: t("Kho\u1EA3ng c\xE1ch d\xF2ng")
              },
              unitProps: { defaultValue: UnitEnum.pixel }
            }),
            (config == null ? void 0 : config.textAlign) && /* @__PURE__ */ jsx(AlignmentConfig, {
              propKey: PROP_KEY.joinKey(propKey, PROP_KEY.TextAlign),
              buttonGroupProps: {
                listAlignment: ["left", "center", "right", "justify"]
              },
              formItemProps: {
                label: t("C\u0103n ch\u1EC9nh ch\u1EEF")
              }
            })
          ]
        }, "FONT"),
        /* @__PURE__ */ jsxs(Panel, {
          header: t("Ki\u1EC3u & Kho\u1EA3ng c\xE1ch"),
          children: [
            /* @__PURE__ */ jsx(InputNumberConfig, {
              propKey: PROP_KEY.joinKey(propKey, PROP_KEY.LetterSpacing),
              formItemProps: {
                label: t("Kho\u1EA3ng c\xE1ch")
              },
              unitProps: { defaultValue: UnitEnum.pixel }
            }),
            /* @__PURE__ */ jsx(SelectConfig, {
              propKey: PROP_KEY.joinKey(propKey, PROP_KEY.TextTransform),
              options: textTransformOptions,
              formItemProps: {
                label: t("Thay \u0111\u1ED5i")
              },
              selectProps: {
                allowClear: true,
                placeholder: t("M\u1EB7c \u0111\u1ECBnh")
              }
            }),
            /* @__PURE__ */ jsx(SelectConfig, {
              propKey: PROP_KEY.joinKey(propKey, PROP_KEY.TextDecoration),
              options: textDecorationOptions,
              formItemProps: { label: t("Trang tr\xED") },
              selectProps: {
                allowClear: true,
                placeholder: t("M\u1EB7c \u0111\u1ECBnh")
              }
            }),
            /* @__PURE__ */ jsx(SelectConfig, {
              propKey: PROP_KEY.joinKey(propKey, PROP_KEY.FontStyle),
              options: fontStyleOptions,
              formItemProps: { label: t("Ki\u1EC3u") },
              selectProps: {
                allowClear: true,
                placeholder: t("M\u1EB7c \u0111\u1ECBnh")
              }
            }),
            /* @__PURE__ */ jsx(SelectConfig, {
              propKey: PROP_KEY.joinKey(propKey, PROP_KEY.FontVariant),
              options: fontVariantOptions,
              formItemProps: { label: t("Bi\u1EBFn th\u1EC3") },
              selectProps: {
                allowClear: true,
                placeholder: t("M\u1EB7c \u0111\u1ECBnh")
              }
            })
          ]
        }, "STYLE"),
        (config == null ? void 0 : config.textShadow) && /* @__PURE__ */ jsx(Panel, {
          header: t("\u0110\u1ED5 b\xF3ng ch\u1EEF"),
          children: /* @__PURE__ */ jsx(ShadowConfig, {
            propKey: PROP_KEY.joinKey(propKey, PROP_KEY.TextShadow),
            shadowProps: ["x", "y", "blur"]
          })
        }, "TextShadow")
      ]
    })
  });
};

export { TextConfig };
