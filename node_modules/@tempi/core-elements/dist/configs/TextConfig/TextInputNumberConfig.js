'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var coreEditor = require('@tempi/core-editor');
var React = require('react');

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const TextInputNumberConfig = (_a) => {
  var _b = _a, {
    initValue,
    updateValue,
    inputNumberProps = {}
  } = _b, rest = __objRest(_b, [
    "initValue",
    "updateValue",
    "inputNumberProps"
  ]);
  const [value, setValue] = React.useState(initValue);
  React.useEffect(() => {
    if (value !== initValue)
      setValue(initValue);
  }, [initValue]);
  return /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, __spreadProps(__spreadValues({}, rest), {
    inputNumberProps: __spreadProps(__spreadValues({}, inputNumberProps), {
      value,
      onChange: (val) => setValue(val),
      onBlur: (e) => {
        var _a2;
        (_a2 = inputNumberProps == null ? void 0 : inputNumberProps.onBlur) == null ? void 0 : _a2.call(inputNumberProps, e);
        updateValue(value);
      },
      onPressEnter: (e) => {
        var _a2;
        (_a2 = inputNumberProps == null ? void 0 : inputNumberProps.onPressEnter) == null ? void 0 : _a2.call(inputNumberProps, e);
        updateValue(value);
      }
    })
  }));
};

exports.TextInputNumberConfig = TextInputNumberConfig;
