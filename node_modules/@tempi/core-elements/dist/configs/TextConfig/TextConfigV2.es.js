import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../i18n.es.js';
import { useBuilder, useEditor, SelectConfig, removeUnit } from '@tempi/core-editor';
import { ROOT, UnitEnum, unitParse } from '@tempi/core-renderer';
import { Select } from 'antd';
import get from 'lodash.get';
import { TextInputNumberConfig } from './TextInputNumberConfig.es.js';
import { fontFamilyOptions, fontWeightOptions } from '../../constants/fonts.es.js';
import { PROP_KEY } from '../../constants/propKey.es.js';
import { getEditorAttributeValue } from '../../utils/getEditorAttributeValue.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const TextConfigV2 = ({
  config = {},
  editor
}) => {
  var _a, _b, _c, _d;
  const { heading = false, responsiveFontSize = false } = config;
  const { realDevice } = useBuilder();
  const { rootNode } = useEditor((state) => ({
    rootNode: state.nodes[ROOT]
  }));
  const fontFamilyKey = PROP_KEY.joinKey(
    PROP_KEY.CommonStyle,
    PROP_KEY.FontFamily
  );
  const headingAttributes = editor == null ? void 0 : editor.getAttributes("heading");
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      heading && /* @__PURE__ */ jsx(SelectConfig, {
        formItemProps: { label: t("Ti\xEAu \u0111\u1EC1"), placeholder: t("M\u1EB7c \u0111\u1ECBnh") },
        selectProps: {
          value: headingAttributes == null ? void 0 : headingAttributes.level,
          onChange: (value) => {
            var _a2;
            (_a2 = editor == null ? void 0 : editor.commands) == null ? void 0 : _a2.executeCmd(
              ({ commands }) => commands.setHeading(__spreadProps(__spreadValues({}, headingAttributes), {
                level: value
              })),
              true
            );
          }
        },
        options: [...Array(6).keys()].map((_, index) => ({
          label: t("Ti\xEAu \u0111\u1EC1 {{var0}}", { var0: index + 1 }),
          value: index + 1
        }))
      }),
      /* @__PURE__ */ jsx(SelectConfig, {
        formItemProps: {
          label: t("Ph\xF4ng ch\u1EEF")
        },
        selectProps: {
          showSearch: true,
          dropdownMatchSelectWidth: false,
          placeholder: t("Ph\xF4ng ch\u1EEF"),
          value: getEditorAttributeValue(editor, PROP_KEY.FontFamily) || get((_b = (_a = rootNode == null ? void 0 : rootNode.data) == null ? void 0 : _a.props) == null ? void 0 : _b[realDevice], fontFamilyKey),
          onChange: (value) => {
            var _a2;
            (_a2 = editor == null ? void 0 : editor.commands) == null ? void 0 : _a2.executeCmd(
              ({ commands }) => commands.setFontFamily(value),
              true
            );
          },
          children: (_c = fontFamilyOptions) == null ? void 0 : _c.map((el) => /* @__PURE__ */ jsx(Select.Option, {
            value: el.value,
            children: /* @__PURE__ */ jsx("span", {
              style: { fontFamily: el.value },
              children: el.label
            })
          }, el.value))
        }
      }),
      /* @__PURE__ */ jsx(SelectConfig, {
        options: fontWeightOptions,
        formItemProps: {
          label: t("\u0110\u1ED9 d\xE0y ph\xF4ng ch\u1EEF")
        },
        selectProps: {
          placeholder: t("M\u1EB7c \u0111\u1ECBnh"),
          value: (_d = getEditorAttributeValue(
            editor,
            PROP_KEY.FontWeight
          )) == null ? void 0 : _d.toString(),
          onChange: (value) => {
            var _a2;
            (_a2 = editor == null ? void 0 : editor.commands) == null ? void 0 : _a2.executeCmd(
              ({ commands }) => commands.setFontWeight(value),
              true
            );
          }
        }
      }),
      /* @__PURE__ */ jsx(TextInputNumberConfig, {
        initValue: removeUnit(
          getEditorAttributeValue(
            editor,
            PROP_KEY.FontSize,
            responsiveFontSize ? realDevice : void 0
          )
        ),
        formItemProps: { label: t("C\u1EE1 ch\u1EEF") },
        inputNumberProps: {
          placeholder: t("M\u1EB7c \u0111\u1ECBnh")
        },
        unitProps: { defaultValue: UnitEnum.pixel },
        updateValue: (value) => {
          var _a2;
          (_a2 = editor == null ? void 0 : editor.commands) == null ? void 0 : _a2.executeCmd(
            ({ commands }) => commands.setFontSize(
              unitParse(value),
              responsiveFontSize ? realDevice : void 0
            ),
            true
          );
        }
      }),
      /* @__PURE__ */ jsx(TextInputNumberConfig, {
        initValue: removeUnit(
          getEditorAttributeValue(editor, PROP_KEY.LineHeight)
        ),
        formItemProps: {
          label: t("Kho\u1EA3ng c\xE1ch d\xF2ng")
        },
        inputNumberProps: {
          placeholder: t("M\u1EB7c \u0111\u1ECBnh")
        },
        unitProps: { defaultValue: UnitEnum.pixel },
        updateValue: (value) => {
          var _a2;
          (_a2 = editor == null ? void 0 : editor.commands) == null ? void 0 : _a2.executeCmd(
            ({ commands }) => commands.setLineHeight(unitParse(value)),
            true
          );
        }
      }),
      /* @__PURE__ */ jsx(TextInputNumberConfig, {
        initValue: removeUnit(
          removeUnit(getEditorAttributeValue(editor, PROP_KEY.LetterSpacing))
        ),
        formItemProps: {
          label: t("Kho\u1EA3ng c\xE1ch ch\u1EEF")
        },
        inputNumberProps: {
          placeholder: t("M\u1EB7c \u0111\u1ECBnh")
        },
        unitProps: { defaultValue: UnitEnum.pixel },
        updateValue: (value) => {
          var _a2;
          (_a2 = editor == null ? void 0 : editor.commands) == null ? void 0 : _a2.executeCmd(
            ({ commands }) => commands.setLetterSpacing(unitParse(value)),
            true
          );
        }
      })
    ]
  });
};

export { TextConfigV2 };
