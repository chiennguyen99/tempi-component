import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { t } from '../../i18n.es.js';
import { Form, Space, Card, Button, Radio, Input, Switch, Empty, Row } from 'antd';
import { APIConfig } from './APIConfig.es.js';
import { DeleteRegular } from '@fluentui/react-icons';
import { FormAccountType } from './type.es.js';
import { GoogleSheetConfig } from './GoogleSheetConfig/GoogleSheetConfig.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const optionsConfigType = [
  { label: "Email", value: FormAccountType.EMAIL },
  { label: "Google Sheet", value: FormAccountType.GOOGLE_SHEET },
  { label: "API", value: FormAccountType.API }
];
const configStorageDataValidate = {
  email: [
    {
      type: "email",
      message: t("Vui l\xF2ng nh\u1EADp email h\u1EE3p l\u1EC7")
    },
    {
      required: true,
      message: t("Vui l\xF2ng nh\u1EADp email")
    }
  ],
  api: [
    {
      message: t("Vui l\xF2ng ch\u1EC9nh s\u1EEDa c\u1EA5u h\xECnh API"),
      validator: (_, value) => {
        if (!!(value == null ? void 0 : value.endpoint) && !!(value == null ? void 0 : value.method)) {
          return Promise.resolve();
        } else {
          return Promise.reject(t("Vui l\xF2ng ch\u1EC9nh s\u1EEDa c\u1EA5u h\xECnh API"));
        }
      }
    }
  ]
};
const ConfigStorageData = ({
  form,
  ggSheetsAccounts = [],
  handleFetchFormAccount,
  suggestionAttributes
}) => {
  const removeConfig = (numberConfig, index, cb) => {
    const isRemoveMainConfig = form.getFieldValue([
      "configs",
      index,
      "isMainConfig"
    ]);
    if (numberConfig > 1 && isRemoveMainConfig) {
      form.setFieldValue(
        ["configs", index === 0 ? index + 1 : 0, "isMainConfig"],
        true
      );
    }
    cb(index);
  };
  const setMainConfig = (indexMainConfig, isMainConfig) => {
    if (isMainConfig) {
      const dataConfig = form.getFieldValue("configs");
      dataConfig.forEach((element, index) => {
        if (indexMainConfig != index) {
          form.setFieldValue(["configs", index, "isMainConfig"], false);
        }
      });
      return;
    }
    form.setFieldValue(["configs", indexMainConfig, "isMainConfig"], true);
  };
  const renderFooter = (fields, add) => {
    const btnAddConnection = /* @__PURE__ */ jsxs(Button, {
      onClick: () => add({
        type: "EMAIL",
        isMainConfig: !(fields == null ? void 0 : fields.length)
      }),
      shape: "round",
      type: "primary",
      disabled: (fields == null ? void 0 : fields.length) >= 3,
      children: [
        t("Th\xEAm k\u1EBFt n\u1ED1i ("),
        (fields == null ? void 0 : fields.length) || 0,
        "/3)"
      ]
    });
    return /* @__PURE__ */ jsx(Fragment, {
      children: !(fields == null ? void 0 : fields.length) ? /* @__PURE__ */ jsx(Empty, {
        description: t(
          "Th\xEAm k\u1EBFt n\u1ED1i \u0111\u1EC3 l\u01B0u d\u1EEF li\u1EC7u v\u1EC1 Email, Google Sheet ho\u1EB7c API"
        ),
        image: Empty.PRESENTED_IMAGE_DEFAULT,
        children: btnAddConnection
      }) : /* @__PURE__ */ jsx(Row, {
        justify: "center",
        children: btnAddConnection
      })
    });
  };
  return /* @__PURE__ */ jsx(Form.List, {
    name: "configs",
    children: (fields, { add, remove }) => {
      return /* @__PURE__ */ jsxs(Space, {
        direction: "vertical",
        size: "middle",
        style: { width: "100%" },
        children: [
          fields.map((_a, index) => {
            var _b = _a, { key, name } = _b, restField = __objRest(_b, ["key", "name"]);
            return /* @__PURE__ */ jsxs(Card, {
              title: t("K\u1EBFt n\u1ED1i #{{var0}}", { var0: index + 1 }),
              extra: /* @__PURE__ */ jsx(Button, {
                type: "text",
                icon: /* @__PURE__ */ jsx(DeleteRegular, {
                  style: { cursor: "pointer", fontSize: 16 },
                  onClick: () => {
                    removeConfig(fields.length, index, remove);
                  }
                })
              }),
              headStyle: {
                fontSize: 14
              },
              children: [
                /* @__PURE__ */ jsx(Form.Item, __spreadProps(__spreadValues({
                  labelCol: {
                    span: 8
                  },
                  wrapperCol: {
                    span: 16
                  },
                  name: [index, "type"],
                  rules: [{ required: true }]
                }, restField), {
                  label: t("L\u01B0u d\u1EEF li\u1EC7u v\u1EC1"),
                  children: /* @__PURE__ */ jsx(Radio.Group, {
                    options: optionsConfigType,
                    size: "middle"
                  })
                })),
                /* @__PURE__ */ jsx(Form.Item, {
                  noStyle: true,
                  shouldUpdate: (prevValues, currentValues) => {
                    var _a2, _b2, _c, _d;
                    return ((_b2 = (_a2 = prevValues == null ? void 0 : prevValues.configs) == null ? void 0 : _a2[index]) == null ? void 0 : _b2.type) !== ((_d = (_c = currentValues == null ? void 0 : currentValues.configs) == null ? void 0 : _c[index]) == null ? void 0 : _d.type);
                  },
                  children: ({ getFieldValue }) => {
                    let formItems = null;
                    if (getFieldValue(["configs", index, "type"]) === FormAccountType.EMAIL) {
                      formItems = /* @__PURE__ */ jsx(Form.Item, __spreadProps(__spreadValues({
                        labelCol: {
                          span: 8
                        },
                        wrapperCol: {
                          span: 16
                        },
                        validateFirst: true,
                        rules: configStorageDataValidate.email,
                        name: [index, "email"],
                        label: "Email"
                      }, restField), {
                        children: /* @__PURE__ */ jsx(Input, {
                          placeholder: t("Nh\u1EADp Email"),
                          autoComplete: "off"
                        })
                      }));
                    }
                    if (getFieldValue(["configs", index, "type"]) === FormAccountType.API) {
                      formItems = /* @__PURE__ */ jsx(Form.Item, __spreadProps(__spreadValues({
                        labelCol: {
                          span: 8
                        },
                        wrapperCol: {
                          span: 16
                        },
                        validateFirst: true,
                        rules: configStorageDataValidate.api,
                        name: [index, "apiConfig"],
                        label: t("C\u1EA5u h\xECnh API")
                      }, restField), {
                        children: /* @__PURE__ */ jsx(APIConfig, {
                          attributes: suggestionAttributes
                        })
                      }));
                    }
                    if (getFieldValue(["configs", index, "type"]) === FormAccountType.GOOGLE_SHEET) {
                      formItems = /* @__PURE__ */ jsx(GoogleSheetConfig, {
                        index,
                        ggSheetsAccounts,
                        handleFetchFormAccount,
                        displayUrl: (ggSheetsAccounts == null ? void 0 : ggSheetsAccounts.length) > 1 || !!form.getFieldValue([
                          "configs",
                          index,
                          "formAccountId"
                        ]),
                        form,
                        defaultField: restField
                      });
                    }
                    return formItems;
                  }
                }),
                /* @__PURE__ */ jsx(Form.Item, {
                  labelCol: {
                    span: 8
                  },
                  wrapperCol: {
                    span: 16
                  },
                  valuePropName: "checked",
                  name: [index, "isMainConfig"],
                  label: t("K\u1EBFt n\u1ED1i ch\xEDnh"),
                  style: { flexDirection: "row" },
                  children: /* @__PURE__ */ jsx(Switch, {
                    onChange: (value) => {
                      setMainConfig(index, value);
                    }
                  })
                })
              ]
            }, key);
          }),
          renderFooter(fields, add)
        ]
      });
    }
  });
};

export { ConfigStorageData, configStorageDataValidate };
