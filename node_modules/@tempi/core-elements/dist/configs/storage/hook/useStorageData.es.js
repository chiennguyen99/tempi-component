import { t } from '../../../i18n.es.js';
import { useProp, useBuilder } from '@tempi/core-editor';
import { useState, useMemo } from 'react';
import { FormAccountType, RequestMethod } from '../type.es.js';
import { PROP_KEY } from '../../../constants/propKey.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const useStorageData = ({ form }) => {
  const [configStorageId, setConfigStorageId] = useProp(
    PROP_KEY.joinKey(PROP_KEY.ConfigStorage, PROP_KEY.FormConfigId)
  );
  const [configStorage, setConfigStorage] = useState();
  const { pageId, getAllFormAccounts, upsertForm, getForm } = useBuilder();
  const [ggSheetsAccounts, setGGSheetsAccounts] = useState(
    []
  );
  const [loadingForm, setLoadingForm] = useState(false);
  const allowConfigStorageData = useMemo(() => {
    return !!getAllFormAccounts && !!upsertForm && !!getForm;
  }, [getAllFormAccounts, getForm, upsertForm]);
  const getFormConfigs = async (configStorageId2, cb) => {
    try {
      let formConfig;
      setLoadingForm(true);
      if (!!configStorageId2) {
        formConfig = await (getForm == null ? void 0 : getForm(configStorageId2));
      }
      setConfigStorage(formConfig);
      cb == null ? void 0 : cb(formConfig == null ? void 0 : formConfig.configs);
    } finally {
      setLoadingForm(false);
    }
  };
  const handleFetchFormAccount = async (cb) => {
    const formAccounts = await (getAllFormAccounts == null ? void 0 : getAllFormAccounts());
    const newOpts = (formAccounts || []).filter((el) => el.type === "GOOGLE_SHEET").map((el) => ({
      label: el.name,
      value: el.id
    }));
    if (cb)
      cb(newOpts);
    setGGSheetsAccounts([
      ...newOpts,
      { value: -1, label: t("Th\xEAm m\u1EDBi t\xE0i kho\u1EA3n Google") }
    ]);
  };
  const initStorageData = (configs) => {
    const defaultConfig = [{ type: FormAccountType.EMAIL, isMainConfig: true }];
    const data = configs == null ? void 0 : configs.map((item) => ({
      type: item.type,
      email: item.email,
      apiConfig: {
        endpoint: item.endpoint,
        method: item.method || RequestMethod.POST,
        body: item.body,
        headers: item.headers
      },
      isMainConfig: item.isMainConfig,
      formAccountId: item.formAccountId,
      sheetId: item.sheetId,
      spreadSheetUrl: item.spreadSheetUrl,
      statusGoogleSheetUrl: !!item.sheetId && !!item.spreadSheetUrl ? "valid" : ""
    }));
    form.setFieldsValue({ configs: (data == null ? void 0 : data.length) ? data : defaultConfig });
  };
  const handleSubmitStorageData = async (value) => {
    try {
      setLoadingForm(true);
      const dataConfigSubmit = value.configs.map((item, index) => {
        if (item.type === FormAccountType.API) {
          return __spreadProps(__spreadValues({}, item.apiConfig), {
            isMainConfig: item.isMainConfig,
            type: item.type
          });
        }
        if (item.type === FormAccountType.GOOGLE_SHEET) {
          return __spreadProps(__spreadValues({}, item), {
            sheetId: form.getFieldValue(["configs", index, "sheetId"])
          });
        }
        return item;
      });
      const idUpsert = await (upsertForm == null ? void 0 : upsertForm(__spreadProps(__spreadValues({}, configStorage || {}), {
        configs: dataConfigSubmit,
        pageId,
        id: configStorageId
      })));
      setConfigStorageId(idUpsert);
      getFormConfigs(idUpsert);
    } finally {
      setLoadingForm(false);
    }
  };
  return {
    ggSheetsAccounts,
    loadingForm,
    handleFetchFormAccount,
    initStorageData,
    handleSubmitStorageData,
    getFormConfigs,
    configStorageId,
    allowConfigStorageData
  };
};

export { useStorageData };
