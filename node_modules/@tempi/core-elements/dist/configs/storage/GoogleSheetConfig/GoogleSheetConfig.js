'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../../i18n.js');
var icons = require('@ant-design/icons');
var coreEditor = require('@tempi/core-editor');
var antd = require('antd');
var debounce = require('lodash.debounce');
var GGSheetAccountConfig = require('./GGSheetAccountConfig.js');
var isGoogleSheetUrl = require('../../../utils/isGoogleSheetUrl.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var debounce__default = /*#__PURE__*/_interopDefaultLegacy(debounce);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const GoogleSheetConfig = ({
  index,
  ggSheetsAccounts = [],
  handleFetchFormAccount,
  displayUrl,
  defaultField,
  form
}) => {
  const { authorizeGGSheet } = coreEditor.useBuilder();
  const { token } = antd.theme.useToken();
  const setFieldValueForm = (fieldName, fieldVal) => {
    form.setFieldValue(["configs", index, fieldName], fieldVal);
  };
  const getFieldValueForm = (fieldName) => {
    return form.getFieldValue(["configs", index, fieldName]);
  };
  const checkAuthorization = async (url, ggSheetAccId) => {
    if (!url || !ggSheetAccId || !isGoogleSheetUrl.isGoogleSheetUrl(url)) {
      setFieldValueForm("statusGoogleSheetUrl", "");
      return;
    }
    if (ggSheetAccId > 0) {
      const body = {
        spreadSheetUrl: url,
        formAccountId: ggSheetAccId
      };
      try {
        setFieldValueForm("statusGoogleSheetUrl", "validating");
        const data = await authorizeGGSheet(body);
        if (data.granted) {
          setFieldValueForm("sheetId", data.sheetId);
          setFieldValueForm("statusGoogleSheetUrl", "valid");
        } else {
          setFieldValueForm("statusGoogleSheetUrl", "invalid");
        }
      } catch (err) {
        setFieldValueForm("statusGoogleSheetUrl", "invalid");
      } finally {
        form.validateFields([["configs", index, "spreadSheetUrl"]]);
      }
    }
  };
  const renderSuffix = () => {
    let icon = /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, {});
    switch (getFieldValueForm("statusGoogleSheetUrl")) {
      case "valid":
        icon = /* @__PURE__ */ jsxRuntime.jsx(icons.CheckCircleOutlined, {
          style: { color: "#59C36A", fontSize: 20 }
        });
        break;
      case "validating":
        icon = /* @__PURE__ */ jsxRuntime.jsx(icons.LoadingOutlined, {
          style: {
            animation: "loadingCircle 1s infinite linear",
            color: token.colorPrimary,
            fontSize: 20
          }
        });
        break;
      case "invalid":
        icon = /* @__PURE__ */ jsxRuntime.jsx(icons.ExclamationCircleOutlined, {
          style: { color: "#EE112E", fontSize: 20 }
        });
        break;
    }
    return icon;
  };
  const debounceCheckAuthorization = debounce__default["default"](
    (spreadSheetUrl, formAccountId) => checkAuthorization(spreadSheetUrl, formAccountId),
    300
  );
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(antd.Form.Item, __spreadProps(__spreadValues({
        validateFirst: true,
        labelCol: {
          span: 8
        },
        wrapperCol: {
          span: 16
        },
        rules: [
          {
            required: true,
            message: i18n.t("Vui l\xF2ng ch\u1ECDn t\xE0i kho\u1EA3n li\xEAn k\u1EBFt")
          }
        ],
        name: [index, "formAccountId"],
        label: getFieldValueForm("formAccountId") ? i18n.t("T\xE0i kho\u1EA3n Google") : null
      }, defaultField), {
        children: /* @__PURE__ */ jsxRuntime.jsx(GGSheetAccountConfig.GGSheetAccountConfig, {
          ggSheetsAccounts,
          handleFetchFormAccount,
          onChange: (ggSheetAccId) => checkAuthorization(
            getFieldValueForm("spreadSheetUrl"),
            ggSheetAccId
          )
        })
      })),
      displayUrl && /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, {
        children: /* @__PURE__ */ jsxRuntime.jsx(antd.Form.Item, {
          noStyle: true,
          shouldUpdate: (prev, curr) => {
            var _a, _b, _c, _d;
            return ((_b = (_a = prev == null ? void 0 : prev.configs) == null ? void 0 : _a[index]) == null ? void 0 : _b.statusGoogleSheetUrl) !== ((_d = (_c = curr == null ? void 0 : curr.configs) == null ? void 0 : _c[index]) == null ? void 0 : _d.statusGoogleSheetUrl);
          },
          children: () => {
            return /* @__PURE__ */ jsxRuntime.jsx(antd.Form.Item, __spreadProps(__spreadValues({
              labelCol: {
                span: 8
              },
              wrapperCol: {
                span: 16
              }
            }, defaultField), {
              validateFirst: true,
              rules: [
                {
                  required: true,
                  message: i18n.t("Vui l\xF2ng nh\u1EADp Google Sheet URL")
                },
                {
                  message: i18n.t("Vui l\xF2ng nh\u1EADp \u0111\xFAng Google Sheet URL"),
                  validator: (_, value) => {
                    if (isGoogleSheetUrl.isGoogleSheetUrl(value)) {
                      return Promise.resolve();
                    } else {
                      return Promise.reject(
                        i18n.t("Vui l\xF2ng nh\u1EADp \u0111\xFAng Google Sheet URL")
                      );
                    }
                  }
                },
                {
                  message: i18n.t("Kh\xF4ng th\u1EC3 truy c\u1EADp trang t\xEDnh"),
                  validator: (_, value) => {
                    if (value && getFieldValueForm("statusGoogleSheetUrl") === "invalid") {
                      return Promise.reject(
                        i18n.t("Vui l\xF2ng nh\u1EADp \u0111\xFAng Google Sheet URL")
                      );
                    } else {
                      return Promise.resolve();
                    }
                  }
                }
              ],
              name: [index, "spreadSheetUrl"],
              label: i18n.t("\u0110\u01B0\u1EDDng d\u1EABn"),
              children: /* @__PURE__ */ jsxRuntime.jsx(antd.Input, {
                autoComplete: "off",
                placeholder: i18n.t("Nh\u1EADp \u0111\u01B0\u1EDDng d\u1EABn Google Sheet"),
                readOnly: getFieldValueForm("statusGoogleSheetUrl") === "validating",
                suffix: renderSuffix(),
                onChange: () => {
                  setFieldValueForm("statusGoogleSheetUrl", "");
                  debounceCheckAuthorization(
                    getFieldValueForm("spreadSheetUrl"),
                    getFieldValueForm("formAccountId")
                  );
                }
              })
            }));
          }
        })
      })
    ]
  });
};

exports.GoogleSheetConfig = GoogleSheetConfig;
