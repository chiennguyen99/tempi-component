import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../i18n.es.js';
import styled from '@emotion/styled';
import { AntdCustomIcon } from '@tempi/icons-dev';
import { Typography } from 'antd';
import { useState } from 'react';
import { useFrame } from 'react-frame-component';
import { RequestMethod } from './type.es.js';
import { ModalApiConfig } from '../ApiConfig/ModalApiConfig.es.js';

const APIConfig = ({ value, onChange, attributes }) => {
  const { document: frameDocument } = useFrame();
  const [visible, setVisible] = useState(false);
  const renderTitle = () => {
    return /* @__PURE__ */ jsx(StyledWrapHeaderModal, {
      children: /* @__PURE__ */ jsxs("div", {
        style: {
          display: "flex",
          alignItems: "center"
        },
        children: [
          /* @__PURE__ */ jsx(AntdCustomIcon, {
            name: "ApiCodeColored",
            style: { marginRight: 8, fontSize: 20 }
          }),
          "API"
        ]
      })
    });
  };
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(Typography.Link, {
        onClick: () => setVisible(true),
        children: t("S\u1EEDa c\u1EA5u h\xECnh")
      }),
      /* @__PURE__ */ jsx(ModalApiConfig, {
        getContainer: () => (frameDocument == null ? void 0 : frameDocument.body) || (document == null ? void 0 : document.body),
        title: renderTitle(),
        data: !!value && {
          endpoint: value.endpoint,
          method: value.method || RequestMethod.POST,
          body: value.body,
          headers: value.headers
        },
        onSubmit: async (value2) => onChange(value2),
        isModalOpen: visible,
        closeModal: () => setVisible(false),
        optionMethods: [
          {
            label: "GET",
            value: RequestMethod.GET
          },
          {
            label: "POST",
            value: RequestMethod.POST
          },
          {
            label: "PATCH",
            value: RequestMethod.PATCH
          }
        ],
        attributes
      })
    ]
  });
};
const StyledWrapHeaderModal = styled.div`
  width: 100%;
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
`;

export { APIConfig, StyledWrapHeaderModal };
