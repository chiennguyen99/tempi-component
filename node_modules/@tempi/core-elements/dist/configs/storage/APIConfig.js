'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var styled = require('@emotion/styled');
var iconsDev = require('@tempi/icons-dev');
var antd = require('antd');
var React = require('react');
var reactFrameComponent = require('react-frame-component');
var type = require('./type.js');
var ModalApiConfig = require('../ApiConfig/ModalApiConfig.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

const APIConfig = ({ value, onChange, attributes }) => {
  const { document: frameDocument } = reactFrameComponent.useFrame();
  const [visible, setVisible] = React.useState(false);
  const renderTitle = () => {
    return /* @__PURE__ */ jsxRuntime.jsx(StyledWrapHeaderModal, {
      children: /* @__PURE__ */ jsxRuntime.jsxs("div", {
        style: {
          display: "flex",
          alignItems: "center"
        },
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(iconsDev.AntdCustomIcon, {
            name: "ApiCodeColored",
            style: { marginRight: 8, fontSize: 20 }
          }),
          "API"
        ]
      })
    });
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(antd.Typography.Link, {
        onClick: () => setVisible(true),
        children: i18n.t("S\u1EEDa c\u1EA5u h\xECnh")
      }),
      /* @__PURE__ */ jsxRuntime.jsx(ModalApiConfig.ModalApiConfig, {
        getContainer: () => (frameDocument == null ? void 0 : frameDocument.body) || (document == null ? void 0 : document.body),
        title: renderTitle(),
        data: !!value && {
          endpoint: value.endpoint,
          method: value.method || type.RequestMethod.POST,
          body: value.body,
          headers: value.headers
        },
        onSubmit: async (value2) => onChange(value2),
        isModalOpen: visible,
        closeModal: () => setVisible(false),
        optionMethods: [
          {
            label: "GET",
            value: type.RequestMethod.GET
          },
          {
            label: "POST",
            value: type.RequestMethod.POST
          },
          {
            label: "PATCH",
            value: type.RequestMethod.PATCH
          }
        ],
        attributes
      })
    ]
  });
};
const StyledWrapHeaderModal = styled__default["default"].div`
  width: 100%;
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
`;

exports.APIConfig = APIConfig;
exports.StyledWrapHeaderModal = StyledWrapHeaderModal;
