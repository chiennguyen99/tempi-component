'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var styled = require('@emotion/styled');
var coreEditor = require('@tempi/core-editor');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

const ButtonGroupSwiper = ({
  configValue,
  setConfigValue,
  configuration
}) => {
  const handleClickItem = (value) => {
    if (value !== configValue) {
      setConfigValue(value);
      return;
    }
    setConfigValue(null);
  };
  return /* @__PURE__ */ jsxRuntime.jsx(StyledButtonGroup, {
    children: configuration.map((el, index) => {
      return /* @__PURE__ */ jsxRuntime.jsx(StyledButtonGroupItem, {
        onClick: () => handleClickItem(el.value),
        isActive: configValue === el.value,
        className: `${configValue === el.value ? "is-active" : ""}`,
        children: el.icon
      }, index);
    })
  });
};
const StyledButtonGroup = styled__default["default"](coreEditor.ButtonGroup)`
  justify-content: space-between;
`;
const StyledButtonGroupItem = styled__default["default"](coreEditor.ButtonGroupItem)`
  flex: 1;
`;

exports.ButtonGroupSwiper = ButtonGroupSwiper;
