import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../i18n.es.js';
import { LeftOutlined } from '@ant-design/icons';
import { AntdCustomIcon } from '@tempi/icons-dev';
import { useProp, FormItem, InputNumberConfig, SelectConfig, ColorPickerConfig, SwitchConfig } from '@tempi/core-editor';
import { InputNumber } from 'antd';
import { ButtonGroupSwiper } from './ButtonGroupSwiper.es.js';
import { PROP_KEY } from '../../constants/propKey.es.js';

const rowNumberConfig = [
  {
    icon: /* @__PURE__ */ jsx(AntdCustomIcon, {
      name: "PbSliderOneRowFilled",
      style: { fontSize: 30 }
    }),
    value: 1
  },
  {
    icon: /* @__PURE__ */ jsx(AntdCustomIcon, {
      name: "PbSliderTwoRowFilled",
      style: { fontSize: 30 }
    }),
    value: 2
  },
  {
    icon: /* @__PURE__ */ jsx(AntdCustomIcon, {
      name: "PbSliderThreeRowFilled",
      style: { fontSize: 30 }
    }),
    value: 3
  }
];
const arrowStyleConfig = [
  {
    icon: /* @__PURE__ */ jsx(AntdCustomIcon, {
      name: "PbNavigationCurvedFilled",
      style: { fontSize: 20 }
    }),
    value: 1
  },
  {
    icon: /* @__PURE__ */ jsx(AntdCustomIcon, {
      name: "PbNavigationRoundFilled",
      style: { fontSize: 20 }
    }),
    value: 2
  },
  { icon: /* @__PURE__ */ jsx(LeftOutlined, {
    style: { fontSize: 20 }
  }), value: 3 }
];
const paginationStyleConfig = [
  {
    icon: /* @__PURE__ */ jsx(AntdCustomIcon, {
      name: "PbPaginationDotsFilled",
      style: { fontSize: 48 }
    }),
    value: 1
  },
  {
    icon: /* @__PURE__ */ jsx(AntdCustomIcon, {
      name: "PbPaginationDotLineFilled",
      style: { fontSize: 36 }
    }),
    value: 2
  },
  {
    icon: /* @__PURE__ */ jsx(AntdCustomIcon, {
      name: "PbPaginationDotBigFilled",
      style: { fontSize: 48 }
    }),
    value: 3
  },
  {
    icon: /* @__PURE__ */ jsx(AntdCustomIcon, {
      name: "PbPaginationLineFilled",
      style: { fontSize: 36 }
    }),
    value: 4
  }
];
const SwiperSettingV2 = ({
  propKey
}) => {
  const [slidePerRow, setSlidePerRow] = useProp(
    PROP_KEY.joinKey(propKey, PROP_KEY.GridRows)
  );
  const [arrowStyle, setArrowStyle] = useProp(
    PROP_KEY.joinKey(propKey, PROP_KEY.ArrowStyle)
  );
  const [paginationStyle, setPaginationStyle] = useProp(
    PROP_KEY.joinKey(propKey, PROP_KEY.PaginationStyle)
  );
  const [autoplay] = useProp(PROP_KEY.joinKey(propKey, PROP_KEY.Autoplay));
  const [interval, setInterval] = useProp(
    PROP_KEY.joinKey(propKey, PROP_KEY.Interval)
  );
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(FormItem, {
        label: t("S\u1ED1 h\xE0ng"),
        children: /* @__PURE__ */ jsx(ButtonGroupSwiper, {
          configValue: slidePerRow,
          setConfigValue: setSlidePerRow,
          configuration: rowNumberConfig
        })
      }),
      /* @__PURE__ */ jsx(InputNumberConfig, {
        propKey: PROP_KEY.joinKey(propKey, PROP_KEY.GridCols),
        inputNumberProps: { min: 1 },
        formItemProps: {
          label: t("S\u1ED1 th\xE0nh ph\u1EA7n tr\xEAn 1 h\xE0ng")
        }
      }),
      /* @__PURE__ */ jsx(FormItem, {
        label: t("Ki\u1EC3u m\u0169i t\xEAn"),
        layout: "vertical",
        children: /* @__PURE__ */ jsx(ButtonGroupSwiper, {
          configValue: arrowStyle,
          setConfigValue: setArrowStyle,
          configuration: arrowStyleConfig
        })
      }),
      /* @__PURE__ */ jsx(FormItem, {
        label: t("Ki\u1EC3u ph\xE2n trang"),
        layout: "vertical",
        children: /* @__PURE__ */ jsx(ButtonGroupSwiper, {
          configValue: paginationStyle,
          setConfigValue: setPaginationStyle,
          configuration: paginationStyleConfig
        })
      }),
      /* @__PURE__ */ jsx(SelectConfig, {
        propKey: PROP_KEY.joinKey(propKey, PROP_KEY.PaginationPosition),
        options: [
          { label: t("Ph\xEDa trong"), value: "inside" },
          { label: t("Ph\xEDa ngo\xE0i"), value: "outside" }
        ],
        formItemProps: {
          label: t("V\u1ECB tr\xED ph\xE2n trang")
        }
      }),
      /* @__PURE__ */ jsx(ColorPickerConfig, {
        propKey: PROP_KEY.joinKey(propKey, PROP_KEY.PaginationColor),
        formItemProps: {
          label: t("M\xE0u ph\xE2n trang")
        }
      }),
      /* @__PURE__ */ jsx(SwitchConfig, {
        propKey: "crop",
        formItemProps: {
          label: t("C\u1EAFt \u1EA3nh")
        }
      }),
      /* @__PURE__ */ jsx(SwitchConfig, {
        propKey: PROP_KEY.joinKey(propKey, PROP_KEY.Rewind),
        formItemProps: {
          label: t("L\u1EB7p l\u1EA1i")
        }
      }),
      /* @__PURE__ */ jsx(SwitchConfig, {
        propKey: PROP_KEY.joinKey(propKey, PROP_KEY.Autoplay),
        formItemProps: {
          label: t("T\u1EF1 \u0111\u1ED9ng tr\u01B0\u1EE3t")
        }
      }),
      autoplay && /* @__PURE__ */ jsxs(Fragment, {
        children: [
          /* @__PURE__ */ jsx(SwitchConfig, {
            propKey: PROP_KEY.joinKey(propKey, PROP_KEY.PauseOnHover),
            formItemProps: {
              label: t("D\u1EEBng chu\u1ED9t khi di chu\u1ED9t")
            }
          }),
          /* @__PURE__ */ jsx(FormItem, {
            label: t("T\u1ED1c \u0111\u1ED9 (gi\xE2y)"),
            children: /* @__PURE__ */ jsx(InputNumber, {
              style: { width: 120 },
              value: interval / 1e3,
              onChange: (val) => val && setInterval(Number(val) * 1e3)
            })
          })
        ]
      })
    ]
  });
};

export { SwiperSettingV2 };
