import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t, getOptionsI18n } from '../../i18n.es.js';
import styled from '@emotion/styled';
import { AntdCustomIcon } from '@tempi/icons-dev';
import { useProp, FormItem, SelectConfig, RangeSliderConfig, ColorPickerConfig, SwitchConfig } from '@tempi/core-editor';
import { UnitEnum } from '@tempi/core-renderer';
import { Row, Col, Button } from 'antd';
import { HeightTypeEnum } from '../../types/index.es.js';
import { useState } from 'react';
import { PROP_KEY } from '../../constants/propKey.es.js';

const HEIGHT_TYPE_OPTIONS = [
  {
    label: "common.default",
    value: HeightTypeEnum.default
  },
  { label: "common.custom", value: HeightTypeEnum.fixed },
  { label: "common.full_screen_height", value: HeightTypeEnum.fullHeight }
];
const SwiperSetting = () => {
  const [thumbnail, setThumbnail] = useProp(PROP_KEY.ShowThumbnail);
  const [height, setHeight] = useProp(
    PROP_KEY.joinKey(PROP_KEY.CommonStyle, PROP_KEY.Height)
  );
  const [slidesPerView, setSlidesPerView] = useProp(PROP_KEY.SlidesPerView);
  const getHeightType = () => {
    if (!height)
      return HeightTypeEnum.default;
    if (height === "100vh")
      return HeightTypeEnum.fullHeight;
    return HeightTypeEnum.fixed;
  };
  const onChangeHeightType = (value) => {
    setHeightType(value);
    if (value === HeightTypeEnum.default)
      setHeight(void 0);
    if (value === HeightTypeEnum.fixed)
      setHeight(350);
    if (value === HeightTypeEnum.fullHeight)
      setHeight("100vh");
  };
  const [heightType, setHeightType] = useState(getHeightType());
  const onChangeLayout = (showThumbnail) => {
    if (showThumbnail && slidesPerView) {
      setSlidesPerView(1);
    }
    setThumbnail(showThumbnail);
  };
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(FormItem, {
        label: t("Ki\u1EC3u hi\u1EC3n th\u1ECB"),
        layout: "vertical",
        children: /* @__PURE__ */ jsxs(Row, {
          gutter: 16,
          children: [
            /* @__PURE__ */ jsx(Col, {
              span: 12,
              children: /* @__PURE__ */ jsx(LayoutSelectButton, {
                block: true,
                type: !thumbnail ? "primary" : "default",
                onClick: () => onChangeLayout(false),
                children: /* @__PURE__ */ jsx(AntdCustomIcon, {
                  name: "OneColumnDevFilled",
                  style: { fontSize: 65 }
                })
              })
            }),
            /* @__PURE__ */ jsx(Col, {
              span: 12,
              children: /* @__PURE__ */ jsx(LayoutSelectButton, {
                type: thumbnail ? "primary" : "default",
                onClick: () => onChangeLayout(true),
                block: true,
                children: /* @__PURE__ */ jsx(AntdCustomIcon, {
                  name: "ThumbnailSlideShowOutlined",
                  style: { fontSize: 65 }
                })
              })
            })
          ]
        })
      }),
      /* @__PURE__ */ jsx(SelectConfig, {
        options: getOptionsI18n(t, HEIGHT_TYPE_OPTIONS, "label"),
        formItemProps: {
          label: t("Chi\u1EC1u cao"),
          layout: "vertical"
        },
        selectProps: {
          value: heightType,
          onChange: onChangeHeightType,
          style: { width: "100%" }
        }
      }),
      heightType === HeightTypeEnum.fixed && /* @__PURE__ */ jsx(RangeSliderConfig, {
        sliderProps: { min: 0, max: 1e3 },
        propKey: PROP_KEY.joinKey(PROP_KEY.CommonStyle, PROP_KEY.Height),
        formItemProps: {
          label: t("Chi\u1EC1u cao")
        },
        unitProps: {
          defaultValue: UnitEnum.pixel
        }
      }),
      !thumbnail && /* @__PURE__ */ jsx(RangeSliderConfig, {
        sliderProps: {
          min: 1,
          max: 10,
          defaultValue: 1,
          step: 1
        },
        formItemProps: {
          label: t("S\u1ED1 l\u01B0\u1EE3ng ph\u1EA7n t\u1EED hi\u1EC3n th\u1ECB tr\xEAn m\u1ED9t h\xE0ng")
        },
        propKey: PROP_KEY.SlidesPerView
      }),
      /* @__PURE__ */ jsx(ColorPickerConfig, {
        propKey: PROP_KEY.PaginationColor,
        formItemProps: {
          label: t("selected_slide_button_color")
        },
        gradientPicker: true
      }),
      /* @__PURE__ */ jsx(ColorPickerConfig, {
        propKey: PROP_KEY.PaginationDeactiveColor,
        formItemProps: {
          label: t("M\xE0u n\xFAt tr\u01B0\u1EE3t")
        },
        gradientPicker: true
      }),
      /* @__PURE__ */ jsx(ColorPickerConfig, {
        propKey: PROP_KEY.NavigationColor,
        formItemProps: {
          label: t("M\xE0u m\u0169i t\xEAn \u0111i\u1EC1u h\u01B0\u1EDBng")
        },
        gradientPicker: true
      }),
      /* @__PURE__ */ jsx(SwitchConfig, {
        propKey: PROP_KEY.Autoplay,
        formItemProps: {
          label: t("T\u1EF1 \u0111\u1ED9ng tr\u01B0\u1EE3t")
        }
      }),
      /* @__PURE__ */ jsx(SwitchConfig, {
        propKey: PROP_KEY.Loop,
        formItemProps: {
          label: t("L\u1EB7p l\u1EA1i")
        }
      }),
      /* @__PURE__ */ jsx(SwitchConfig, {
        propKey: PROP_KEY.Crop,
        formItemProps: {
          label: t("T\u1EF1 \u0111\u1ED9ng c\u0103n ch\u1EC9nh \u1EA3nh")
        }
      })
    ]
  });
};
const LayoutSelectButton = styled(Button)(
  ({ type }) => `
  height: unset;
  margin-bottom: 0.5em;
  padding-top: 0.5em;
  padding-bottom: 0.5em;
  ${type === "default" ? "color: #82868B;" : ""}
`
);

export { HEIGHT_TYPE_OPTIONS, SwiperSetting };
