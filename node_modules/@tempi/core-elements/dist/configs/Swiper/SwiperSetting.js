'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var styled = require('@emotion/styled');
var iconsDev = require('@tempi/icons-dev');
var coreEditor = require('@tempi/core-editor');
var coreRenderer = require('@tempi/core-renderer');
var antd = require('antd');
var index = require('../../types/index.js');
var React = require('react');
var propKey = require('../../constants/propKey.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

const HEIGHT_TYPE_OPTIONS = [
  {
    label: "common.default",
    value: index.HeightTypeEnum.default
  },
  { label: "common.custom", value: index.HeightTypeEnum.fixed },
  { label: "common.full_screen_height", value: index.HeightTypeEnum.fullHeight }
];
const SwiperSetting = () => {
  const [thumbnail, setThumbnail] = coreEditor.useProp(propKey.PROP_KEY.ShowThumbnail);
  const [height, setHeight] = coreEditor.useProp(
    propKey.PROP_KEY.joinKey(propKey.PROP_KEY.CommonStyle, propKey.PROP_KEY.Height)
  );
  const [slidesPerView, setSlidesPerView] = coreEditor.useProp(propKey.PROP_KEY.SlidesPerView);
  const getHeightType = () => {
    if (!height)
      return index.HeightTypeEnum.default;
    if (height === "100vh")
      return index.HeightTypeEnum.fullHeight;
    return index.HeightTypeEnum.fixed;
  };
  const onChangeHeightType = (value) => {
    setHeightType(value);
    if (value === index.HeightTypeEnum.default)
      setHeight(void 0);
    if (value === index.HeightTypeEnum.fixed)
      setHeight(350);
    if (value === index.HeightTypeEnum.fullHeight)
      setHeight("100vh");
  };
  const [heightType, setHeightType] = React.useState(getHeightType());
  const onChangeLayout = (showThumbnail) => {
    if (showThumbnail && slidesPerView) {
      setSlidesPerView(1);
    }
    setThumbnail(showThumbnail);
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.FormItem, {
        label: i18n.t("Ki\u1EC3u hi\u1EC3n th\u1ECB"),
        layout: "vertical",
        children: /* @__PURE__ */ jsxRuntime.jsxs(antd.Row, {
          gutter: 16,
          children: [
            /* @__PURE__ */ jsxRuntime.jsx(antd.Col, {
              span: 12,
              children: /* @__PURE__ */ jsxRuntime.jsx(LayoutSelectButton, {
                block: true,
                type: !thumbnail ? "primary" : "default",
                onClick: () => onChangeLayout(false),
                children: /* @__PURE__ */ jsxRuntime.jsx(iconsDev.AntdCustomIcon, {
                  name: "OneColumnDevFilled",
                  style: { fontSize: 65 }
                })
              })
            }),
            /* @__PURE__ */ jsxRuntime.jsx(antd.Col, {
              span: 12,
              children: /* @__PURE__ */ jsxRuntime.jsx(LayoutSelectButton, {
                type: thumbnail ? "primary" : "default",
                onClick: () => onChangeLayout(true),
                block: true,
                children: /* @__PURE__ */ jsxRuntime.jsx(iconsDev.AntdCustomIcon, {
                  name: "ThumbnailSlideShowOutlined",
                  style: { fontSize: 65 }
                })
              })
            })
          ]
        })
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
        options: i18n.getOptionsI18n(i18n.t, HEIGHT_TYPE_OPTIONS, "label"),
        formItemProps: {
          label: i18n.t("Chi\u1EC1u cao"),
          layout: "vertical"
        },
        selectProps: {
          value: heightType,
          onChange: onChangeHeightType,
          style: { width: "100%" }
        }
      }),
      heightType === index.HeightTypeEnum.fixed && /* @__PURE__ */ jsxRuntime.jsx(coreEditor.RangeSliderConfig, {
        sliderProps: { min: 0, max: 1e3 },
        propKey: propKey.PROP_KEY.joinKey(propKey.PROP_KEY.CommonStyle, propKey.PROP_KEY.Height),
        formItemProps: {
          label: i18n.t("Chi\u1EC1u cao")
        },
        unitProps: {
          defaultValue: coreRenderer.UnitEnum.pixel
        }
      }),
      !thumbnail && /* @__PURE__ */ jsxRuntime.jsx(coreEditor.RangeSliderConfig, {
        sliderProps: {
          min: 1,
          max: 10,
          defaultValue: 1,
          step: 1
        },
        formItemProps: {
          label: i18n.t("S\u1ED1 l\u01B0\u1EE3ng ph\u1EA7n t\u1EED hi\u1EC3n th\u1ECB tr\xEAn m\u1ED9t h\xE0ng")
        },
        propKey: propKey.PROP_KEY.SlidesPerView
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ColorPickerConfig, {
        propKey: propKey.PROP_KEY.PaginationColor,
        formItemProps: {
          label: i18n.t("selected_slide_button_color")
        },
        gradientPicker: true
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ColorPickerConfig, {
        propKey: propKey.PROP_KEY.PaginationDeactiveColor,
        formItemProps: {
          label: i18n.t("M\xE0u n\xFAt tr\u01B0\u1EE3t")
        },
        gradientPicker: true
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ColorPickerConfig, {
        propKey: propKey.PROP_KEY.NavigationColor,
        formItemProps: {
          label: i18n.t("M\xE0u m\u0169i t\xEAn \u0111i\u1EC1u h\u01B0\u1EDBng")
        },
        gradientPicker: true
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SwitchConfig, {
        propKey: propKey.PROP_KEY.Autoplay,
        formItemProps: {
          label: i18n.t("T\u1EF1 \u0111\u1ED9ng tr\u01B0\u1EE3t")
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SwitchConfig, {
        propKey: propKey.PROP_KEY.Loop,
        formItemProps: {
          label: i18n.t("L\u1EB7p l\u1EA1i")
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SwitchConfig, {
        propKey: propKey.PROP_KEY.Crop,
        formItemProps: {
          label: i18n.t("T\u1EF1 \u0111\u1ED9ng c\u0103n ch\u1EC9nh \u1EA3nh")
        }
      })
    ]
  });
};
const LayoutSelectButton = styled__default["default"](antd.Button)(
  ({ type }) => `
  height: unset;
  margin-bottom: 0.5em;
  padding-top: 0.5em;
  padding-bottom: 0.5em;
  ${type === "default" ? "color: #82868B;" : ""}
`
);

exports.HEIGHT_TYPE_OPTIONS = HEIGHT_TYPE_OPTIONS;
exports.SwiperSetting = SwiperSetting;
