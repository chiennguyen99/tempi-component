'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var icons = require('@ant-design/icons');
var styled = require('@emotion/styled');
var antd = require('antd');
var React = require('react');
var type = require('../storage/type.js');
var isJsonString = require('../../utils/isJsonString.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const defaultMethod = [
  {
    label: "GET",
    value: type.RequestMethod.GET
  },
  {
    label: "POST",
    value: type.RequestMethod.POST
  },
  {
    label: "PUT",
    value: type.RequestMethod.PUT
  },
  {
    label: "PATCH",
    value: type.RequestMethod.PATCH
  },
  {
    label: "DELETE",
    value: type.RequestMethod.DELETE
  }
];
const ModalApiConfig = ({
  onSubmit,
  isModalOpen,
  title = i18n.t("Li\xEAn k\u1EBFt API"),
  data,
  closeModal,
  closable = true,
  config = {
    testApi: true
  },
  optionMethods = defaultMethod,
  attributes = [],
  getContainer
}) => {
  const [loading, setLoading] = React.useState(false);
  const [testResponse, setTestResponse] = React.useState();
  const [form] = antd.Form.useForm();
  const [bodyType, setBodyType] = React.useState("application/json" /* JSON */);
  const mentionRef = React.useRef(null);
  const defaultValue = {
    endpoint: "",
    method: type.RequestMethod.GET
  };
  const listToObject = (list) => {
    if (!list)
      return;
    const object = {};
    for (let i = 0; i < list.length; i++) {
      if (list[i]) {
        const { key, value } = list[i];
        if (key && value)
          object[key] = value;
      }
    }
    return object;
  };
  const objectToList = (obj) => {
    if (!obj)
      return;
    const list = [];
    Object.keys(obj).forEach((key) => {
      list.push({ key, value: obj[key].toString() });
    });
    return list;
  };
  const formatFormValues = (values) => {
    const request = __spreadValues(__spreadValues({
      endpoint: values.endpoint,
      method: values.method
    }, values.isMainConfig !== void 0 && {
      isMainConfig: values.isMainConfig
    }), values.name !== void 0 && { name: values.name });
    if (values.method !== type.RequestMethod.GET) {
      request.headers = {};
      request.headers["Content-Type"] = bodyType;
    }
    if (values.headers) {
      request.headers = __spreadValues(__spreadValues({}, request.headers), listToObject(values.headers));
    }
    if (values.body) {
      if (bodyType === "application/x-www-form-urlencoded" /* URL_ENCODED */) {
        request.body = listToObject(values.body);
      } else {
        request.body = JSON.parse(values.body);
      }
    }
    return request;
  };
  React.useEffect(() => {
    var _a;
    if (isModalOpen) {
      if (!!data) {
        form.setFieldsValue({
          endpoint: data.endpoint,
          method: data.method,
          headers: objectToList(data.headers),
          body: typeof data.body === "object" ? ((_a = data.headers) == null ? void 0 : _a["content-Type"]) == "application/x-www-form-urlencoded" /* URL_ENCODED */ ? objectToList(data.body) : JSON.stringify(data.body) : data.body,
          isMainConfig: data == null ? void 0 : data.isMainConfig,
          name: data == null ? void 0 : data.name
        });
      } else {
        form.setFieldsValue(defaultValue);
      }
    } else {
      setTestResponse(null);
    }
  }, [isModalOpen]);
  return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: /* @__PURE__ */ jsxRuntime.jsxs(antd.Modal, {
      zIndex: 2001,
      title,
      open: isModalOpen,
      onOk: () => form.submit(),
      okText: i18n.t("L\u01B0u"),
      okButtonProps: { loading, disabled: loading },
      cancelText: i18n.t("common.cancel"),
      onCancel: () => {
        closeModal();
      },
      destroyOnClose: true,
      maskClosable: false,
      closable,
      className: "api-config-modal",
      getContainer,
      children: [
        /* @__PURE__ */ jsxRuntime.jsxs(antd.Form, {
          form,
          onFinish: async (values) => {
            setLoading(true);
            await onSubmit(formatFormValues(values));
            setLoading(false);
            closeModal();
          },
          layout: "vertical",
          children: [
            (config == null ? void 0 : config.name) && /* @__PURE__ */ jsxRuntime.jsx(antd.Form.Item, {
              name: "name",
              label: i18n.t("T\xEAn g\u1EE3i nh\u1EDB"),
              children: /* @__PURE__ */ jsxRuntime.jsx(antd.Input, {
                placeholder: i18n.t("Nh\u1EADp t\xEAn"),
                autoComplete: "off"
              })
            }),
            /* @__PURE__ */ jsxRuntime.jsx(StyledLabel, {
              children: i18n.t("C\u1EA5u h\xECnh API")
            }),
            /* @__PURE__ */ jsxRuntime.jsx(antd.Form.Item, {
              name: "method",
              rules: [
                {
                  required: true,
                  message: i18n.t("Tr\u01B0\u1EDDng n\xE0y l\xE0 b\u1EAFt bu\u1ED9c")
                }
              ],
              children: /* @__PURE__ */ jsxRuntime.jsx(antd.Radio.Group, {
                options: optionMethods
              })
            }),
            /* @__PURE__ */ jsxRuntime.jsx(antd.Form.Item, {
              name: "endpoint",
              rules: [
                {
                  required: true,
                  message: i18n.t("Tr\u01B0\u1EDDng n\xE0y l\xE0 b\u1EAFt bu\u1ED9c")
                }
              ],
              children: /* @__PURE__ */ jsxRuntime.jsx(antd.Input, {
                placeholder: i18n.t("Nh\u1EADp URL")
              })
            }),
            /* @__PURE__ */ jsxRuntime.jsx(StyledLabel, {
              children: "Headers"
            }),
            /* @__PURE__ */ jsxRuntime.jsx(antd.Form.List, {
              name: "headers",
              children: (fields, { add, remove }) => /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
                children: [
                  fields.map((_a) => {
                    var _b = _a, { key, name } = _b, restField = __objRest(_b, ["key", "name"]);
                    return /* @__PURE__ */ jsxRuntime.jsxs(antd.Space, {
                      style: { display: "flex" },
                      align: "baseline",
                      children: [
                        /* @__PURE__ */ jsxRuntime.jsx(antd.Form.Item, __spreadProps(__spreadValues({}, restField), {
                          name: [name, "key"],
                          rules: [
                            { required: true, message: i18n.t("Thi\u1EBFu tr\u01B0\u1EDDng key") }
                          ],
                          children: /* @__PURE__ */ jsxRuntime.jsx(antd.Input, {
                            placeholder: "Key"
                          })
                        })),
                        /* @__PURE__ */ jsxRuntime.jsx(antd.Form.Item, __spreadProps(__spreadValues({}, restField), {
                          name: [name, "value"],
                          rules: [
                            { required: true, message: i18n.t("Thi\u1EBFu tr\u01B0\u1EDDng value") }
                          ],
                          children: /* @__PURE__ */ jsxRuntime.jsx(antd.Input, {
                            placeholder: "Value"
                          })
                        })),
                        /* @__PURE__ */ jsxRuntime.jsx(icons.MinusCircleOutlined, {
                          onClick: () => remove(name),
                          style: {
                            fontSize: "1.2em",
                            cursor: "pointer"
                          }
                        })
                      ]
                    }, key);
                  }),
                  /* @__PURE__ */ jsxRuntime.jsx(antd.Form.Item, {
                    children: /* @__PURE__ */ jsxRuntime.jsx(antd.Button, {
                      type: "dashed",
                      icon: /* @__PURE__ */ jsxRuntime.jsx(icons.PlusOutlined, {}),
                      onClick: () => add(),
                      children: i18n.t("Th\xEAm Header")
                    })
                  })
                ]
              })
            }),
            /* @__PURE__ */ jsxRuntime.jsx(antd.Form.Item, {
              noStyle: true,
              shouldUpdate: (prev, cur) => prev.method !== cur.method || prev.body !== cur.body,
              children: ({ getFieldValue }) => getFieldValue("method") !== type.RequestMethod.GET && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
                children: [
                  /* @__PURE__ */ jsxRuntime.jsx(StyledLabel, {
                    children: "Send"
                  }),
                  /* @__PURE__ */ jsxRuntime.jsxs(StyledTabs, {
                    onChange: (key) => {
                      setBodyType(key);
                      form.resetFields(["body"]);
                    },
                    children: [
                      /* @__PURE__ */ jsxRuntime.jsxs(antd.Tabs.TabPane, {
                        tab: "JSON",
                        children: [
                          /* @__PURE__ */ jsxRuntime.jsx("div", {
                            ref: mentionRef,
                            children: /* @__PURE__ */ jsxRuntime.jsx(antd.Form.Item, {
                              name: "body",
                              rules: [
                                {
                                  validator: (_, value) => {
                                    if (bodyType !== "application/json" /* JSON */) {
                                      return Promise.resolve();
                                    }
                                    if (value && value.length > 0) {
                                      if (isJsonString.isJsonString(value)) {
                                        return Promise.resolve();
                                      } else {
                                        return Promise.reject(
                                          new Error(
                                            i18n.t("Kh\xF4ng \u0111\xFAng \u0111\u1ECBnh d\u1EA1ng JSON!")
                                          )
                                        );
                                      }
                                    } else {
                                      return Promise.resolve();
                                    }
                                  }
                                }
                              ],
                              children: /* @__PURE__ */ jsxRuntime.jsx(StyledMentions, {
                                prefix: ["{{"],
                                onSearch: () => {
                                },
                                rows: 5,
                                onChange: (text) => form.setFieldsValue({ body: text }),
                                getPopupContainer: () => {
                                  var _a;
                                  return (_a = mentionRef == null ? void 0 : mentionRef.current) == null ? void 0 : _a.getElementsByClassName(
                                    "ant-mentions"
                                  )[0];
                                },
                                options: attributes.map((att) => ({
                                  label: att,
                                  value: `${att}}}`
                                }))
                              })
                            })
                          }),
                          /* @__PURE__ */ jsxRuntime.jsxs("div", {
                            style: { color: "#A7ABC3", margin: "5px 0 10px 0" },
                            children: [
                              i18n.t("B\u1EA1n c\xF3 th\u1EC3 th\xEAm tr\u01B0\u1EDDng c\xF3 s\u1EB5n v\u1EDBi"),
                              `{{...}}`
                            ]
                          })
                        ]
                      }, "application/json" /* JSON */),
                      /* @__PURE__ */ jsxRuntime.jsx(antd.Tabs.TabPane, {
                        tab: "URL encoded",
                        children: /* @__PURE__ */ jsxRuntime.jsx(antd.Form.List, {
                          name: "body",
                          children: (fields, { add, remove }) => /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
                            children: [
                              fields.map((_a) => {
                                var _b = _a, { key, name } = _b, restField = __objRest(_b, ["key", "name"]);
                                return /* @__PURE__ */ jsxRuntime.jsxs(antd.Space, {
                                  style: { display: "flex" },
                                  align: "baseline",
                                  children: [
                                    /* @__PURE__ */ jsxRuntime.jsx(antd.Form.Item, __spreadProps(__spreadValues({}, restField), {
                                      name: [name, "key"],
                                      rules: [
                                        {
                                          required: true,
                                          message: i18n.t("Thi\u1EBFu tr\u01B0\u1EDDng title")
                                        }
                                      ],
                                      children: /* @__PURE__ */ jsxRuntime.jsx(antd.Input, {
                                        placeholder: "Title"
                                      })
                                    })),
                                    /* @__PURE__ */ jsxRuntime.jsx(antd.Form.Item, __spreadProps(__spreadValues({}, restField), {
                                      name: [name, "value"],
                                      rules: [
                                        {
                                          required: true,
                                          message: i18n.t("Thi\u1EBFu tr\u01B0\u1EDDng value")
                                        }
                                      ],
                                      children: /* @__PURE__ */ jsxRuntime.jsx(antd.Input, {
                                        placeholder: "Value"
                                      })
                                    })),
                                    /* @__PURE__ */ jsxRuntime.jsx(icons.MinusCircleOutlined, {
                                      onClick: () => remove(name),
                                      style: {
                                        color: "white",
                                        fontSize: "1.2em",
                                        cursor: "pointer"
                                      }
                                    })
                                  ]
                                }, key);
                              }),
                              /* @__PURE__ */ jsxRuntime.jsx(antd.Form.Item, {
                                children: /* @__PURE__ */ jsxRuntime.jsx(antd.Button, {
                                  type: "text",
                                  onClick: () => add(),
                                  icon: /* @__PURE__ */ jsxRuntime.jsx(icons.PlusOutlined, {
                                    style: {
                                      marginRight: "0.2em",
                                      fontSize: "1.2em"
                                    }
                                  }),
                                  children: i18n.t("Th\xEAm tham s\u1ED1")
                                })
                              })
                            ]
                          })
                        })
                      }, "application/x-www-form-urlencoded" /* URL_ENCODED */)
                    ]
                  })
                ]
              })
            }),
            (config == null ? void 0 : config.checkboxMainConfig) && /* @__PURE__ */ jsxRuntime.jsx(antd.Form.Item, {
              valuePropName: "checked",
              name: "isMainConfig",
              children: /* @__PURE__ */ jsxRuntime.jsx(StyledCheckbox, {
                children: i18n.t("\u0110\u1EB7t l\xE0m k\u1EBFt n\u1ED1i ch\xEDnh")
              })
            })
          ]
        }),
        testResponse && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
          children: [
            /* @__PURE__ */ jsxRuntime.jsx(antd.Divider, {}),
            /* @__PURE__ */ jsxRuntime.jsxs("div", {
              style: {
                display: "flex",
                justifyContent: "space-between",
                alignItems: "center",
                color: "white"
              },
              children: [
                /* @__PURE__ */ jsxRuntime.jsx(StyledLabel, {
                  children: "Response"
                }),
                /* @__PURE__ */ jsxRuntime.jsx("span", {
                  children: testResponse == null ? void 0 : testResponse.responseCode
                })
              ]
            }),
            /* @__PURE__ */ jsxRuntime.jsxs(StyledVerticalTabs, {
              tabPosition: "left",
              defaultActiveKey: "response-body",
              children: [
                /* @__PURE__ */ jsxRuntime.jsx(antd.Tabs.TabPane, {
                  tab: "Response headers",
                  children: /* @__PURE__ */ jsxRuntime.jsx(antd.Input.TextArea, {
                    value: JSON.stringify(testResponse == null ? void 0 : testResponse.responseHeaders),
                    rows: 8,
                    disabled: true
                  })
                }, "response-headers"),
                /* @__PURE__ */ jsxRuntime.jsx(antd.Tabs.TabPane, {
                  tab: "Response body",
                  children: /* @__PURE__ */ jsxRuntime.jsx(StyledTextArea, {
                    value: JSON.stringify(testResponse == null ? void 0 : testResponse.response),
                    rows: 8,
                    disabled: true
                  })
                }, "response-body")
              ]
            })
          ]
        })
      ]
    })
  });
};
const StyledTextArea = styled__default["default"](antd.Input.TextArea)`
  cursor: text !important;
`;
const StyledLabel = styled__default["default"].div`
  font-weight: 500;
  margin: 1em 0 0.5em 0;
  font-size: 13px;
`;
const StyledTabs = styled__default["default"](antd.Tabs)`
  .ant-tabs-tab-btn {
    transition: none;
  }
`;
const StyledVerticalTabs = styled__default["default"](antd.Tabs)(
  ({ theme }) => `
  .ant-tabs-tab {
    color: #82869e;
    padding: 0 20px 0 0 !important;
  }
  .ant-tabs-tab-active .ant-tabs-tab-btn {
    color: ${theme.colorPrimary} !important;
  }
`
);
const StyledMentions = styled__default["default"](antd.Mentions)`
  z-index: 9999;
  overflow: visible;
`;
const StyledCheckbox = styled__default["default"](antd.Checkbox)`
  margin-top: 24px;
`;

exports.ModalApiConfig = ModalApiConfig;
