import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../i18n.es.js';
import { useEditor, useProp, SelectConfig, FormItem, InputNumberConfig } from '@tempi/core-editor';
import { UnitEnum, PATTERN_VALIDATION } from '@tempi/core-renderer';
import { Input, Switch } from 'antd';
import { useState, useEffect } from 'react';
import { PROP_KEY } from '../../constants/propKey.es.js';

const LinkConfig = ({ propKey = PROP_KEY.Link }) => {
  const { elementIdOptions } = useEditor((state) => {
    const nodes = state.nodes;
    return {
      elementIdOptions: [
        ...new Set(Object.keys(nodes).map((key) => nodes[key].data.props.id))
      ].filter((option) => option).map((id) => ({ label: id, value: id }))
    };
  });
  const actionTypeOptions = [
    {
      label: t("\u0110\u01B0\u1EDDng d\u1EABn"),
      value: "external"
    },
    {
      label: t("Chuy\u1EC3n Section"),
      value: "inPage"
    },
    {
      label: "Email",
      value: "email"
    },
    {
      label: "Phone",
      value: "phone"
    }
  ];
  const [link, setLink] = useProp(propKey);
  const { href, linkType = "external", target = "_self" } = link || {};
  const [type, setType] = useState(linkType);
  const [warning, setWarning] = useState("");
  useEffect(() => {
    if (type === "inPage") {
      const existedHrefs = elementIdOptions.filter(
        ({ value }) => value === href
      );
      if (!existedHrefs.length) {
        reset(type);
      }
    }
  }, [JSON.stringify(elementIdOptions)]);
  const reset = (type2) => {
    setLink({
      href: "",
      linkType: type2,
      target: "_self"
    });
  };
  const validateLink = (value) => {
    let warning2 = "";
    if (value) {
      if (linkType === "email" && !PATTERN_VALIDATION.email.test(value)) {
        warning2 = t("Nh\u1EADp email \u0111\u1ECBnh d\u1EA1ng abc@gmai.com");
      } else if (linkType === "phone" && !PATTERN_VALIDATION.phone.test(value)) {
        warning2 = t("Nh\u1EADp s\u1ED1 \u0111i\u1EC7n tho\u1EA1i c\xF3 10 ch\u1EEF s\u1ED1");
      }
    }
    setWarning(warning2);
  };
  const onChangeLink = (href2, linkType2, target2) => {
    validateLink(href2);
    setLink({
      href: href2 || "",
      linkType: linkType2,
      target: target2
    });
  };
  const renderInput = () => {
    if (!linkType)
      return null;
    if (linkType === "external")
      return /* @__PURE__ */ jsxs(Fragment, {
        children: [
          /* @__PURE__ */ jsx(FormItem, {
            label: "Url",
            children: /* @__PURE__ */ jsx(Input, {
              value: href,
              placeholder: t("Nh\u1EADp URL"),
              onChange: (e) => onChangeLink(e.target.value, linkType, target),
              style: { width: 140 }
            })
          }),
          /* @__PURE__ */ jsx(FormItem, {
            label: t("M\u1EDF trong th\u1EBB m\u1EDBi"),
            children: /* @__PURE__ */ jsx(Switch, {
              checked: target === "_blank",
              onChange: () => onChangeLink(
                href,
                linkType,
                target === "_blank" ? "_self" : "_blank"
              )
            })
          })
        ]
      });
    if (linkType === "inPage")
      return /* @__PURE__ */ jsxs(Fragment, {
        children: [
          /* @__PURE__ */ jsx(SelectConfig, {
            options: elementIdOptions,
            formItemProps: {
              label: t("Ph\u1EA7n t\u1EED")
            },
            selectProps: {
              placeholder: t("M\u1EB7c \u0111\u1ECBnh"),
              value: href,
              style: { width: 140 },
              onChange: (id) => onChangeLink(id, linkType, target)
            }
          }),
          /* @__PURE__ */ jsx(InputNumberConfig, {
            propKey: PROP_KEY.joinKey(propKey, PROP_KEY.SectionMarginTop),
            formItemProps: { label: "Section margin-top" },
            unitProps: { defaultValue: UnitEnum.pixel }
          })
        ]
      });
    if (linkType === "email")
      return /* @__PURE__ */ jsx(FormItem, {
        label: "Email",
        warning,
        children: /* @__PURE__ */ jsx(Input, {
          value: href,
          placeholder: t("Nh\u1EADp email"),
          onChange: (e) => onChangeLink(e.target.value, linkType, target),
          style: {
            width: 140
          }
        })
      });
    if (linkType === "phone")
      return /* @__PURE__ */ jsx(FormItem, {
        label: t("S\u1ED1 \u0111i\u1EC7n tho\u1EA1i"),
        warning,
        children: /* @__PURE__ */ jsx(Input, {
          value: href,
          placeholder: t("Nh\u1EADp s\u1ED1 \u0111i\u1EC7n tho\u1EA1i"),
          onChange: (e) => onChangeLink(e.target.value, linkType, target),
          style: {
            width: 140
          }
        })
      });
  };
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(SelectConfig, {
        options: actionTypeOptions,
        formItemProps: {
          label: t("S\u1EF1 ki\u1EC7n")
        },
        selectProps: {
          showSearch: true,
          placeholder: t("M\u1EB7c \u0111\u1ECBnh"),
          value: type,
          style: { width: 140 },
          onChange: (value) => {
            setType(value);
            reset(value);
            setWarning("");
          }
        }
      }),
      renderInput()
    ]
  });
};

export { LinkConfig };
