'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var coreEditor = require('@tempi/core-editor');
var coreRenderer = require('@tempi/core-renderer');
var antd = require('antd');
var React = require('react');
var propKey = require('../../constants/propKey.js');

const LinkConfig = ({ propKey: propKey$1 = propKey.PROP_KEY.Link }) => {
  const { elementIdOptions } = coreEditor.useEditor((state) => {
    const nodes = state.nodes;
    return {
      elementIdOptions: [
        ...new Set(Object.keys(nodes).map((key) => nodes[key].data.props.id))
      ].filter((option) => option).map((id) => ({ label: id, value: id }))
    };
  });
  const actionTypeOptions = [
    {
      label: i18n.t("\u0110\u01B0\u1EDDng d\u1EABn"),
      value: "external"
    },
    {
      label: i18n.t("Chuy\u1EC3n Section"),
      value: "inPage"
    },
    {
      label: "Email",
      value: "email"
    },
    {
      label: "Phone",
      value: "phone"
    }
  ];
  const [link, setLink] = coreEditor.useProp(propKey$1);
  const { href, linkType = "external", target = "_self" } = link || {};
  const [type, setType] = React.useState(linkType);
  const [warning, setWarning] = React.useState("");
  React.useEffect(() => {
    if (type === "inPage") {
      const existedHrefs = elementIdOptions.filter(
        ({ value }) => value === href
      );
      if (!existedHrefs.length) {
        reset(type);
      }
    }
  }, [JSON.stringify(elementIdOptions)]);
  const reset = (type2) => {
    setLink({
      href: "",
      linkType: type2,
      target: "_self"
    });
  };
  const validateLink = (value) => {
    let warning2 = "";
    if (value) {
      if (linkType === "email" && !coreRenderer.PATTERN_VALIDATION.email.test(value)) {
        warning2 = i18n.t("Nh\u1EADp email \u0111\u1ECBnh d\u1EA1ng abc@gmai.com");
      } else if (linkType === "phone" && !coreRenderer.PATTERN_VALIDATION.phone.test(value)) {
        warning2 = i18n.t("Nh\u1EADp s\u1ED1 \u0111i\u1EC7n tho\u1EA1i c\xF3 10 ch\u1EEF s\u1ED1");
      }
    }
    setWarning(warning2);
  };
  const onChangeLink = (href2, linkType2, target2) => {
    validateLink(href2);
    setLink({
      href: href2 || "",
      linkType: linkType2,
      target: target2
    });
  };
  const renderInput = () => {
    if (!linkType)
      return null;
    if (linkType === "external")
      return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(coreEditor.FormItem, {
            label: "Url",
            children: /* @__PURE__ */ jsxRuntime.jsx(antd.Input, {
              value: href,
              placeholder: i18n.t("Nh\u1EADp URL"),
              onChange: (e) => onChangeLink(e.target.value, linkType, target),
              style: { width: 140 }
            })
          }),
          /* @__PURE__ */ jsxRuntime.jsx(coreEditor.FormItem, {
            label: i18n.t("M\u1EDF trong th\u1EBB m\u1EDBi"),
            children: /* @__PURE__ */ jsxRuntime.jsx(antd.Switch, {
              checked: target === "_blank",
              onChange: () => onChangeLink(
                href,
                linkType,
                target === "_blank" ? "_self" : "_blank"
              )
            })
          })
        ]
      });
    if (linkType === "inPage")
      return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
            options: elementIdOptions,
            formItemProps: {
              label: i18n.t("Ph\u1EA7n t\u1EED")
            },
            selectProps: {
              placeholder: i18n.t("M\u1EB7c \u0111\u1ECBnh"),
              value: href,
              style: { width: 140 },
              onChange: (id) => onChangeLink(id, linkType, target)
            }
          }),
          /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
            propKey: propKey.PROP_KEY.joinKey(propKey$1, propKey.PROP_KEY.SectionMarginTop),
            formItemProps: { label: "Section margin-top" },
            unitProps: { defaultValue: coreRenderer.UnitEnum.pixel }
          })
        ]
      });
    if (linkType === "email")
      return /* @__PURE__ */ jsxRuntime.jsx(coreEditor.FormItem, {
        label: "Email",
        warning,
        children: /* @__PURE__ */ jsxRuntime.jsx(antd.Input, {
          value: href,
          placeholder: i18n.t("Nh\u1EADp email"),
          onChange: (e) => onChangeLink(e.target.value, linkType, target),
          style: {
            width: 140
          }
        })
      });
    if (linkType === "phone")
      return /* @__PURE__ */ jsxRuntime.jsx(coreEditor.FormItem, {
        label: i18n.t("S\u1ED1 \u0111i\u1EC7n tho\u1EA1i"),
        warning,
        children: /* @__PURE__ */ jsxRuntime.jsx(antd.Input, {
          value: href,
          placeholder: i18n.t("Nh\u1EADp s\u1ED1 \u0111i\u1EC7n tho\u1EA1i"),
          onChange: (e) => onChangeLink(e.target.value, linkType, target),
          style: {
            width: 140
          }
        })
      });
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
        options: actionTypeOptions,
        formItemProps: {
          label: i18n.t("S\u1EF1 ki\u1EC7n")
        },
        selectProps: {
          showSearch: true,
          placeholder: i18n.t("M\u1EB7c \u0111\u1ECBnh"),
          value: type,
          style: { width: 140 },
          onChange: (value) => {
            setType(value);
            reset(value);
            setWarning("");
          }
        }
      }),
      renderInput()
    ]
  });
};

exports.LinkConfig = LinkConfig;
