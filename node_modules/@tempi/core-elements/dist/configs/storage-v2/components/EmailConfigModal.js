'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../../i18n.js');
var antd = require('antd');
var React = require('react');
var reactFrameComponent = require('react-frame-component');
var type = require('../../storage/type.js');
var ConfigStorageData = require('../../storage/ConfigStorageData.js');

const EmailConfigModal = ({
  open,
  onClose,
  handleSaveModal,
  loading,
  data
}) => {
  const { document: frameDocument } = reactFrameComponent.useFrame();
  const [form] = antd.Form.useForm();
  const onSubmit = async (value) => {
    const emailConfig = {
      type: type.FormAccountType.EMAIL,
      email: value == null ? void 0 : value.email
    };
    await handleSaveModal(emailConfig);
    onClose();
  };
  React.useEffect(() => {
    if (open) {
      form.setFieldsValue({ email: data == null ? void 0 : data.email });
    }
  }, [open]);
  return /* @__PURE__ */ jsxRuntime.jsx(antd.Modal, {
    onCancel: onClose,
    open,
    title: i18n.t("L\u01B0u d\u1EEF li\u1EC7u v\u1EC1 Gmail"),
    okText: i18n.t("L\u01B0u"),
    destroyOnClose: true,
    cancelText: i18n.t("common.cancel"),
    getContainer: () => (frameDocument == null ? void 0 : frameDocument.body) || (document == null ? void 0 : document.body),
    onOk: () => form.submit(),
    confirmLoading: loading,
    zIndex: 1081,
    bodyStyle: {
      padding: "1rem 0"
    },
    okButtonProps: {
      htmlType: "submit",
      loading,
      disabled: loading
    },
    children: /* @__PURE__ */ jsxRuntime.jsx(antd.Form, {
      form,
      layout: "vertical",
      onFinish: onSubmit,
      children: /* @__PURE__ */ jsxRuntime.jsx(antd.Form.Item, {
        shouldUpdate: (prevValues, currentValues) => {
          return prevValues !== currentValues;
        },
        validateFirst: true,
        rules: ConfigStorageData.configStorageDataValidate.email,
        name: "email",
        label: "Email",
        children: /* @__PURE__ */ jsxRuntime.jsx(antd.Input, {
          ref: (input) => input && input.focus(),
          autoFocus: true,
          placeholder: i18n.t("Nh\u1EADp Email"),
          autoComplete: "off"
        })
      })
    })
  });
};

exports.EmailConfigModal = EmailConfigModal;
