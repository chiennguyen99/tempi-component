import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { t } from '../../../i18n.es.js';
import { Form, theme, Modal, Input } from 'antd';
import { useEffect } from 'react';
import { useFrame } from 'react-frame-component';
import { FormAccountType } from '../../storage/type.es.js';
import debounce from 'lodash.debounce';
import { LoadingOutlined, ExclamationCircleOutlined, CheckCircleOutlined } from '@ant-design/icons';
import { useBuilder } from '@tempi/core-editor';
import { GGSheetAccountConfig } from '../../storage/GoogleSheetConfig/GGSheetAccountConfig.es.js';
import { isGoogleSheetUrl } from '../../../utils/isGoogleSheetUrl.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const GGSheetConfigModal = ({
  open,
  onClose,
  handleSaveModal,
  loading,
  data,
  ggSheetsAccounts,
  handleFetchFormAccount,
  displayUrl
}) => {
  const { document: frameDocument } = useFrame();
  const [form] = Form.useForm();
  const onSubmit = async (value) => {
    const ggSheetConfig = __spreadProps(__spreadValues({
      type: FormAccountType.GOOGLE_SHEET
    }, value), {
      sheetId: form.getFieldValue("sheetId"),
      statusGoogleSheetUrl: form.getFieldValue("statusGoogleSheetUrl")
    });
    await handleSaveModal(ggSheetConfig);
    onClose();
  };
  const { authorizeGGSheet } = useBuilder();
  const { token } = theme.useToken();
  const setFieldValueForm = (fieldName, fieldVal) => {
    form.setFieldValue([fieldName], fieldVal);
  };
  const getFieldValueForm = (fieldName) => {
    return form.getFieldValue([fieldName]);
  };
  const checkAuthorization = async (url, ggSheetAccId) => {
    if (!url || !ggSheetAccId || !isGoogleSheetUrl(url)) {
      setFieldValueForm("statusGoogleSheetUrl", "");
      return;
    }
    if (ggSheetAccId > 0) {
      setFieldValueForm("formAccountId", ggSheetAccId);
      const body = {
        spreadSheetUrl: url,
        formAccountId: ggSheetAccId
      };
      try {
        setFieldValueForm("statusGoogleSheetUrl", "validating");
        const data2 = await authorizeGGSheet(body);
        if (data2 == null ? void 0 : data2.granted) {
          setFieldValueForm("sheetId", data2 == null ? void 0 : data2.sheetId);
          setFieldValueForm("statusGoogleSheetUrl", "valid");
        } else {
          setFieldValueForm("statusGoogleSheetUrl", "invalid");
        }
      } catch (err) {
        setFieldValueForm("statusGoogleSheetUrl", "invalid");
      } finally {
        form.validateFields(["spreadSheetUrl"]);
      }
    }
  };
  const renderSuffix = () => {
    let icon = /* @__PURE__ */ jsx(Fragment, {});
    switch (getFieldValueForm("statusGoogleSheetUrl")) {
      case "valid":
        icon = /* @__PURE__ */ jsx(CheckCircleOutlined, {
          style: { color: "#59C36A", fontSize: 20 }
        });
        break;
      case "validating":
        icon = /* @__PURE__ */ jsx(LoadingOutlined, {
          style: {
            animation: "loadingCircle 1s infinite linear",
            color: token.colorPrimary,
            fontSize: 20
          }
        });
        break;
      case "invalid":
        icon = /* @__PURE__ */ jsx(ExclamationCircleOutlined, {
          style: { color: "#EE112E", fontSize: 20 }
        });
        break;
    }
    return icon;
  };
  const debounceCheckAuthorization = debounce(
    (spreadSheetUrl, formAccountId) => checkAuthorization(spreadSheetUrl, formAccountId),
    300
  );
  const isLoading = () => loading || getFieldValueForm("statusGoogleSheetUrl") === "validating";
  useEffect(() => {
    if (open) {
      form.setFieldsValue({
        formAccountId: data == null ? void 0 : data.formAccountId,
        sheetId: data == null ? void 0 : data.sheetId,
        spreadSheetUrl: data == null ? void 0 : data.spreadSheetUrl,
        statusGoogleSheetUrl: !!(data == null ? void 0 : data.sheetId) && !!(data == null ? void 0 : data.spreadSheetUrl) ? "valid" : ""
      });
    } else {
      form.resetFields([
        "formAccountId",
        "sheetId",
        "spreadSheetUrl",
        "statusGoogleSheetUrl"
      ]);
    }
  }, [open]);
  return /* @__PURE__ */ jsx(Modal, {
    onCancel: onClose,
    open,
    title: t("L\u01B0u d\u1EEF li\u1EC7u v\u1EC1 Google Sheet"),
    okText: t("L\u01B0u"),
    destroyOnClose: true,
    cancelText: t("common.cancel"),
    getContainer: () => (frameDocument == null ? void 0 : frameDocument.body) || (document == null ? void 0 : document.body),
    onOk: () => form.submit(),
    confirmLoading: loading,
    zIndex: 1081,
    bodyStyle: {
      padding: "1rem 0"
    },
    okButtonProps: {
      htmlType: "submit",
      loading: isLoading(),
      disabled: isLoading()
    },
    children: /* @__PURE__ */ jsxs(Form, {
      form,
      layout: "vertical",
      onFinish: onSubmit,
      children: [
        /* @__PURE__ */ jsx(Form.Item, {
          validateFirst: true,
          rules: [
            {
              required: true,
              message: t("Vui l\xF2ng ch\u1ECDn t\xE0i kho\u1EA3n li\xEAn k\u1EBFt")
            }
          ],
          name: "formAccountId",
          label: (ggSheetsAccounts == null ? void 0 : ggSheetsAccounts.length) > 1 || !!form.getFieldValue("formAccountId") ? t("T\xE0i kho\u1EA3n Google") : null,
          children: /* @__PURE__ */ jsx(GGSheetAccountConfig, {
            ggSheetsAccounts,
            handleFetchFormAccount,
            onChange: (ggSheetAccId) => checkAuthorization(
              getFieldValueForm("spreadSheetUrl"),
              ggSheetAccId
            )
          })
        }),
        displayUrl && /* @__PURE__ */ jsx(Fragment, {
          children: /* @__PURE__ */ jsx(Form.Item, {
            noStyle: true,
            shouldUpdate: (prev, curr) => {
              return (prev == null ? void 0 : prev.statusGoogleSheetUrl) !== (curr == null ? void 0 : curr.statusGoogleSheetUrl);
            },
            children: () => {
              return /* @__PURE__ */ jsx(Form.Item, {
                validateFirst: true,
                rules: [
                  {
                    required: true,
                    message: t("Vui l\xF2ng nh\u1EADp Google Sheet URL")
                  },
                  {
                    message: t("Vui l\xF2ng nh\u1EADp \u0111\xFAng Google Sheet URL"),
                    validator: (_, value) => {
                      if (isGoogleSheetUrl(value)) {
                        return Promise.resolve();
                      } else {
                        return Promise.reject(
                          t("Vui l\xF2ng nh\u1EADp \u0111\xFAng Google Sheet URL")
                        );
                      }
                    }
                  },
                  {
                    message: t("Kh\xF4ng th\u1EC3 truy c\u1EADp trang t\xEDnh"),
                    validator: (_, value) => {
                      if (value && getFieldValueForm("statusGoogleSheetUrl") === "invalid") {
                        return Promise.reject(
                          t("Vui l\xF2ng nh\u1EADp \u0111\xFAng Google Sheet URL")
                        );
                      } else {
                        return Promise.resolve();
                      }
                    }
                  }
                ],
                name: "spreadSheetUrl",
                label: t("\u0110\u01B0\u1EDDng d\u1EABn"),
                children: /* @__PURE__ */ jsx(Input, {
                  autoComplete: "off",
                  placeholder: t("Nh\u1EADp \u0111\u01B0\u1EDDng d\u1EABn Google Sheet"),
                  readOnly: getFieldValueForm("statusGoogleSheetUrl") === "validating",
                  suffix: renderSuffix(),
                  onChange: () => {
                    setFieldValueForm("statusGoogleSheetUrl", "");
                    debounceCheckAuthorization(
                      getFieldValueForm("spreadSheetUrl"),
                      getFieldValueForm("formAccountId")
                    );
                  }
                })
              });
            }
          })
        })
      ]
    })
  });
};

export { GGSheetConfigModal };
