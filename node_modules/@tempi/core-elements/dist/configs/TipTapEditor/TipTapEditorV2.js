'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var coreEditor = require('@tempi/core-editor');
var React = require('react');
var hooks = require('./hooks.js');
var transformNestedContent = require('../../utils/transformNestedContent.js');
var EditorContent = require('./components/EditorContent.js');
var customKit = require('./utils/custom-kit.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const TipTapEditorV2 = (_a) => {
  var _b = _a, {
    propKey,
    quickSetting,
    editorQuickSetting,
    track
  } = _b, rest = __objRest(_b, [
    "propKey",
    "quickSetting",
    "editorQuickSetting",
    "track"
  ]);
  const { isActive } = coreEditor.useNode((node) => ({
    isActive: node.events.selected
  }));
  const { selectedNodes } = coreEditor.useEditor((state) => ({
    selectedNodes: state.events.selected
  }));
  const { editor, isEditable, setIsEditable } = hooks.useCustomTiptap(
    {
      editorOptions: {
        extensions: [customKit.CustomKit]
      }
    },
    propKey
  );
  React.useEffect(() => {
    if (isActive && selectedNodes.size === 1 && !!track) {
      track();
    }
  }, [isActive, selectedNodes.size]);
  const isSeparateEditMode = !!editorQuickSetting;
  const isVisible = isActive && selectedNodes.size === 1;
  return /* @__PURE__ */ jsxRuntime.jsx(coreEditor.RenderQuickSetting, {
    open: isVisible && (!isSeparateEditMode || !isEditable),
    content: React__default["default"].createElement(quickSetting, {
      editor,
      setIsEditable
    }),
    children: /* @__PURE__ */ jsxRuntime.jsx(coreEditor.RenderQuickSetting, {
      open: isVisible && isSeparateEditMode && isEditable,
      content: React__default["default"].createElement(editorQuickSetting, {
        editor
      }),
      children: /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ContextMenu, {
        transformNestedContent: transformNestedContent.transformNestedContent,
        children: /* @__PURE__ */ jsxRuntime.jsx(EditorContent.EditorContent, __spreadValues({
          editor,
          isSeparateEditMode,
          isEditable,
          setIsEditable
        }, rest))
      })
    })
  });
};

exports.TipTapEditorV2 = TipTapEditorV2;
