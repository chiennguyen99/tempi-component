import { jsx } from 'react/jsx-runtime';
import { useNode, useEditor, RenderQuickSetting, ContextMenu } from '@tempi/core-editor';
import React__default, { useEffect } from 'react';
import { useCustomTiptap } from './hooks.es.js';
import { transformNestedContent } from '../../utils/transformNestedContent.es.js';
import { EditorContent } from './components/EditorContent.es.js';
import { CustomKit } from './utils/custom-kit.es.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const TipTapEditorV2 = (_a) => {
  var _b = _a, {
    propKey,
    quickSetting,
    editorQuickSetting,
    track
  } = _b, rest = __objRest(_b, [
    "propKey",
    "quickSetting",
    "editorQuickSetting",
    "track"
  ]);
  const { isActive } = useNode((node) => ({
    isActive: node.events.selected
  }));
  const { selectedNodes } = useEditor((state) => ({
    selectedNodes: state.events.selected
  }));
  const { editor, isEditable, setIsEditable } = useCustomTiptap(
    {
      editorOptions: {
        extensions: [CustomKit]
      }
    },
    propKey
  );
  useEffect(() => {
    if (isActive && selectedNodes.size === 1 && !!track) {
      track();
    }
  }, [isActive, selectedNodes.size]);
  const isSeparateEditMode = !!editorQuickSetting;
  const isVisible = isActive && selectedNodes.size === 1;
  return /* @__PURE__ */ jsx(RenderQuickSetting, {
    open: isVisible && (!isSeparateEditMode || !isEditable),
    content: React__default.createElement(quickSetting, {
      editor,
      setIsEditable
    }),
    children: /* @__PURE__ */ jsx(RenderQuickSetting, {
      open: isVisible && isSeparateEditMode && isEditable,
      content: React__default.createElement(editorQuickSetting, {
        editor
      }),
      children: /* @__PURE__ */ jsx(ContextMenu, {
        transformNestedContent,
        children: /* @__PURE__ */ jsx(EditorContent, __spreadValues({
          editor,
          isSeparateEditMode,
          isEditable,
          setIsEditable
        }, rest))
      })
    })
  });
};

export { TipTapEditorV2 };
