'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@tiptap/core');
var constants = require('../constants.js');
var common = require('./common.js');
var fonts = require('../../../constants/fonts.js');
var updateTextAttribute = require('../../../utils/updateTextAttribute.js');

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const FontSize = core.Extension.create({
  name: "fontSize",
  addOptions() {
    return {
      types: [
        constants.NODE_TYPES.orderedList,
        constants.NODE_TYPES.bulletList,
        constants.NODE_TYPES.listItem,
        constants.NODE_TYPES.heading,
        constants.NODE_TYPES.paragraph,
        constants.NODE_TYPES.textStyle
      ]
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          fontSize: {
            default: null,
            parseHTML: (element) => element.style.fontSize || null,
            renderHTML: (attributes) => {
              if (attributes.fontSize !== null) {
                return {
                  style: `font-size: ${attributes.fontSize}`
                };
              }
            }
          },
          fontSizeDesktop: {
            default: null,
            parseHTML: (element) => {
              const fontSize = common.getVarFromStyle(element, fonts.TEXT_STYLE_KEY.fontSize, "desktop") || element.style.fontSize;
              return fontSize || null;
            },
            renderHTML: (attributes) => {
              return common.renderResponsiveAttr(
                attributes,
                fonts.TEXT_STYLE_KEY.fontSize,
                "desktop"
              );
            }
          },
          fontSizeMobile: {
            default: null,
            parseHTML: (element) => {
              const fontSize = common.getVarFromStyle(element, fonts.TEXT_STYLE_KEY.fontSize, "mobile") || element.style.fontSize;
              return fontSize || null;
            },
            renderHTML: (attributes) => {
              return common.renderResponsiveAttr(
                attributes,
                fonts.TEXT_STYLE_KEY.fontSize,
                "mobile"
              );
            }
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setFontSize: (fontSize, device) => (commandProps) => {
        let attributes = {
          fontSize
        };
        if (device) {
          attributes = __spreadValues({
            fontSize: null
          }, device === "mobile" ? { fontSizeMobile: fontSize } : { fontSizeDesktop: fontSize });
        }
        return updateTextAttribute.updateTextAttribute(
          commandProps,
          this.options.types,
          attributes
        );
      }
    };
  }
});

exports.FontSize = FontSize;
