import { Extension } from '@tiptap/core';
import { APPLY_TO_NODE_BLOCK } from '../constants.es.js';

const CustomCommands = Extension.create({
  name: "customCommands",
  addCommands() {
    return {
      executeCmd: (cmdCallback, forceSelectAll) => ({ chain }) => {
        return chain().focus().command((cmdProps) => {
          const {
            tr,
            commands,
            state: { selection, doc }
          } = cmdProps;
          const { empty, from, $from, to, $to, anchor } = selection;
          const isAutoSelect = forceSelectAll || empty;
          let isApplyToNodeBlock = true;
          if (isAutoSelect) {
            if (forceSelectAll) {
              commands.selectAll();
            } else {
              commands.selectParentNode();
            }
          } else {
            const selectionContent = doc.textBetween(from, to);
            const parentContent = $from.sameParent($to) ? $from.parent.textContent : doc.textContent;
            isApplyToNodeBlock = selectionContent === parentContent;
          }
          tr.setMeta(APPLY_TO_NODE_BLOCK, isApplyToNodeBlock);
          cmdCallback(cmdProps);
          if (isAutoSelect) {
            commands.setTextSelection(anchor);
          }
          return true;
        }).removeEmptyTextStyle().run();
      }
    };
  }
});

export { CustomCommands };
