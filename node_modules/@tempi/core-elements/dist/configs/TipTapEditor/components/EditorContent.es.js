import { jsx } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { EditorContent as EditorContent$1 } from '@tiptap/react';
import React__default, { useEffect } from 'react';
import { useNode } from '@tempi/core-editor';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const EditorContent = React__default.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      children,
      className,
      isSeparateEditMode,
      isEditable,
      setIsEditable,
      editor
    } = _b, rest = __objRest(_b, [
      "children",
      "className",
      "isSeparateEditMode",
      "isEditable",
      "setIsEditable",
      "editor"
    ]);
    const editorContent = /* @__PURE__ */ jsx(StyledBaseEditorContent, {
      editor
    });
    const { dom } = useNode((node) => ({ dom: node.dom }));
    useEffect(() => {
      if (dom && isEditable !== void 0) {
        dom.setAttribute("draggable", isEditable ? "false" : "true");
      }
    }, [isEditable]);
    const onEnableEditorMode = () => {
      setIsEditable(true);
    };
    return /* @__PURE__ */ jsx("div", __spreadProps(__spreadValues(__spreadValues({
      ref,
      onDrag: () => setIsEditable(false)
    }, isSeparateEditMode ? {
      onDoubleClick: onEnableEditorMode
    } : { onMouseUp: onEnableEditorMode }), rest), {
      children: children ? React__default.cloneElement(children, { className }, editorContent) : editorContent
    }));
  }
);
const StyledBaseEditorContent = styled(EditorContent$1)`
  min-width: 8px;
  max-width: 100%;

  .ProseMirror[contenteditable='true'] {
    cursor: text !important;
  }

  a {
    pointer-events: none;
  }
`;

export { EditorContent };
