import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../i18n.es.js';
import styled from '@emotion/styled';
import { Icon } from '@tempi/icons';
import { useProp, ColorPickerConfig, InputNumberConfig } from '@tempi/core-editor';
import { UnitEnum } from '@tempi/core-renderer';
import { Popover, Typography } from 'antd';
import React__default, { useState } from 'react';
import { PROP_KEY } from '../../constants/propKey.es.js';
import { getPropsIcon } from '../../utils/getPropsIcon.es.js';
import { IconPopup } from '../../core/IconPopup/IconPopup.es.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const IconSettings = ({
  propKey,
  separateDevice
}) => {
  const [showIconPopup, setShowIconPopup] = useState(false);
  const toggleIconPopup = () => setShowIconPopup(!showIconPopup);
  const [iconName, setIconName] = useProp(
    PROP_KEY.joinKey(propKey, PROP_KEY.Name)
  );
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsxs(IconWrapper, {
        children: [
          /* @__PURE__ */ jsx(StyledIcon, {
            onClick: toggleIconPopup,
            children: React__default.createElement(Icon, __spreadValues({
              name: iconName || "PlusRetangleOutlined"
            }, getPropsIcon({
              size: 24
            })))
          }),
          /* @__PURE__ */ jsx(Popover, {
            zIndex: 1066,
            open: showIconPopup,
            content: /* @__PURE__ */ jsx("div", {
              style: { width: 400 },
              children: /* @__PURE__ */ jsx(IconPopup, {
                onClose: toggleIconPopup,
                iconName,
                onSelectIcon: (name) => {
                  setIconName(name);
                  setShowIconPopup(false);
                }
              })
            }),
            children: /* @__PURE__ */ jsx(StyledLinkText, {
              onClick: toggleIconPopup,
              children: t("Ch\u1ECDn bi\u1EC3u t\u01B0\u1EE3ng")
            })
          })
        ]
      }),
      /* @__PURE__ */ jsx(ColorPickerConfig, {
        propKey: PROP_KEY.joinKey(propKey, PROP_KEY.Color),
        placeholder: t("Ch\u1ECDn m\xE0u"),
        formItemProps: {
          label: t("M\xE0u Icon")
        },
        separateDevice
      }),
      /* @__PURE__ */ jsx(InputNumberConfig, {
        propKey: PROP_KEY.joinKey(propKey, PROP_KEY.Size),
        formItemProps: {
          label: t("K\xEDch th\u01B0\u1EDBc")
        },
        unitProps: { defaultValue: UnitEnum.pixel },
        separateDevice
      })
    ]
  });
};
const StyledIcon = styled.div`
  margin-right: 8px;
  cursor: pointer;
`;
const IconWrapper = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 8px;
`;
const StyledLinkText = styled(Typography.Link)`
  color: var(--text-color) !important;
`;

export { IconSettings };
