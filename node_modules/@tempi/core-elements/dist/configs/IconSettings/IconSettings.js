'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var styled = require('@emotion/styled');
var icons = require('@tempi/icons');
var coreEditor = require('@tempi/core-editor');
var coreRenderer = require('@tempi/core-renderer');
var antd = require('antd');
var React = require('react');
var propKey = require('../../constants/propKey.js');
var getPropsIcon = require('../../utils/getPropsIcon.js');
var IconPopup = require('../../core/IconPopup/IconPopup.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const IconSettings = ({
  propKey: propKey$1,
  separateDevice
}) => {
  const [showIconPopup, setShowIconPopup] = React.useState(false);
  const toggleIconPopup = () => setShowIconPopup(!showIconPopup);
  const [iconName, setIconName] = coreEditor.useProp(
    propKey.PROP_KEY.joinKey(propKey$1, propKey.PROP_KEY.Name)
  );
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsxs(IconWrapper, {
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(StyledIcon, {
            onClick: toggleIconPopup,
            children: React__default["default"].createElement(icons.Icon, __spreadValues({
              name: iconName || "PlusRetangleOutlined"
            }, getPropsIcon.getPropsIcon({
              size: 24
            })))
          }),
          /* @__PURE__ */ jsxRuntime.jsx(antd.Popover, {
            zIndex: 1066,
            open: showIconPopup,
            content: /* @__PURE__ */ jsxRuntime.jsx("div", {
              style: { width: 400 },
              children: /* @__PURE__ */ jsxRuntime.jsx(IconPopup.IconPopup, {
                onClose: toggleIconPopup,
                iconName,
                onSelectIcon: (name) => {
                  setIconName(name);
                  setShowIconPopup(false);
                }
              })
            }),
            children: /* @__PURE__ */ jsxRuntime.jsx(StyledLinkText, {
              onClick: toggleIconPopup,
              children: i18n.t("Ch\u1ECDn bi\u1EC3u t\u01B0\u1EE3ng")
            })
          })
        ]
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ColorPickerConfig, {
        propKey: propKey.PROP_KEY.joinKey(propKey$1, propKey.PROP_KEY.Color),
        placeholder: i18n.t("Ch\u1ECDn m\xE0u"),
        formItemProps: {
          label: i18n.t("M\xE0u Icon")
        },
        separateDevice
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
        propKey: propKey.PROP_KEY.joinKey(propKey$1, propKey.PROP_KEY.Size),
        formItemProps: {
          label: i18n.t("K\xEDch th\u01B0\u1EDBc")
        },
        unitProps: { defaultValue: coreRenderer.UnitEnum.pixel },
        separateDevice
      })
    ]
  });
};
const StyledIcon = styled__default["default"].div`
  margin-right: 8px;
  cursor: pointer;
`;
const IconWrapper = styled__default["default"].div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 8px;
`;
const StyledLinkText = styled__default["default"](antd.Typography.Link)`
  color: var(--text-color) !important;
`;

exports.IconSettings = IconSettings;
