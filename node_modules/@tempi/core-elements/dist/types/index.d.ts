import { WebsiteMenu } from '@tempi/core-renderer';
import React from 'react';
import { AccordionContentInterface, AccordionInterface, AccordionItemInterface, BoxInterface, ButtonV2Interface, ColInterface, DividerInterface, FormV4Interface, GalleryInterface, HeaderInterface, HeadingInterface, IconInterface, ImageInterface, InputInterface, ListItemContentV2Interface, ListItemIconV2Interface, ListItemV2Interface, MapInterface, MenuColInterface, MenuItemInterface, NumberCounterInterface, PageFlipInterface, ParagraphInterface, PopupV1Interface, ProductListV1Interface, RootInterface, Section, SliderInterface, SpacerInterface, TabInterface, TestimonialCarouselInterface, YoutubeInterface, GlobalBlockInterface, LuckyDrawServiceInterface, PopupRootProps, ProductListInterface as TempiProductListInterface, QRCodeInterface, VideoInterface, ArticleServiceInterface } from '../components';
import { APIConfigData, FormConfig, TestApiDataInterface } from '../configs';
export declare enum WidthTypeEnum {
    auto = "auto",
    full = "full",
    fixed = "fixed"
}
export declare enum HeightTypeEnum {
    default = "default",
    fixed = "fixed",
    fullHeight = "fullHeight"
}
export declare enum Position {
    front = "front",
    behind = "behind"
}
export type Breakpoint = 'xxl' | 'xl' | 'lg' | 'md' | 'sm' | 'xs';
export type Gutter = number | Partial<Record<Breakpoint, number>>;
export interface FormAccount {
    id: number;
    name: string;
    type: string;
}
export interface AuthorizeGGSheetPayload {
    spreadSheetUrl?: string;
    formAccountId?: number;
    authorizationCode?: string;
}
export interface AuthorizeGGSheetResponse {
    granted: boolean;
    sheetId?: number;
    grantUrl?: string;
    formAccountId?: number;
}
export interface CommonServiceInterface {
    testApi?: (body: APIConfigData) => Promise<TestApiDataInterface>;
}
export interface CoreExtraBuilderState extends LuckyDrawServiceInterface, ArticleServiceInterface, CommonServiceInterface {
    isShowTipTap?: boolean;
    setIsShowTipTap?: React.Dispatch<React.SetStateAction<boolean>>;
    pageId?: number;
    getAllFormAccounts?: () => Promise<FormAccount[]>;
    upsertForm?: (body: any) => Promise<number>;
    getForm?: (id: number) => Promise<FormConfig>;
    authorizeGGSheet?: (body: AuthorizeGGSheetPayload) => Promise<AuthorizeGGSheetResponse>;
    deleteFormAccountById?: (id: number) => Promise<void>;
    openNavigation?: boolean;
    setOpenNavigation?: React.Dispatch<React.SetStateAction<boolean>>;
    menu?: WebsiteMenu[];
    setMenu?: React.Dispatch<React.SetStateAction<WebsiteMenu[]>>;
    showModalSelectBlock?: boolean;
    setShowModalSelectBlock?: React.Dispatch<React.SetStateAction<boolean>>;
    setOpenArticleSidebar?: React.Dispatch<React.SetStateAction<boolean>>;
}
export interface TekoProductBuilderState {
    useTerminalId?: boolean;
    editorTerminal?: string | number;
    setEditorTerminal?: React.Dispatch<React.SetStateAction<string | number>>;
}
export type ElementInterface = {
    section?: Section;
    col?: ColInterface;
    buttonv2?: ButtonV2Interface;
    paragraph?: ParagraphInterface;
    heading?: HeadingInterface;
    root?: RootInterface;
    icon?: IconInterface;
    image?: ImageInterface;
    youtube?: YoutubeInterface;
    spacer?: SpacerInterface;
    slider?: SliderInterface;
    divider?: DividerInterface;
    menuitem?: MenuItemInterface;
    menucol?: MenuColInterface;
    header?: HeaderInterface;
    testimonialcarousel?: TestimonialCarouselInterface;
    box?: BoxInterface;
    map?: MapInterface;
    video?: VideoInterface;
    listitemv2?: ListItemV2Interface;
    listitemiconv2?: ListItemIconV2Interface;
    listitemcontentv2?: ListItemContentV2Interface;
    accordion?: AccordionInterface;
    accordionitem?: AccordionItemInterface;
    accordioncontent?: AccordionContentInterface;
    tab?: TabInterface;
    popupv1?: PopupV1Interface;
    formv4?: FormV4Interface;
    productlist?: ProductListV1Interface;
    inputv1?: InputInterface;
    pageflip?: PageFlipInterface;
    numbercounter?: NumberCounterInterface;
    gallery?: GalleryInterface;
    globalblock?: GlobalBlockInterface;
    popuproot?: PopupRootProps;
    tempiproductlist?: TempiProductListInterface;
    qrCode?: QRCodeInterface;
};
//# sourceMappingURL=index.d.ts.map