'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var coreEditor = require('@tempi/core-editor');
var constants = require('../../constants.js');
var AccordionSetting = require('../configs/AccordionSetting.js');
var AccordionQuickSetting = require('./AccordionQuickSetting.js');
var Accordion = require('../../ui/Accordion.js');
var AccordionItemEditor = require('../AccordionItem/AccordionItemEditor.js');
var selector = require('../../../section/selector.js');
var selector$1 = require('../../../root/selector.js');

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const AccordionEditor = (props) => {
  const {
    connectors: { connect, drag }
  } = coreEditor.useNode();
  return /* @__PURE__ */ jsxRuntime.jsx("div", {
    ref: (ref) => connect(drag(ref)),
    style: __spreadValues({}, !props.children && { minHeight: 24 }),
    children: /* @__PURE__ */ jsxRuntime.jsx(Accordion.Accordion, __spreadValues({}, props))
  });
};
AccordionEditor.craft = coreEditor.crafting({
  displayName: "N\u1ED9i dung thu g\u1ECDn",
  tag: Accordion.Accordion.displayName.toLowerCase(),
  advanceAttributes: coreEditor.AdvanceAttributes,
  quickSetting: AccordionQuickSetting.AccordionQuickSetting,
  props: constants.DEFAULT_ACCORDION.accordion,
  rules: {
    canMoveIn: (incomingNodes) => {
      const allowSources = [coreEditor.getEditorName({ AccordionItemEditor: AccordionItemEditor.AccordionItemEditor })];
      return incomingNodes.every(
        (node) => allowSources.includes(node.data.name)
      );
    },
    canDrop: (targetNode) => {
      const ignoreTargets = [
        coreEditor.getEditorName({ RowEditor: selector.RowEditor }),
        coreEditor.getEditorName({ RootEditor: selector$1.RootEditor }),
        coreEditor.getEditorName({ AccordionItemEditor: AccordionItemEditor.AccordionItemEditor })
      ];
      return !ignoreTargets.includes(targetNode.data.name);
    }
  },
  customAttributes: AccordionSetting.AccordionSetting
});

exports.AccordionEditor = AccordionEditor;
