import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../../../i18n.es.js';
import { useEditor, useBuilder, usePropSeparateDevice, SelectConfig, InputNumberConfig } from '@tempi/core-editor';
import { ROOT, UnitEnum } from '@tempi/core-renderer';
import { Select } from 'antd';
import get from 'lodash.get';
import { PROP_KEY } from '../../../../constants/propKey.es.js';
import { fontFamilyOptions, fontWeightOptions } from '../../../../constants/fonts.es.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const headingTypePrefix = "h";
const headingLevel = [1, 2, 3, 4, 5, 6];
const paragraphType = "p";
const typeOptions = [
  ...headingLevel.map((level) => ({
    value: `${headingTypePrefix}${level}`,
    label: t("Ti\xEAu \u0111\u1EC1 {{level}}", { level })
  })),
  {
    value: paragraphType,
    label: t("\u0110o\u1EA1n v\u0103n")
  }
];
const TitleSetting = () => {
  var _a, _b, _c;
  const { rootNode } = useEditor((state) => ({
    rootNode: state.nodes[ROOT]
  }));
  const { realDevice } = useBuilder();
  const fontFamilyKey = PROP_KEY.joinKey(
    PROP_KEY.CommonStyle,
    PROP_KEY.FontFamily
  );
  const fontWeightKey = PROP_KEY.joinKey(
    PROP_KEY.TitleStyle,
    PROP_KEY.FontWeight
  );
  const [fontFamily, setFontFamily] = usePropSeparateDevice(
    PROP_KEY.joinKey(PROP_KEY.TitleStyle, PROP_KEY.FontFamily)
  );
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(SelectConfig, {
        propKey: PROP_KEY.TitleLevel,
        formItemProps: {
          label: t("Th\u1EBB ti\xEAu \u0111\u1EC1")
        },
        selectProps: {
          dropdownMatchSelectWidth: false,
          allowClear: false,
          children: typeOptions == null ? void 0 : typeOptions.map(({ value, label }) => {
            return /* @__PURE__ */ jsx(Select.Option, {
              value,
              children: /* @__PURE__ */ jsx("span", {
                style: __spreadValues({}, value !== paragraphType && { fontWeight: 500 }),
                children: label
              })
            }, value);
          })
        }
      }),
      /* @__PURE__ */ jsx(SelectConfig, {
        propKey: PROP_KEY.joinKey(PROP_KEY.TitleStyle, PROP_KEY.FontFamily),
        formItemProps: {
          label: t("Ph\xF4ng ch\u1EEF")
        },
        selectProps: {
          placeholder: t("Ph\xF4ng ch\u1EEF"),
          value: fontFamily || get((_b = (_a = rootNode == null ? void 0 : rootNode.data) == null ? void 0 : _a.props) == null ? void 0 : _b[realDevice], fontFamilyKey),
          onChange: setFontFamily,
          children: (_c = fontFamilyOptions) == null ? void 0 : _c.map((el) => /* @__PURE__ */ jsx(Select.Option, {
            value: el.value,
            children: /* @__PURE__ */ jsx("span", {
              style: { fontFamily: el.value },
              children: el.label
            })
          }, el.value)),
          dropdownMatchSelectWidth: false,
          showSearch: true
        }
      }),
      /* @__PURE__ */ jsx(SelectConfig, {
        propKey: fontWeightKey,
        options: fontWeightOptions,
        formItemProps: {
          label: t("\u0110\u1ED9 d\xE0y ph\xF4ng ch\u1EEF")
        },
        selectProps: {
          placeholder: t("M\u1EB7c \u0111\u1ECBnh")
        },
        usePropOptions: {
          formatter: (val) => {
            const fontWeight = parseInt(`${val}`);
            if (isNaN(fontWeight))
              return null;
            return `${fontWeight}`;
          }
        }
      }),
      /* @__PURE__ */ jsx(InputNumberConfig, {
        propKey: PROP_KEY.joinKey(PROP_KEY.TitleStyle, PROP_KEY.FontSize),
        formItemProps: { label: t("C\u1EE1 ch\u1EEF") },
        inputNumberProps: {
          placeholder: t("M\u1EB7c \u0111\u1ECBnh")
        },
        unitProps: { defaultValue: UnitEnum.pixel }
      }),
      /* @__PURE__ */ jsx(InputNumberConfig, {
        propKey: PROP_KEY.joinKey(PROP_KEY.TitleStyle, PROP_KEY.LineHeight),
        formItemProps: {
          label: t("Kho\u1EA3ng c\xE1ch d\xF2ng")
        },
        inputNumberProps: {
          placeholder: t("M\u1EB7c \u0111\u1ECBnh")
        },
        unitProps: { defaultValue: UnitEnum.pixel }
      }),
      /* @__PURE__ */ jsx(InputNumberConfig, {
        propKey: PROP_KEY.joinKey(PROP_KEY.TitleStyle, PROP_KEY.LetterSpacing),
        formItemProps: {
          label: t("Kho\u1EA3ng c\xE1ch ch\u1EEF")
        },
        inputNumberProps: {
          placeholder: t("M\u1EB7c \u0111\u1ECBnh")
        },
        unitProps: { defaultValue: UnitEnum.pixel }
      })
    ]
  });
};

export { TitleSetting };
