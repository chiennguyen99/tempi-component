import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../../../i18n.es.js';
import { DndContext } from '@dnd-kit/core';
import { restrictToVerticalAxis, restrictToWindowEdges, restrictToFirstScrollableAncestor } from '@dnd-kit/modifiers';
import { SortableContext, verticalListSortingStrategy, useSortable } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import styled from '@emotion/styled';
import { Empty, Button, Divider } from 'antd';
import { useState, useEffect } from 'react';
import { PlusOutlined, HolderOutlined } from '@ant-design/icons';
import { CopyRegular, DeleteRegular } from '@fluentui/react-icons';
import { useEditor, useNode, InputConfig, Element } from '@tempi/core-editor';
import { DEFAULT_ACCORDION } from '../../constants.es.js';
import { unescapeString, generateRandomId, escapeString } from '@tempi/core-renderer';
import { convertTitleToText } from '../../utils.es.js';
import { AccordionContentEditor } from '../AccordionContent/AccordionContentEditor.es.js';
import { AccordionItemEditor } from '../AccordionItem/AccordionItemEditor.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const truncate = (input, length) => {
  if ((input == null ? void 0 : input.length) > length) {
    return input.substring(0, length) + "...";
  }
  return input;
};
const ItemConfig = ({
  index,
  item,
  onDuplicate,
  onRemove,
  activeItem: activeField,
  setActiveItem: setActiveField,
  changeItem
}) => {
  const {
    actions: { setProp }
  } = useEditor();
  const { setNodeRef, attributes, listeners, transform } = useSortable({
    id: item == null ? void 0 : item.dndId
  });
  const onChangeTitle = (title) => {
    changeItem(__spreadProps(__spreadValues({}, item), { title }), index);
    setProp(item.nodeId, (props) => props.title = escapeString(title));
  };
  return /* @__PURE__ */ jsx(Fragment, {
    children: /* @__PURE__ */ jsxs(StyledTagField, {
      ref: setNodeRef,
      style: { transform: CSS.Transform.toString(transform) },
      className: activeField === index ? "active" : null,
      children: [
        /* @__PURE__ */ jsxs(StyledTagHeader, {
          onClick: () => {
            if (activeField === index)
              setActiveField(void 0);
            else
              setActiveField(index);
          },
          children: [
            /* @__PURE__ */ jsxs("div", {
              className: "flex",
              children: [
                /* @__PURE__ */ jsx(StyledAction, __spreadProps(__spreadValues(__spreadValues({}, listeners), attributes), {
                  style: { cursor: "move", marginRight: 8 },
                  children: /* @__PURE__ */ jsx(HolderOutlined, {
                    style: {
                      fontSize: 20
                    }
                  })
                })),
                /* @__PURE__ */ jsx("div", {
                  children: truncate(item.title, 30) || index + 1
                })
              ]
            }),
            /* @__PURE__ */ jsxs("div", {
              className: "flex",
              children: [
                /* @__PURE__ */ jsx(StyledAction, {
                  style: { marginRight: 8 },
                  onClick: (e) => {
                    e.stopPropagation();
                    onDuplicate();
                  },
                  children: /* @__PURE__ */ jsx(CopyRegular, {
                    fontSize: 20
                  })
                }),
                /* @__PURE__ */ jsx(StyledAction, {
                  onClick: (e) => {
                    e.stopPropagation();
                    onRemove();
                  },
                  children: /* @__PURE__ */ jsx(DeleteRegular, {
                    fontSize: 20
                  })
                })
              ]
            })
          ]
        }),
        activeField === index && /* @__PURE__ */ jsxs(Fragment, {
          children: [
            /* @__PURE__ */ jsx(Divider, {
              className: "my-half mb-0"
            }),
            /* @__PURE__ */ jsx(StyledTagContent, {
              children: /* @__PURE__ */ jsx(InputConfig, {
                formItemProps: {
                  label: t("Ti\xEAu \u0111\u1EC1"),
                  layout: "vertical"
                },
                inputProps: {
                  placeholder: t("Nh\u1EADp ti\xEAu \u0111\u1EC1"),
                  style: { width: "100%" },
                  value: item.title,
                  onChange: (e) => onChangeTitle(e.target.value),
                  maxLength: 255
                }
              })
            })
          ]
        })
      ]
    }, index)
  });
};
const ListAccordionSetting = ({ maxItem }) => {
  var _a, _b;
  const {
    actions,
    query: { parseReactElement, node },
    duplicateNode
  } = useEditor();
  const { id, childNodes } = useNode((currentNode) => ({
    childNodes: currentNode.data.nodes.map(
      (childNodeId) => node(childNodeId).get()
    )
  }));
  const getAccordionFromChildNode = () => {
    return childNodes.map((node2) => {
      const nodeProps = node2.data.props;
      return {
        title: unescapeString(convertTitleToText(nodeProps.title)),
        dndId: generateRandomId(),
        nodeId: node2 == null ? void 0 : node2.id
      };
    });
  };
  const accordionItems = getAccordionFromChildNode();
  const [items, setItems] = useState(accordionItems);
  const [activeItem, setActiveItem] = useState(0);
  const deleteTab = (index) => {
    actions.delete(childNodes.length === 1 ? id : childNodes[index].id);
  };
  const duplicateTab = (index) => {
    duplicateNode(childNodes[index], id);
  };
  const addNewTab = () => {
    const newNodeTree = parseReactElement(
      /* @__PURE__ */ jsx(AccordionItemEditor, __spreadProps(__spreadValues({}, DEFAULT_ACCORDION.accordionItem), {
        children: /* @__PURE__ */ jsx(Element, {
          is: AccordionContentEditor,
          canvas: true
        })
      }))
    ).toNodeTree();
    actions.history.throttle().addNodeTree(newNodeTree, id);
  };
  const handleDragEnd = ({ active, over }) => {
    if ((active == null ? void 0 : active.id) !== (over == null ? void 0 : over.id)) {
      const _inputs = [...items];
      const oldIndex = _inputs.findIndex((el) => el.dndId === (active == null ? void 0 : active.id));
      const newIndex = _inputs.findIndex((el) => el.dndId === (over == null ? void 0 : over.id));
      setActiveItem(void 0);
      const newPos = newIndex > oldIndex ? newIndex + 1 : newIndex;
      actions.history.ignore().move(items[oldIndex].nodeId, id, newPos);
    }
  };
  useEffect(() => {
    if ((accordionItems == null ? void 0 : accordionItems.length) !== (items == null ? void 0 : items.length)) {
      setItems(getAccordionFromChildNode());
    } else {
      const check = items.some((item, index) => {
        return item.title !== accordionItems[index].title;
      });
      if (check) {
        setItems(getAccordionFromChildNode());
      }
    }
  }, [accordionItems]);
  const updateItem = (item, index) => {
    const cloneInputs = [...items];
    cloneInputs[index] = item;
    setItems(cloneInputs);
  };
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(DndContext, {
        modifiers: [
          restrictToVerticalAxis,
          restrictToWindowEdges,
          restrictToFirstScrollableAncestor
        ],
        onDragEnd: handleDragEnd,
        children: items.length === 0 ? /* @__PURE__ */ jsx(Empty, {
          description: t("Danh s\xE1ch r\u1ED7ng")
        }) : /* @__PURE__ */ jsx(SortableContext, {
          items: (_a = items.map) == null ? void 0 : _a.call(items, (el) => el.dndId),
          strategy: verticalListSortingStrategy,
          disabled: false,
          children: (_b = items.map) == null ? void 0 : _b.call(items, (el, index) => /* @__PURE__ */ jsx(ItemConfig, {
            activeItem,
            setActiveItem,
            item: el,
            index,
            onDuplicate: () => duplicateTab(index),
            onRemove: () => deleteTab(index),
            changeItem: updateItem
          }, index))
        })
      }),
      /* @__PURE__ */ jsx(Button, {
        style: {
          marginTop: 8,
          marginBottom: 8
        },
        disabled: maxItem && items.length >= maxItem,
        type: "primary",
        block: true,
        icon: /* @__PURE__ */ jsx(PlusOutlined, {}),
        onClick: () => addNewTab(),
        children: t("Th\xEAm ph\u1EA7n t\u1EED") + (maxItem ? ` (${items.length}/${maxItem})` : "")
      })
    ]
  });
};
const StyledTagField = styled.div`
  justify-content: space-between;
  padding: 0.5rem;
  border-radius: 4px;
  border: 1px solid var(--border-color);
  margin-bottom: 8px;
  &.active {
    border-color: ${(props) => props.theme.colorPrimary};
  }
`;
const StyledTagHeader = styled.div`
  display: flex;
  flex-grow: 1;
  align-items: center;
  justify-content: space-between;
  cursor: pointer;
`;
const StyledAction = styled.div`
  background-color: transparent;
  cursor: pointer;
`;
const StyledTagContent = styled.div`
  padding: 0.5rem;
`;

export { ListAccordionSetting };
