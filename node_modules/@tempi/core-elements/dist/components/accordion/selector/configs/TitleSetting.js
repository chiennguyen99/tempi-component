'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../../../i18n.js');
var coreEditor = require('@tempi/core-editor');
var coreRenderer = require('@tempi/core-renderer');
var antd = require('antd');
var get = require('lodash.get');
var propKey = require('../../../../constants/propKey.js');
var fonts = require('../../../../constants/fonts.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var get__default = /*#__PURE__*/_interopDefaultLegacy(get);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const headingTypePrefix = "h";
const headingLevel = [1, 2, 3, 4, 5, 6];
const paragraphType = "p";
const typeOptions = [
  ...headingLevel.map((level) => ({
    value: `${headingTypePrefix}${level}`,
    label: i18n.t("Ti\xEAu \u0111\u1EC1 {{level}}", { level })
  })),
  {
    value: paragraphType,
    label: i18n.t("\u0110o\u1EA1n v\u0103n")
  }
];
const TitleSetting = () => {
  var _a, _b, _c;
  const { rootNode } = coreEditor.useEditor((state) => ({
    rootNode: state.nodes[coreRenderer.ROOT]
  }));
  const { realDevice } = coreEditor.useBuilder();
  const fontFamilyKey = propKey.PROP_KEY.joinKey(
    propKey.PROP_KEY.CommonStyle,
    propKey.PROP_KEY.FontFamily
  );
  const fontWeightKey = propKey.PROP_KEY.joinKey(
    propKey.PROP_KEY.TitleStyle,
    propKey.PROP_KEY.FontWeight
  );
  const [fontFamily, setFontFamily] = coreEditor.usePropSeparateDevice(
    propKey.PROP_KEY.joinKey(propKey.PROP_KEY.TitleStyle, propKey.PROP_KEY.FontFamily)
  );
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
        propKey: propKey.PROP_KEY.TitleLevel,
        formItemProps: {
          label: i18n.t("Th\u1EBB ti\xEAu \u0111\u1EC1")
        },
        selectProps: {
          dropdownMatchSelectWidth: false,
          allowClear: false,
          children: typeOptions == null ? void 0 : typeOptions.map(({ value, label }) => {
            return /* @__PURE__ */ jsxRuntime.jsx(antd.Select.Option, {
              value,
              children: /* @__PURE__ */ jsxRuntime.jsx("span", {
                style: __spreadValues({}, value !== paragraphType && { fontWeight: 500 }),
                children: label
              })
            }, value);
          })
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
        propKey: propKey.PROP_KEY.joinKey(propKey.PROP_KEY.TitleStyle, propKey.PROP_KEY.FontFamily),
        formItemProps: {
          label: i18n.t("Ph\xF4ng ch\u1EEF")
        },
        selectProps: {
          placeholder: i18n.t("Ph\xF4ng ch\u1EEF"),
          value: fontFamily || get__default["default"]((_b = (_a = rootNode == null ? void 0 : rootNode.data) == null ? void 0 : _a.props) == null ? void 0 : _b[realDevice], fontFamilyKey),
          onChange: setFontFamily,
          children: (_c = fonts.fontFamilyOptions) == null ? void 0 : _c.map((el) => /* @__PURE__ */ jsxRuntime.jsx(antd.Select.Option, {
            value: el.value,
            children: /* @__PURE__ */ jsxRuntime.jsx("span", {
              style: { fontFamily: el.value },
              children: el.label
            })
          }, el.value)),
          dropdownMatchSelectWidth: false,
          showSearch: true
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
        propKey: fontWeightKey,
        options: fonts.fontWeightOptions,
        formItemProps: {
          label: i18n.t("\u0110\u1ED9 d\xE0y ph\xF4ng ch\u1EEF")
        },
        selectProps: {
          placeholder: i18n.t("M\u1EB7c \u0111\u1ECBnh")
        },
        usePropOptions: {
          formatter: (val) => {
            const fontWeight = parseInt(`${val}`);
            if (isNaN(fontWeight))
              return null;
            return `${fontWeight}`;
          }
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
        propKey: propKey.PROP_KEY.joinKey(propKey.PROP_KEY.TitleStyle, propKey.PROP_KEY.FontSize),
        formItemProps: { label: i18n.t("C\u1EE1 ch\u1EEF") },
        inputNumberProps: {
          placeholder: i18n.t("M\u1EB7c \u0111\u1ECBnh")
        },
        unitProps: { defaultValue: coreRenderer.UnitEnum.pixel }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
        propKey: propKey.PROP_KEY.joinKey(propKey.PROP_KEY.TitleStyle, propKey.PROP_KEY.LineHeight),
        formItemProps: {
          label: i18n.t("Kho\u1EA3ng c\xE1ch d\xF2ng")
        },
        inputNumberProps: {
          placeholder: i18n.t("M\u1EB7c \u0111\u1ECBnh")
        },
        unitProps: { defaultValue: coreRenderer.UnitEnum.pixel }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
        propKey: propKey.PROP_KEY.joinKey(propKey.PROP_KEY.TitleStyle, propKey.PROP_KEY.LetterSpacing),
        formItemProps: {
          label: i18n.t("Kho\u1EA3ng c\xE1ch ch\u1EEF")
        },
        inputNumberProps: {
          placeholder: i18n.t("M\u1EB7c \u0111\u1ECBnh")
        },
        unitProps: { defaultValue: coreRenderer.UnitEnum.pixel }
      })
    ]
  });
};

exports.TitleSetting = TitleSetting;
