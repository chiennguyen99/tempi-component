import { jsxs, jsx } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { Alignment, getStyle } from '@tempi/core-renderer';
import React__default, { useContext } from 'react';
import { AccordionContext } from '../context.es.js';
import { convertTitleToText, getAccordionItemChildrenCss } from '../utils.es.js';
import { PbIcon } from '../../icon/ui.es.js';
import { Heading } from '../../heading/ui.es.js';
import { getCommonTextCss } from '../../../constants/fonts.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const AccordionItem = React__default.forwardRef((_a, ref) => {
  var _b = _a, { children, title, itemKey, icon, dataUniqId } = _b, rest = __objRest(_b, ["children", "title", "itemKey", "icon", "dataUniqId"]);
  const {
    icon: defaultIcon,
    activeKey,
    setActiveKey,
    titleLevel
  } = useContext(AccordionContext);
  const isActive = activeKey === dataUniqId;
  const _a2 = {
    name: isActive ? (icon == null ? void 0 : icon.activeName) || (defaultIcon == null ? void 0 : defaultIcon.activeName) : (icon == null ? void 0 : icon.name) || (defaultIcon == null ? void 0 : defaultIcon.name),
    size: (icon == null ? void 0 : icon.size) || (defaultIcon == null ? void 0 : defaultIcon.size),
    color: (icon == null ? void 0 : icon.color) || (defaultIcon == null ? void 0 : defaultIcon.color),
    align: (icon == null ? void 0 : icon.align) || (defaultIcon == null ? void 0 : defaultIcon.align)
  }, { align = Alignment.right } = _a2, restIconProps = __objRest(_a2, ["align"]);
  return /* @__PURE__ */ jsxs(Wrapper, __spreadProps(__spreadValues({
    ref
  }, rest), {
    className: `accordion__item ${isActive ? "active" : "collapsed"}`,
    children: [
      /* @__PURE__ */ jsxs("div", {
        ref,
        onClick: () => {
          if (isActive) {
            setActiveKey(null);
          } else {
            setActiveKey(dataUniqId);
          }
        },
        className: `accordion__header ${align}`,
        children: [
          /* @__PURE__ */ jsx(Heading, {
            text: `<${titleLevel}>${convertTitleToText(title)}</${titleLevel}>`,
            className: "accordion__title"
          }),
          /* @__PURE__ */ jsx(PbIcon, __spreadValues({}, restIconProps))
        ]
      }),
      children
    ]
  }));
});
AccordionItem.displayName = "AccordionItem";
const Wrapper = styled.div(
  (_c) => {
    var _d = _c, { commonStyle, iconAlign, titleStyle } = _d, rest = __objRest(_d, ["commonStyle", "iconAlign", "titleStyle"]);
    return `
    &.accordion__item {
      ${getStyle(commonStyle)}
      ${getAccordionItemChildrenCss(rest)}
    }

    .accordion {
      &__header {
        display: flex;
        align-items: center;
        cursor: pointer;

        &.left {
          flex-direction: row-reverse;
          justify-content: flex-end;
        }
        &.right {
          flex-direction: row;
          justify-content: space-between;
        }
      }

      &__title {
        h1, h2, h3, h4, h5, p {
          ${getStyle(titleStyle)}
          ${getCommonTextCss()}
        }
      }

      &__content {
        display: flex;
        flex-direction: column;
      }
    }

    &.collapsed .accordion__content {
      padding-top: 0 !important;
      padding-bottom: 0 !important;
      height: 0;
      opacity: 0;
      pointer-events: none;
      overflow: hidden;
    }

    &.active .accordion__content {
      opacity: 1;
    }
  `;
  }
);

export { AccordionItem };
