import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import { t } from '../../i18n.es.js';
import styled from '@emotion/styled';
import { FormItem, ItemListConfig, usePropSeparateDevice, ModalConfigWrapper, EventConfig, InputConfig, RangeSliderConfig, ColorPickerConfig } from '@tempi/core-editor';
import { useEffect } from 'react';
import { DEFAULT_BUTTONS } from './constants.es.js';
import { PROP_KEY } from '../../constants/propKey.es.js';

const ButtonSetting = () => {
  return /* @__PURE__ */ jsx(Fragment, {
    children: /* @__PURE__ */ jsx(FormItem, {
      layout: "vertical",
      children: /* @__PURE__ */ jsx(ItemListConfig, {
        maxItem: 2,
        activeItemConfig: ActionButtonConfig,
        defaultItem: DEFAULT_BUTTONS[0],
        propKey: PROP_KEY.ActionButtons,
        addItemText: t("Th\xEAm n\xFAt"),
        titleKey: PROP_KEY.Text
      })
    })
  });
};
const ActionButtonConfig = ({ index }) => {
  const [borderwidth, setBorderWidth] = usePropSeparateDevice(
    PROP_KEY.joinKey(
      PROP_KEY.ActionButtons,
      index.toString(),
      PROP_KEY.ButtonStyle,
      PROP_KEY.BorderWidth
    )
  );
  const [borderColor] = usePropSeparateDevice(
    PROP_KEY.joinKey(
      PROP_KEY.ActionButtons,
      index.toString(),
      PROP_KEY.ButtonStyle,
      PROP_KEY.BorderColor
    )
  );
  useEffect(() => {
    if (borderColor && !borderwidth) {
      setBorderWidth(1);
    } else if (borderwidth && !borderColor) {
      setBorderWidth(0);
    }
  }, [borderColor]);
  return /* @__PURE__ */ jsxs(StyledButtonContent, {
    children: [
      /* @__PURE__ */ jsx(ModalConfigWrapper, {
        customModalProps: {
          propKey: PROP_KEY.joinKey(PROP_KEY.ActionButtons, index.toString()),
          listOptions: ["link", "openPageOfWebsite"]
        },
        title: t("S\u1EF1 ki\u1EC7n click"),
        customModal: EventConfig
      }),
      /* @__PURE__ */ jsx(InputConfig, {
        formItemProps: { layout: "vertical", label: t("Ti\xEAu \u0111\u1EC1") },
        inputProps: {
          placeholder: t("Nh\u1EADp ch\u1EEF (t\u1ED1i \u0111a 20 k\xFD t\u1EF1)"),
          maxLength: 20
        },
        propKey: PROP_KEY.joinKey(
          PROP_KEY.ActionButtons,
          index.toString(),
          PROP_KEY.Text
        )
      }),
      /* @__PURE__ */ jsx(RangeSliderConfig, {
        sliderProps: { min: 50, max: 200, step: 1 },
        propKey: PROP_KEY.joinKey(
          PROP_KEY.ActionButtons,
          index.toString(),
          PROP_KEY.ButtonStyle,
          PROP_KEY.Width
        ),
        formItemProps: { label: t("Chi\u1EC1u r\u1ED9ng") },
        unitProps: {
          defaultValue: "px"
        }
      }),
      /* @__PURE__ */ jsx(RangeSliderConfig, {
        sliderProps: { min: 20, max: 80, step: 1 },
        propKey: PROP_KEY.joinKey(
          PROP_KEY.ActionButtons,
          index.toString(),
          PROP_KEY.ButtonStyle,
          PROP_KEY.Height
        ),
        formItemProps: { label: t("Chi\u1EC1u cao") },
        unitProps: {
          defaultValue: "px"
        }
      }),
      /* @__PURE__ */ jsx(RangeSliderConfig, {
        sliderProps: { min: 0, max: 32, step: 1 },
        propKey: PROP_KEY.joinKey(
          PROP_KEY.ActionButtons,
          index.toString(),
          PROP_KEY.ButtonStyle,
          PROP_KEY.BorderRadius
        ),
        formItemProps: { label: t("Bo g\xF3c") },
        unitProps: {
          defaultValue: "px"
        }
      }),
      /* @__PURE__ */ jsx(RangeSliderConfig, {
        sliderProps: { min: 12, max: 72, step: 1, defaultValue: 14 },
        propKey: PROP_KEY.joinKey(
          PROP_KEY.ActionButtons,
          index.toString(),
          PROP_KEY.ButtonStyle,
          PROP_KEY.FontSize
        ),
        formItemProps: { label: t("C\u1EE1 ch\u1EEF") },
        unitProps: {
          defaultValue: "px"
        }
      }),
      /* @__PURE__ */ jsx(ColorPickerConfig, {
        formItemProps: {
          label: t("M\xE0u n\u1EC1n")
        },
        propKey: PROP_KEY.joinKey(
          PROP_KEY.ActionButtons,
          index.toString(),
          PROP_KEY.ButtonStyle,
          PROP_KEY.BackgroundColor
        ),
        gradientPicker: true
      }),
      /* @__PURE__ */ jsx(ColorPickerConfig, {
        formItemProps: {
          label: t("M\xE0u ch\u1EEF")
        },
        propKey: PROP_KEY.joinKey(
          PROP_KEY.ActionButtons,
          index.toString(),
          PROP_KEY.ButtonStyle,
          PROP_KEY.Color
        )
      }),
      /* @__PURE__ */ jsx(ColorPickerConfig, {
        formItemProps: {
          label: t("M\xE0u vi\u1EC1n")
        },
        propKey: PROP_KEY.joinKey(
          PROP_KEY.ActionButtons,
          index.toString(),
          PROP_KEY.ButtonStyle,
          PROP_KEY.BorderColor
        )
      })
    ]
  });
};
const StyledButtonContent = styled.div`
  padding: 0.5rem;
`;

export { ButtonSetting };
