'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var coreRenderer = require('@tempi/core-renderer');
var clsx = require('clsx');
var React = require('react');
var hooks = require('../header/hooks.js');
var DropdownItem = require('./components/DropdownItem.js');
var utils = require('./utils.js');
var LanguageSelect = require('./components/LanguageSelect.js');
var styled = require('@emotion/styled');
var Header = require('./components/Header.js');
var Content = require('./components/Content.js');
var Logo = require('./components/Logo.js');
var ToggleButton = require('./components/ToggleButton.js');
var NavigationBar = require('./components/NavigationBar.js');
var Menu = require('./components/Menu.js');
var Item = require('./components/Item.js');
var ActionButton = require('./components/ActionButton.js');
var type = require('../header/type.js');
var menu = require('../../utils/menu.js');
var track = require('../../utils/track.js');
var ui = require('../button/v2/ui.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var clsx__default = /*#__PURE__*/_interopDefaultLegacy(clsx);
var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const WebsiteHeader = (props) => {
  var _b;
  const { device, globalData } = coreRenderer.useStore();
  const [mobileMenuOpen, setMobileMenuOpen] = React.useState(false);
  const _a = props, { isEditingMode, menu: editorMenu } = _a, rest = __objRest(_a, ["isEditingMode", "menu"]);
  const propsByDevice = coreRenderer.getPropsByDevice(rest, device) || {};
  const menu$1 = isEditingMode ? editorMenu : (globalData == null ? void 0 : globalData.menu) || [];
  const prefixLangUrl = (globalData == null ? void 0 : globalData.prefixLangUrl) || "";
  const languages = (globalData == null ? void 0 : globalData.languages) || [];
  const currentLanguage = globalData == null ? void 0 : globalData.currentLanguage;
  const setCurrentLanguage = (language) => {
    if (language.languageCode === (currentLanguage == null ? void 0 : currentLanguage.languageCode))
      return;
    if (typeof window !== "undefined") {
      window.open(`/${language.languageCode}`, "_self");
    }
  };
  const {
    commonStyle,
    logoConfig,
    menuConfig,
    languageConfig,
    stickyTop,
    searchConfig,
    menuItemConfig,
    actionButtons: propsActionButtons
  } = propsByDevice;
  const actionButtons = propsActionButtons != null ? propsActionButtons : [];
  const grid = utils.calculateGrid(propsByDevice);
  const menuOpenClassName = clsx__default["default"]({ open: mobileMenuOpen });
  const tree = utils.getFlattenTreeActiveMenu(menu$1 || [], (_b = globalData == null ? void 0 : globalData.page) == null ? void 0 : _b.slug);
  const languageAlign = (languageConfig == null ? void 0 : languageConfig.align) || coreRenderer.Alignment.right;
  const { headerRef, headerHeight } = hooks.useHeaderPosition(
    stickyTop ? type.PositionHeader.STICKY : type.PositionHeader.NORMAL
  );
  React.useEffect(() => {
    const handleClickOutside = (event) => {
      var _a2, _b2;
      if (!((_b2 = (_a2 = headerRef == null ? void 0 : headerRef.current) == null ? void 0 : _a2.contains) == null ? void 0 : _b2.call(_a2, event.target))) {
        setMobileMenuOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [headerRef]);
  const renderActionButtons = () => {
    return actionButtons.map((item, idx) => {
      return /* @__PURE__ */ jsxRuntime.jsx(ui.ButtonV2, __spreadProps(__spreadValues({}, item), {
        isEditingMode
      }), idx);
    });
  };
  const renderDesktopButtons = () => {
    if (!(actionButtons == null ? void 0 : actionButtons.length))
      return null;
    return /* @__PURE__ */ jsxRuntime.jsx(ActionButton.ActionButton, {
      grid,
      children: renderActionButtons()
    });
  };
  const renderMobileButtons = () => {
    if (!(actionButtons == null ? void 0 : actionButtons.length))
      return null;
    return /* @__PURE__ */ jsxRuntime.jsx(ActionButton.ActionButtonMobile, {
      grid,
      children: renderActionButtons()
    });
  };
  const languageSelectProps = __spreadProps(__spreadValues({}, languageConfig), {
    isEditingMode,
    languages,
    currentLanguage,
    setCurrentLanguage,
    languageCommonStyle: __spreadProps(__spreadValues({}, menuItemConfig.commonStyle), {
      background: commonStyle.background
    })
  });
  const renderLanguageSelectDesktop = () => /* @__PURE__ */ jsxRuntime.jsx(LanguageSelect.LanguageSelect, __spreadProps(__spreadValues({}, languageSelectProps), {
    device: "desktop"
  }));
  const renderLanguageSelectMobile = () => /* @__PURE__ */ jsxRuntime.jsx(LanguageSelect.LanguageSelect, __spreadProps(__spreadValues({}, languageSelectProps), {
    device: "mobile"
  }));
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(Header.Header, {
        commonStyle,
        ref: headerRef,
        headerHeight,
        children: /* @__PURE__ */ jsxRuntime.jsxs(Content.Content, {
          grid,
          commonStyle,
          children: [
            /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
              children: [
                (logoConfig == null ? void 0 : logoConfig.show) && /* @__PURE__ */ jsxRuntime.jsx(Logo.Logo, __spreadProps(__spreadValues({}, !isEditingMode ? { href: `${prefixLangUrl || "/"}` } : {}), {
                  grid,
                  children: /* @__PURE__ */ jsxRuntime.jsx(Logo.LogoImg, {
                    alt: logoConfig == null ? void 0 : logoConfig.alt,
                    src: coreRenderer.getImageUrlFromGoogleUserContent(
                      logoConfig == null ? void 0 : logoConfig.src,
                      logoConfig == null ? void 0 : logoConfig.googleImageParams
                    ),
                    srcSet: coreRenderer.buildSrcsetDPR(logoConfig == null ? void 0 : logoConfig.src, grid.logoWidth),
                    grid,
                    loading: "lazy"
                  })
                })),
                languageAlign === "left" && /* @__PURE__ */ jsxRuntime.jsx("div", {
                  style: {
                    gridRow: "1/2",
                    gridColumn: grid.leftLanguageSelectGridColumn
                  },
                  children: renderLanguageSelectDesktop()
                })
              ]
            }),
            /* @__PURE__ */ jsxRuntime.jsx(ToggleButton.ToggleButton, {
              className: menuOpenClassName,
              grid,
              onClick: () => setMobileMenuOpen(!mobileMenuOpen)
            }),
            /* @__PURE__ */ jsxRuntime.jsx(NavigationBar.Navbar, {
              grid,
              children: /* @__PURE__ */ jsxRuntime.jsxs(Menu.Menu, {
                className: menuOpenClassName,
                grid,
                children: [
                  tree.map((item) => {
                    var _a2;
                    return /* @__PURE__ */ jsxRuntime.jsx(Item.Item, {
                      children: ((_a2 = item == null ? void 0 : item.children) == null ? void 0 : _a2.length) > 0 ? /* @__PURE__ */ jsxRuntime.jsx(DropdownItem.DropdownItem, {
                        item,
                        grid,
                        alignMenu: menuConfig == null ? void 0 : menuConfig.align,
                        isEditingMode,
                        background: commonStyle.backgroundColor || commonStyle.background || "white",
                        prefixLangUrl
                      }) : /* @__PURE__ */ jsxRuntime.jsx(Item.ItemLabel, {
                        children: /* @__PURE__ */ jsxRuntime.jsx(Item.ItemContentWrapper, __spreadProps(__spreadValues({
                          alignMenu: menuConfig == null ? void 0 : menuConfig.align,
                          hoverColor: grid == null ? void 0 : grid.menuHoverColor
                        }, track.getAttrTracking({
                          regionName: "header",
                          contentName: item == null ? void 0 : item.name,
                          target: menu.getUrlOfMenuItem(
                            item,
                            isEditingMode,
                            prefixLangUrl
                          )
                        })), {
                          children: /* @__PURE__ */ jsxRuntime.jsxs(Item.ItemContent, __spreadProps(__spreadValues({
                            alignMenu: menuConfig == null ? void 0 : menuConfig.align,
                            href: menu.getUrlOfMenuItem(
                              item,
                              isEditingMode,
                              prefixLangUrl
                            ),
                            onClick: (e) => {
                              if ((item == null ? void 0 : item.href) === "" || (item == null ? void 0 : item.href) === "#") {
                                e.preventDefault();
                              }
                            },
                            grid,
                            isActive: item == null ? void 0 : item.isActive,
                            target: menu.getTargetUrl(item.target)
                          }, (item == null ? void 0 : item.linkType) === "LINK" && item.nofollow ? { rel: "nofollow" } : {}), {
                            children: [
                              (item == null ? void 0 : item.iconUrl) && /* @__PURE__ */ jsxRuntime.jsx(Item.ItemIcon, {
                                src: item.iconUrl,
                                loading: "lazy"
                              }),
                              item == null ? void 0 : item.name
                            ]
                          }))
                        }))
                      })
                    }, item.id);
                  }),
                  /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
                    children: [
                      renderLanguageSelectMobile(),
                      renderMobileButtons()
                    ]
                  })
                ]
              })
            }),
            /* @__PURE__ */ jsxRuntime.jsxs(ExtraWrapper, {
              children: [
                languageAlign === coreRenderer.Alignment.right ? renderLanguageSelectDesktop() : null,
                renderDesktopButtons()
              ]
            }),
            false
          ]
        })
      }),
      /* @__PURE__ */ jsxRuntime.jsx("div", {
        className: "placeholder"
      })
    ]
  });
};
WebsiteHeader.displayName = "websiteheader";
const ExtraWrapper = styled__default["default"].div`
  grid-column: last-col / span 1;
  grid-row: span 2;
  display: flex;
  align-items: center;
`;

exports.WebsiteHeader = WebsiteHeader;
