import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { useStore, getPropsByDevice, Alignment, getImageUrlFromGoogleUserContent, buildSrcsetDPR } from '@tempi/core-renderer';
import clsx from 'clsx';
import { useState, useEffect } from 'react';
import { useHeaderPosition } from '../header/hooks.es.js';
import { DropdownItem } from './components/DropdownItem.es.js';
import { calculateGrid, getFlattenTreeActiveMenu } from './utils.es.js';
import { LanguageSelect } from './components/LanguageSelect.es.js';
import styled from '@emotion/styled';
import { Header } from './components/Header.es.js';
import { Content } from './components/Content.es.js';
import { Logo, LogoImg } from './components/Logo.es.js';
import { ToggleButton } from './components/ToggleButton.es.js';
import { Navbar } from './components/NavigationBar.es.js';
import { Menu } from './components/Menu.es.js';
import { Item, ItemLabel, ItemContentWrapper, ItemContent, ItemIcon } from './components/Item.es.js';
import { ActionButton, ActionButtonMobile } from './components/ActionButton.es.js';
import { PositionHeader } from '../header/type.es.js';
import { getUrlOfMenuItem, getTargetUrl } from '../../utils/menu.es.js';
import { getAttrTracking } from '../../utils/track.es.js';
import { ButtonV2 } from '../button/v2/ui.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const WebsiteHeader = (props) => {
  var _b;
  const { device, globalData } = useStore();
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const _a = props, { isEditingMode, menu: editorMenu } = _a, rest = __objRest(_a, ["isEditingMode", "menu"]);
  const propsByDevice = getPropsByDevice(rest, device) || {};
  const menu = isEditingMode ? editorMenu : (globalData == null ? void 0 : globalData.menu) || [];
  const prefixLangUrl = (globalData == null ? void 0 : globalData.prefixLangUrl) || "";
  const languages = (globalData == null ? void 0 : globalData.languages) || [];
  const currentLanguage = globalData == null ? void 0 : globalData.currentLanguage;
  const setCurrentLanguage = (language) => {
    if (language.languageCode === (currentLanguage == null ? void 0 : currentLanguage.languageCode))
      return;
    if (typeof window !== "undefined") {
      window.open(`/${language.languageCode}`, "_self");
    }
  };
  const {
    commonStyle,
    logoConfig,
    menuConfig,
    languageConfig,
    stickyTop,
    searchConfig,
    menuItemConfig,
    actionButtons: propsActionButtons
  } = propsByDevice;
  const actionButtons = propsActionButtons != null ? propsActionButtons : [];
  const grid = calculateGrid(propsByDevice);
  const menuOpenClassName = clsx({ open: mobileMenuOpen });
  const tree = getFlattenTreeActiveMenu(menu || [], (_b = globalData == null ? void 0 : globalData.page) == null ? void 0 : _b.slug);
  const languageAlign = (languageConfig == null ? void 0 : languageConfig.align) || Alignment.right;
  const { headerRef, headerHeight } = useHeaderPosition(
    stickyTop ? PositionHeader.STICKY : PositionHeader.NORMAL
  );
  useEffect(() => {
    const handleClickOutside = (event) => {
      var _a2, _b2;
      if (!((_b2 = (_a2 = headerRef == null ? void 0 : headerRef.current) == null ? void 0 : _a2.contains) == null ? void 0 : _b2.call(_a2, event.target))) {
        setMobileMenuOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [headerRef]);
  const renderActionButtons = () => {
    return actionButtons.map((item, idx) => {
      return /* @__PURE__ */ jsx(ButtonV2, __spreadProps(__spreadValues({}, item), {
        isEditingMode
      }), idx);
    });
  };
  const renderDesktopButtons = () => {
    if (!(actionButtons == null ? void 0 : actionButtons.length))
      return null;
    return /* @__PURE__ */ jsx(ActionButton, {
      grid,
      children: renderActionButtons()
    });
  };
  const renderMobileButtons = () => {
    if (!(actionButtons == null ? void 0 : actionButtons.length))
      return null;
    return /* @__PURE__ */ jsx(ActionButtonMobile, {
      grid,
      children: renderActionButtons()
    });
  };
  const languageSelectProps = __spreadProps(__spreadValues({}, languageConfig), {
    isEditingMode,
    languages,
    currentLanguage,
    setCurrentLanguage,
    languageCommonStyle: __spreadProps(__spreadValues({}, menuItemConfig.commonStyle), {
      background: commonStyle.background
    })
  });
  const renderLanguageSelectDesktop = () => /* @__PURE__ */ jsx(LanguageSelect, __spreadProps(__spreadValues({}, languageSelectProps), {
    device: "desktop"
  }));
  const renderLanguageSelectMobile = () => /* @__PURE__ */ jsx(LanguageSelect, __spreadProps(__spreadValues({}, languageSelectProps), {
    device: "mobile"
  }));
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(Header, {
        commonStyle,
        ref: headerRef,
        headerHeight,
        children: /* @__PURE__ */ jsxs(Content, {
          grid,
          commonStyle,
          children: [
            /* @__PURE__ */ jsxs(Fragment, {
              children: [
                (logoConfig == null ? void 0 : logoConfig.show) && /* @__PURE__ */ jsx(Logo, __spreadProps(__spreadValues({}, !isEditingMode ? { href: `${prefixLangUrl || "/"}` } : {}), {
                  grid,
                  children: /* @__PURE__ */ jsx(LogoImg, {
                    alt: logoConfig == null ? void 0 : logoConfig.alt,
                    src: getImageUrlFromGoogleUserContent(
                      logoConfig == null ? void 0 : logoConfig.src,
                      logoConfig == null ? void 0 : logoConfig.googleImageParams
                    ),
                    srcSet: buildSrcsetDPR(logoConfig == null ? void 0 : logoConfig.src, grid.logoWidth),
                    grid,
                    loading: "lazy"
                  })
                })),
                languageAlign === "left" && /* @__PURE__ */ jsx("div", {
                  style: {
                    gridRow: "1/2",
                    gridColumn: grid.leftLanguageSelectGridColumn
                  },
                  children: renderLanguageSelectDesktop()
                })
              ]
            }),
            /* @__PURE__ */ jsx(ToggleButton, {
              className: menuOpenClassName,
              grid,
              onClick: () => setMobileMenuOpen(!mobileMenuOpen)
            }),
            /* @__PURE__ */ jsx(Navbar, {
              grid,
              children: /* @__PURE__ */ jsxs(Menu, {
                className: menuOpenClassName,
                grid,
                children: [
                  tree.map((item) => {
                    var _a2;
                    return /* @__PURE__ */ jsx(Item, {
                      children: ((_a2 = item == null ? void 0 : item.children) == null ? void 0 : _a2.length) > 0 ? /* @__PURE__ */ jsx(DropdownItem, {
                        item,
                        grid,
                        alignMenu: menuConfig == null ? void 0 : menuConfig.align,
                        isEditingMode,
                        background: commonStyle.backgroundColor || commonStyle.background || "white",
                        prefixLangUrl
                      }) : /* @__PURE__ */ jsx(ItemLabel, {
                        children: /* @__PURE__ */ jsx(ItemContentWrapper, __spreadProps(__spreadValues({
                          alignMenu: menuConfig == null ? void 0 : menuConfig.align,
                          hoverColor: grid == null ? void 0 : grid.menuHoverColor
                        }, getAttrTracking({
                          regionName: "header",
                          contentName: item == null ? void 0 : item.name,
                          target: getUrlOfMenuItem(
                            item,
                            isEditingMode,
                            prefixLangUrl
                          )
                        })), {
                          children: /* @__PURE__ */ jsxs(ItemContent, __spreadProps(__spreadValues({
                            alignMenu: menuConfig == null ? void 0 : menuConfig.align,
                            href: getUrlOfMenuItem(
                              item,
                              isEditingMode,
                              prefixLangUrl
                            ),
                            onClick: (e) => {
                              if ((item == null ? void 0 : item.href) === "" || (item == null ? void 0 : item.href) === "#") {
                                e.preventDefault();
                              }
                            },
                            grid,
                            isActive: item == null ? void 0 : item.isActive,
                            target: getTargetUrl(item.target)
                          }, (item == null ? void 0 : item.linkType) === "LINK" && item.nofollow ? { rel: "nofollow" } : {}), {
                            children: [
                              (item == null ? void 0 : item.iconUrl) && /* @__PURE__ */ jsx(ItemIcon, {
                                src: item.iconUrl,
                                loading: "lazy"
                              }),
                              item == null ? void 0 : item.name
                            ]
                          }))
                        }))
                      })
                    }, item.id);
                  }),
                  /* @__PURE__ */ jsxs(Fragment, {
                    children: [
                      renderLanguageSelectMobile(),
                      renderMobileButtons()
                    ]
                  })
                ]
              })
            }),
            /* @__PURE__ */ jsxs(ExtraWrapper, {
              children: [
                languageAlign === Alignment.right ? renderLanguageSelectDesktop() : null,
                renderDesktopButtons()
              ]
            }),
            false
          ]
        })
      }),
      /* @__PURE__ */ jsx("div", {
        className: "placeholder"
      })
    ]
  });
};
WebsiteHeader.displayName = "websiteheader";
const ExtraWrapper = styled.div`
  grid-column: last-col / span 1;
  grid-row: span 2;
  display: flex;
  align-items: center;
`;

export { WebsiteHeader };
