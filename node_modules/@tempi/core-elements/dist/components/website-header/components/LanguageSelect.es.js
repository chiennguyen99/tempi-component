import { jsxs, jsx } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { useRef, useState } from 'react';
import { Icon } from '@tempi/icons';
import { Alignment, getStyle, TEMPI_MAIN_IFRAME } from '@tempi/core-renderer';
import { LIGHT_ACTIVE_ITEM_BACKGROUND_COLOR, DARK_ACTIVE_ITEM_BACKGROUND_COLOR, MOBILE_WIDTH } from '../constants.es.js';
import { isLightColor } from '../utils.es.js';
import { getAttrTracking } from '../../../utils/track.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const capitalizeFirstLetter = (string) => {
  return (string == null ? void 0 : string.charAt(0).toUpperCase()) + (string == null ? void 0 : string.slice(1).toLowerCase());
};
const LanguageSelect = (props) => {
  const selectLanguageRef = useRef(null);
  const [open, setOpen] = useState(false);
  const {
    flagSize = 20,
    flagStyle = "round",
    layout = "full",
    showFlag = true,
    isEditingMode = false,
    device = "desktop",
    align = Alignment.right,
    currentLanguage,
    setCurrentLanguage,
    languages = [],
    languageCommonStyle
  } = props || {};
  const isShowFlag = showFlag || layout === "flag";
  const isRoundIcon = flagStyle === "round";
  const isShortLayout = layout === "short";
  if (!currentLanguage || (languages || []).length <= 1) {
    return null;
  }
  const onClickSelectLanguage = () => {
    var _a;
    const pageContainer = ((_a = document == null ? void 0 : document.querySelector(`#${TEMPI_MAIN_IFRAME}`)) == null ? void 0 : _a.contentWindow) || window;
    const isOpen = !open;
    setOpen(isOpen);
    if (isOpen) {
      pageContainer.addEventListener(
        "click",
        outsideClickSelectLanguage,
        false
      );
    }
  };
  const outsideClickSelectLanguage = (e) => {
    var _a, _b;
    const pageContainer = ((_a = document == null ? void 0 : document.querySelector(`#${TEMPI_MAIN_IFRAME}`)) == null ? void 0 : _a.contentWindow) || window;
    if (!((_b = selectLanguageRef.current) == null ? void 0 : _b.contains(e.target))) {
      setOpen(false);
      pageContainer.removeEventListener(
        "click",
        outsideClickSelectLanguage,
        false
      );
    }
  };
  const languageDisplayName = (language) => {
    var _a;
    return isShortLayout ? (_a = language.languageCode) == null ? void 0 : _a.toUpperCase() : language.languageLocalizeName;
  };
  return /* @__PURE__ */ jsxs(Wrapper, {
    style: { position: "relative" },
    onClick: () => onClickSelectLanguage(),
    device,
    align,
    ref: selectLanguageRef,
    children: [
      /* @__PURE__ */ jsxs(DropdownTrigger, {
        children: [
          isShowFlag && /* @__PURE__ */ jsx(Icon, {
            name: `${capitalizeFirstLetter(
              currentLanguage.countryCode
            )}Flags`,
            style: {
              fontSize: flagSize,
              borderRadius: isRoundIcon ? "50%" : "0",
              backgroundSize: isRoundIcon ? "cover" : "contain"
            }
          }),
          layout !== "flag" && /* @__PURE__ */ jsxs(LanguageName, {
            languageCommonStyle,
            children: [
              languageDisplayName(currentLanguage),
              /* @__PURE__ */ jsx(Icon, {
                name: "DownOutlined",
                style: { marginLeft: "0.4em", fontSize: "1.1em" }
              })
            ]
          })
        ]
      }),
      open && /* @__PURE__ */ jsx(OptionsWrapper, {
        device,
        commonStyle: languageCommonStyle,
        flagSize,
        children: languages.map((language) => {
          var _a;
          return /* @__PURE__ */ jsxs(Option, __spreadProps(__spreadValues({
            className: language.languageCode === currentLanguage.languageCode ? "option-lang active" : "option-lang",
            onClick: () => {
              if (!isEditingMode)
                setCurrentLanguage(language);
            },
            activeColor: isLightColor(languageCommonStyle == null ? void 0 : languageCommonStyle.background) ? LIGHT_ACTIVE_ITEM_BACKGROUND_COLOR : DARK_ACTIVE_ITEM_BACKGROUND_COLOR
          }, getAttrTracking({
            regionName: "header",
            contentName: language.languageCode,
            target: ((_a = window == null ? void 0 : window.location) == null ? void 0 : _a.origin) + "/" + language.languageCode
          })), {
            children: [
              isShowFlag && /* @__PURE__ */ jsx(Icon, {
                name: `${capitalizeFirstLetter(language.countryCode)}Flags`,
                style: {
                  fontSize: flagSize,
                  display: showFlag ? "block" : "none",
                  borderRadius: isRoundIcon ? "50%" : "0",
                  backgroundSize: isRoundIcon ? "cover" : "contain"
                }
              }),
              /* @__PURE__ */ jsx(LanguageName, {
                languageCommonStyle,
                children: languageDisplayName(language)
              })
            ]
          }), language.languageCode);
        })
      })
    ]
  });
};
const Wrapper = styled.div(
  ({ device, align }) => `
position: relative;
${align === "left" ? "margin-right: 1em;" : "margin-left: 1em;"}

${device === "desktop" ? ` @media screen and (max-width: ${MOBILE_WIDTH}px){
      display: none;
    }` : `
    @media screen and (min-width: ${MOBILE_WIDTH}px){
      display: none;
    }
  `}
`
);
const DropdownTrigger = styled.div`
  position: relative;
  display: flex;
  align-items: center;
  gap: 0.5em;
  cursor: pointer;
`;
const OptionsWrapper = styled.div(
  ({ device, commonStyle, flagSize }) => `
  display: flex;
  flex-direction: column;
  background: ${(commonStyle == null ? void 0 : commonStyle.background) || "white"};
  ${device === "desktop" ? `
    position: absolute;
    top: ${20 + Math.max(+commonStyle.fontSize, flagSize, 0)}px;
    left: -1em;
    ` : `
    position: unset;
    margin-top: 1em;
    
    `}
  border-radius: 6px;
  box-shadow: 0px 4px 20px 0px #a5a3ae66;
  overflow: hidden;
  z-index: 1;

`
);
const Option = styled.div(
  ({ activeColor }) => `
  display: flex;
  align-items: center;
  gap: 0.5em;
  cursor: pointer;
  padding: 0.5em 1em;
  padding-right: 2em;
  white-space: nowrap;

  &:hover,
  &.active {
    background: ${activeColor};
  }
`
);
const LanguageName = styled.span(
  ({ languageCommonStyle }) => {
    const _a = languageCommonStyle || {}, rest = __objRest(_a, ["hover", "background"]);
    return getStyle(rest);
  }
);

export { LanguageSelect, capitalizeFirstLetter };
