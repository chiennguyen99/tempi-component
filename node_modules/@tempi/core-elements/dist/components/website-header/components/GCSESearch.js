import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { t } from '../../../i18n';
import styled from '@emotion/styled';
import { Search24Filled } from '@fluentui/react-icons';
import { debounce } from '@tempi/core-renderer';
import { Input, Modal } from 'antd';
import { useCallback, useEffect, useState } from 'react';
import { getIconCompoment } from '../../../utils';
const Search = styled.div `
  grid-column: last-col / span 1;
  grid-row: span 2;
  margin-left: 16px;
  cursor: pointer;
`;
export const GCSESearch = ({ searchConfig, isEditingMode, }) => {
    const IconComponent = getIconCompoment(searchConfig === null || searchConfig === void 0 ? void 0 : searchConfig.icon);
    const [searchQuery, setSearchQuery] = useState('');
    const [searchModalOpen, setSearchModalOpen] = useState(false);
    const [gsceLoaded, setGsceLoaed] = useState(false);
    const handleOnchange = (e) => {
        e.preventDefault();
        e.stopPropagation();
        const value = e.target.value;
        setSearchQuery(value);
        if (value) {
            debounceSearch(value);
        }
    };
    const debounceSearch = useCallback(debounce((query) => {
        const customSearchElement = document === null || document === void 0 ? void 0 : document.querySelector('.gsc-search-box');
        if (customSearchElement) {
            const input = customSearchElement.querySelector('input[name="search"]');
            const button = customSearchElement.querySelector('button.gsc-search-button');
            if (input instanceof HTMLInputElement &&
                button instanceof HTMLButtonElement) {
                const site = window.location.host;
                input.value = `site:${site} ${query}`;
                button.click();
            }
        }
    }, 500), []);
    useEffect(() => {
        var _a;
        if (searchModalOpen && !gsceLoaded) {
            const newScript = document === null || document === void 0 ? void 0 : document.createElement('script');
            newScript.src = 'https://cse.google.com/cse.js?cx=16c5e2cb604dc499b';
            newScript.async = true;
            (_a = document === null || document === void 0 ? void 0 : document.body) === null || _a === void 0 ? void 0 : _a.appendChild(newScript);
            setGsceLoaed(true);
        }
    }, [searchModalOpen]);
    const onOpenSearchModal = () => {
        if (!isEditingMode) {
            setSearchModalOpen(true);
        }
    };
    const onCloseSearchModal = () => {
        setSearchQuery('');
        setSearchModalOpen(false);
    };
    if (!(searchConfig === null || searchConfig === void 0 ? void 0 : searchConfig.show))
        return null;
    return (_jsxs(_Fragment, { children: [_jsx(Search, Object.assign({ onClick: onOpenSearchModal }, { children: IconComponent })), _jsxs(SearchWrapper, Object.assign({ open: searchModalOpen, closeIcon: false, onCancel: onCloseSearchModal, footer: false }, { children: [_jsx(StyledInput, { prefix: _jsx(Search24Filled, {}), placeholder: t('Tìm kiếm'), value: searchQuery, onChange: (e) => handleOnchange(e), onPressEnter: () => debounceSearch(searchQuery), size: "large" }), _jsx("div", { className: "gcse-searchresults-only" })] }))] }));
};
const StyledInput = styled(Input) `
  border: 0;
  outline: 0;
  box-shadow: unset;
  padding: 16px;
`;
const SearchWrapper = styled(Modal) `
  .ant-modal-content {
    padding: 0;
  }

  .gsc-control-cse {
    padding: 0;
    border: 0;
    border-radius: 0 0 8px 8px;
  }

  .gsc-results-wrapper-overlay {
    position: relative !important;
    padding: 0;
    border: 0;
    width: 100%;
    left: 0;
    top: 0;
    max-height: 70vh;
    border-radius: 0 0 8px 8px;
  }

  .gsc-results-wrapper-visible {
    padding: 30px;
  }

  .gsc-results-close-btn-visible {
    display: none;
  }

  .gsc-modal-background-image {
    opacity: 0.1;
  }
`;
