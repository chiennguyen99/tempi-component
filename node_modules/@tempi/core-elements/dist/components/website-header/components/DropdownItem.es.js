import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { MOBILE_WIDTH } from '../constants.es.js';
import { ItemContentWrapper, ItemContent, ItemIcon, Item, ItemLabel } from './Item.es.js';
import { Alignment } from '@tempi/core-renderer';
import { getTargetUrl, getUrlOfMenuItem } from '../../../utils/menu.es.js';
import { getAttrTracking } from '../../../utils/track.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const DropdownItem = ({ item, grid, alignMenu, isEditingMode, background, prefixLangUrl }) => {
  var _a;
  const id = `dropdown-${item.id}`;
  const { menuColor } = grid;
  return /* @__PURE__ */ jsx(Fragment, {
    children: /* @__PURE__ */ jsxs(StyledLabel, {
      htmlFor: id,
      children: [
        /* @__PURE__ */ jsx("input", {
          type: "checkbox",
          id,
          value: ""
        }),
        /* @__PURE__ */ jsxs(ItemContentWrapper, __spreadProps(__spreadValues({
          alignMenu,
          hoverColor: grid.menuHoverColor,
          isActive: item == null ? void 0 : item.isActive
        }, getAttrTracking({
          regionName: "header",
          contentName: item == null ? void 0 : item.name,
          target: getUrlOfMenuItem(item, isEditingMode, prefixLangUrl)
        })), {
          children: [
            /* @__PURE__ */ jsxs(ItemContent, __spreadProps(__spreadValues({
              grid,
              alignMenu,
              target: getTargetUrl(item.target),
              isActive: item == null ? void 0 : item.isActive,
              href: getUrlOfMenuItem(item, isEditingMode, prefixLangUrl)
            }, (item == null ? void 0 : item.linkType) === "LINK" && item.nofollow ? { rel: "nofollow" } : {}), {
              children: [
                (item == null ? void 0 : item.iconUrl) && /* @__PURE__ */ jsx(ItemIcon, {
                  src: item.iconUrl,
                  loading: "lazy"
                }),
                item == null ? void 0 : item.name
              ]
            })),
            /* @__PURE__ */ jsx(DropdownIcon, {
              alignMenu,
              color: menuColor
            })
          ]
        })),
        /* @__PURE__ */ jsx(SubMenu, {
          className: "sub-menu",
          grid,
          children: /* @__PURE__ */ jsx(SubMenuContent, {
            grid,
            background,
            children: (_a = item == null ? void 0 : item.children) == null ? void 0 : _a.map((child, i) => /* @__PURE__ */ jsx(Item, {
              children: /* @__PURE__ */ jsx(ItemLabel, {
                children: /* @__PURE__ */ jsx(ItemContentWrapper, __spreadProps(__spreadValues({
                  alignMenu,
                  hoverColor: grid == null ? void 0 : grid.menuHoverColor
                }, getAttrTracking({
                  regionName: "header",
                  contentName: child == null ? void 0 : child.name,
                  target: getUrlOfMenuItem(
                    child,
                    isEditingMode,
                    prefixLangUrl
                  )
                })), {
                  children: /* @__PURE__ */ jsxs(ItemContent, __spreadProps(__spreadValues({
                    grid: __spreadProps(__spreadValues({}, grid), { menuItemSpacing: null }),
                    alignMenu,
                    target: getTargetUrl(item.target),
                    isActive: child == null ? void 0 : child.isActive,
                    href: getUrlOfMenuItem(
                      child,
                      isEditingMode,
                      prefixLangUrl
                    )
                  }, (child == null ? void 0 : child.linkType) === "LINK" && child.nofollow && { rel: "nofollow" }), {
                    children: [
                      (child == null ? void 0 : child.iconUrl) && /* @__PURE__ */ jsx(ItemIcon, {
                        src: child.iconUrl,
                        loading: "lazy"
                      }),
                      child == null ? void 0 : child.name
                    ]
                  }))
                }))
              })
            }, i))
          })
        })
      ]
    })
  });
};
const StyledLabel = styled(ItemLabel)`
  cursor: pointer;

  input {
    display: none;
    position: absolute;
    width: 0;
    height: 0;
    opacity: 0;
  }

  svg {
    transition: transform 0.3s;
  }

  @media screen and (min-width: ${MOBILE_WIDTH}px) {
    &:hover {
      .sub-menu {
        display: block;

        ul {
          max-height: 400px;
          overflow-y: auto;
          display: block;

          li {
            padding: 5px 0;
          }
        }
      }
      svg {
        transform: rotate(180deg);
      }
    }
  }

  @media screen and (max-width: ${MOBILE_WIDTH}px) {
    input[type='checkbox']:checked ~ {
      .sub-menu {
        display: block;
      }

      div {
        svg {
          transform: rotate(180deg);
        }
      }
    }
  }
`;
const DropdownIconWrapper = styled.span`
  all: unset;
  display: flex;
  margin-left: 8px;
  cursor: pointer;
  border: 1px solid transparent;
  border-radius: 3px;
  transition: border 0.3s;

  @media screen and (max-width: ${MOBILE_WIDTH}px) {
    display: inline-block;
  }
`;
const DropdownIcon = ({ alignMenu, color }) => {
  let gridColumn;
  let gridRow;
  switch (alignMenu) {
    case Alignment.left:
      gridColumn = "3/4";
      break;
    case Alignment.center:
      gridColumn = "3/4";
      break;
    case Alignment.right:
      gridRow = "1";
      gridColumn = "1/2";
      break;
  }
  return /* @__PURE__ */ jsx("div", {
    style: { gridColumn, gridRow, color },
    children: /* @__PURE__ */ jsx(DropdownIconWrapper, {
      children: /* @__PURE__ */ jsx("svg", {
        width: "10",
        height: "7",
        viewBox: "0 0 10 7",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        "data-v-b930357f": "",
        children: /* @__PURE__ */ jsx("path", {
          d: "M5 6.5L0.669873 0.5L9.33013 0.500001L5 6.5Z",
          fill: "currentColor",
          "data-v-b930357f": ""
        })
      })
    })
  });
};
const SubMenu = styled.div(
  ({ grid }) => `
  position: absolute;
  z-index: 1;
  display: none;
  padding-top: 10px;
  padding-right: 16px;
  padding-bottom: 48px;

  margin-left: ${grid.menuItemSpacing}px;

  @media screen and (max-width: ${MOBILE_WIDTH}px){
    position: unset;
    padding: 8px 0;
    margin-top: 8px;
    margin-bottom: 8px;
  }
`
);
const SubMenuContent = styled.ul(
  ({ grid, background }) => `
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;
  padding: 16px 24px;
  gap: 10px;
  list-style: none;
  border-radius: 5px;
  box-shadow: 0 2px 10px #0000001a;
  animation: expand-5b652f62 0.2s cubic-bezier(0.45, 0, 0.1, 1);
  background: ${background};


  @media screen and (max-width: ${MOBILE_WIDTH}px) {
    padding: 0;
    background-color: transparent;
    box-shadow: none;
    align-items: ${grid.navigationJustifySelf};
  }
`
);

export { DropdownItem };
