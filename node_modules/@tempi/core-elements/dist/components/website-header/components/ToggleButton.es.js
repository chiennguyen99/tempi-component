import { jsxs, jsx } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { MOBILE_WIDTH } from '../constants.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const Toggle = styled.button(({ grid }) => {
  const {
    linksGridRow,
    linksGridColumn,
    navigationJustifySelf,
    navigationTextAlign,
    menuColor
  } = grid;
  const mobileLinksGridRow = linksGridRow;
  const mobileLinksGridColumn = linksGridColumn;
  const mobileNavigationJustifySelf = navigationJustifySelf;
  const mobileNavigationTextAlign = navigationTextAlign;
  return `
  
    display: none;
    grid-row: ${linksGridRow};
    grid-column: ${linksGridColumn};
    justify-self: ${navigationJustifySelf};
    text-align: ${navigationTextAlign}; 
  
    width: 24px;
    height: 18px;
    cursor: pointer;
    background-color: transparent;
    transition: all .4s ease-in-out .1s;
    transform: rotate(0);
  
    border: none;
    outline: none;
    box-shadow: none;
    
    &:focus{
      outline: none;
    }
  
    span{
      position: absolute;
      display: block;
      width: 100%;
      height: 2px;
      background: ${menuColor || "#7367f0"};
      border-radius: 2px;
      transition: all .25s ease-in-out .1s;
      transform: rotate(0);
      transform-origin: left center;
    }
  
    span:nth-of-type(1){
      top: 0;
    } 
    span:nth-of-type(2){
      top: 8px;
    } 
    span:nth-of-type(3){
      top: 16px;
    } 
  
    &.open {
      span:nth-of-type(1){
        top: -1px;
        transform: rotate(45deg);
      } 
      span:nth-of-type(2){
        width: 0%;
        opacity: 0;
      } 
      span:nth-of-type(3){
        transform: rotate(-45deg);
      } 
    }
    
    @media screen and (max-width: ${MOBILE_WIDTH}px){
        display: block;
        grid-row: ${mobileLinksGridRow};
        grid-column: ${mobileLinksGridColumn};
        justify-self: ${mobileNavigationJustifySelf};
        text-align: ${mobileNavigationTextAlign};
    }
    `;
});
const ToggleButton = (props) => {
  return /* @__PURE__ */ jsxs(Toggle, __spreadProps(__spreadValues({}, props), {
    children: [
      /* @__PURE__ */ jsx("span", {}),
      /* @__PURE__ */ jsx("span", {}),
      /* @__PURE__ */ jsx("span", {})
    ]
  }));
};

export { ToggleButton };
