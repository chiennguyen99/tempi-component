import { jsx, jsxs } from 'react/jsx-runtime';
import { HeaderV2ContentSetting } from './ContentSetting.es.js';
import { HeaderV2StyleSetting } from './StyleSetting.es.js';
import { HeaderV2QuickSetting } from './QuickSetting.es.js';
import { useNode, useBuilder, crafting } from '@tempi/core-editor';
import { WebsiteHeader } from './ui.es.js';
import { RenderFloatingQuickSetting } from '../../core/RenderFloatingQuickSetting/RenderFloatingQuickSetting.es.js';
import { AddBlockButton } from '../../core/Indicator/AddBlockButton.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const WebsiteHeaderEditor = (props) => {
  const {
    connectors: { connect }
  } = useNode();
  const { menu } = useBuilder();
  return /* @__PURE__ */ jsx("div", {
    ref: connect,
    children: /* @__PURE__ */ jsxs(RenderFloatingQuickSetting, {
      quickSetting: /* @__PURE__ */ jsx(HeaderV2QuickSetting, {}),
      children: [
        /* @__PURE__ */ jsx(WebsiteHeader, __spreadProps(__spreadValues({}, props), {
          menu,
          isEditingMode: true
        })),
        /* @__PURE__ */ jsx(AddBlockButton, {})
      ]
    })
  });
};
WebsiteHeaderEditor.craft = crafting({
  displayName: WebsiteHeader.displayName,
  tag: WebsiteHeader.displayName.toLowerCase(),
  customAttributes: HeaderV2ContentSetting,
  commonAttributes: HeaderV2StyleSetting,
  rules: {
    canDrag: () => false
  }
});

export { WebsiteHeaderEditor };
