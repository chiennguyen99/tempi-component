'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreRenderer = require('@tempi/core-renderer');
var constants = require('./constants.js');
var cloneDeep = require('lodash.clonedeep');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var cloneDeep__default = /*#__PURE__*/_interopDefaultLegacy(cloneDeep);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const calculateGrid = (props) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
  const padding = "30px 16px 30px 16px";
  const width = 1240;
  const menuPosition = ((_a = props == null ? void 0 : props.menuConfig) == null ? void 0 : _a.align) || coreRenderer.Alignment.right;
  const { paddingTop, paddingRight, paddingBottom, paddingLeft } = splitPaddingString(padding);
  const logoShow = (_b = props == null ? void 0 : props.logoConfig) == null ? void 0 : _b.show;
  const logoWidth = (_d = (_c = props == null ? void 0 : props.logoConfig) == null ? void 0 : _c.commonStyle) == null ? void 0 : _d.width;
  const spaceBetweenMenu = ((_e = props == null ? void 0 : props.logoConfig) == null ? void 0 : _e.spacingWithMenu) || constants.DEFAULT_WEBSITE_HEADER_DESKTOP.logoConfig.spacingWithMenu;
  const logoPosition = ((_f = props == null ? void 0 : props.logoConfig) == null ? void 0 : _f.align) || coreRenderer.Alignment.left;
  const gridArea = "1/1/-1/-1";
  const backgroundOverlayOpacity = 0;
  const menuItemSpacing = (_h = (_g = props == null ? void 0 : props.menuConfig) == null ? void 0 : _g.commonStyle) == null ? void 0 : _h.columnGap;
  const backgroundColor = (_i = props == null ? void 0 : props.commonStyle) == null ? void 0 : _i.backgroundColor;
  const background = (_j = props == null ? void 0 : props.commonStyle) == null ? void 0 : _j.background;
  const menuColor = (_l = (_k = props == null ? void 0 : props.menuItemConfig) == null ? void 0 : _k.commonStyle) == null ? void 0 : _l.color;
  const menuHoverColor = (_o = (_n = (_m = props == null ? void 0 : props.menuItemConfig) == null ? void 0 : _m.commonStyle) == null ? void 0 : _n.hover) == null ? void 0 : _o.color;
  const menuFontSize = (_q = (_p = props == null ? void 0 : props.menuItemConfig) == null ? void 0 : _p.commonStyle) == null ? void 0 : _q.fontSize;
  const menuFontStyle = (_s = (_r = props == null ? void 0 : props.menuItemConfig) == null ? void 0 : _r.commonStyle) == null ? void 0 : _s.fontStyle;
  const menuFontWeight = (_u = (_t = props == null ? void 0 : props.menuItemConfig) == null ? void 0 : _t.commonStyle) == null ? void 0 : _u.fontWeight;
  const menuTextDecoration = (_w = (_v = props == null ? void 0 : props.menuItemConfig) == null ? void 0 : _v.commonStyle) == null ? void 0 : _w.textDecoration;
  const mobilePaddingTop = 24;
  const mobilePadding = "24px 16px 24px 16px";
  const mobilePaddingRight = 16;
  const mobilePaddingBottom = 24;
  const mobilePaddingLeft = 16;
  const mobileLogoWidth = 70;
  const mobileMenuItemSpacing = 20;
  const mobileLogoGridRow = "1/2";
  const mobileLogoGridColumn = "1/2";
  const mobileLogoJustifySelf = "flex-start";
  const mobileLogoImageObjectPosition = "left center";
  const mobileLinksGridRow = "1/2";
  const mobileLinksGridColumn = "2/3";
  const mobileLogoSpacing = `0 ${spaceBetweenMenu}px 0 0`;
  const mobileDropdownBackgroundColor = "#dcdcdc";
  const mobileBackground = background || backgroundColor;
  const languageSelectPosition = ((_x = props == null ? void 0 : props.languageConfig) == null ? void 0 : _x.align) || coreRenderer.Alignment.right;
  let navigationGridTemplateColumns;
  let mobileNavigationGridTemplateColumns;
  navigationGridTemplateColumns = getNavigationGridTemplateColumns({
    logoPosition,
    menuPosition,
    logoWidth,
    spaceBetweenMenu,
    languageSelectPosition
  });
  mobileNavigationGridTemplateColumns = getNavigationGridTemplateColumns({
    logoPosition,
    menuPosition,
    logoWidth,
    spaceBetweenMenu,
    device: "mobile",
    mobileLogoWidth
  });
  if (!logoShow) {
    navigationGridTemplateColumns = "1fr";
    mobileNavigationGridTemplateColumns = "1fr";
  }
  const logoGridColumn = getLogoGridColumn(
    logoPosition,
    menuPosition,
    languageSelectPosition
  );
  let logoGridRow = "1/2";
  let logoSpacing = `0 ${spaceBetweenMenu}px 0 0`;
  let logoJustifySelf;
  switch (logoPosition) {
    case "left":
      logoJustifySelf = "flex-start";
      logoSpacing = `0 ${spaceBetweenMenu}px 0 0`;
      break;
    case "center":
      logoJustifySelf = "center";
      if (menuPosition === "center") {
        logoSpacing = `0 0 ${spaceBetweenMenu}px 0`;
        logoGridRow = "0/2";
      } else {
        logoSpacing = `0 ${spaceBetweenMenu}px`;
      }
      break;
    case "right":
      logoJustifySelf = "flex-end";
      logoSpacing = `0 0 0 ${spaceBetweenMenu}px`;
      break;
  }
  const logoImageObjectPosition = `${logoPosition} center`;
  const leftLanguageSelectGridColumn = logoPosition === "left" ? "2/3" : "1/2";
  let linksGridRow = "1/2";
  let linksGridColumn = "2/3";
  let navigationJustifySelf = "flex-end";
  const navigationTextAlign = menuPosition || "right";
  const mobileNavigationTextAlign = menuPosition || "right";
  let mobileNavigationJustifySelf = "flex-end";
  switch (menuPosition) {
    case "left":
      navigationJustifySelf = "flex-start";
      mobileNavigationJustifySelf = "flex-start";
      break;
    case "center":
      navigationJustifySelf = "center";
      mobileNavigationJustifySelf = "center";
      break;
    case "right":
      navigationJustifySelf = "flex-end";
      mobileNavigationJustifySelf = "flex-end";
      break;
  }
  linksGridColumn = getLinksGridColumn(
    logoPosition,
    menuPosition,
    languageSelectPosition
  );
  if (logoPosition === "center" && menuPosition === "center") {
    linksGridRow = "2/2";
  }
  if (!logoShow) {
    linksGridColumn = "1/2";
  }
  return {
    gridArea,
    navigationGridTemplateColumns,
    padding,
    paddingTop,
    paddingRight,
    paddingBottom,
    paddingLeft,
    width,
    logoGridRow,
    logoGridColumn,
    logoJustifySelf,
    logoSpacing,
    logoWidth,
    logoImageObjectPosition,
    linksGridRow,
    linksGridColumn,
    navigationJustifySelf,
    menuItemSpacing,
    navigationTextAlign,
    menuColor,
    menuHoverColor,
    menuFontSize,
    menuFontStyle,
    menuFontWeight,
    menuTextDecoration,
    mobilePadding,
    mobilePaddingTop,
    mobilePaddingRight,
    mobilePaddingBottom,
    mobilePaddingLeft,
    mobileLogoWidth,
    mobileMenuItemSpacing,
    mobileNavigationGridTemplateColumns,
    mobileLogoGridRow,
    mobileLogoGridColumn,
    mobileLogoJustifySelf,
    mobileLogoImageObjectPosition,
    mobileLinksGridRow,
    mobileLinksGridColumn,
    mobileLogoSpacing,
    mobileNavigationTextAlign,
    mobileNavigationJustifySelf,
    mobileDropdownBackgroundColor,
    mobileBackground,
    backgroundOverlayOpacity,
    leftLanguageSelectGridColumn
  };
};
const splitPaddingString = (paddingString) => {
  const paddingValues = paddingString.split(" ");
  const result = {};
  if (paddingValues[0]) {
    result.paddingTop = parseInt(paddingValues[0].replace("px", ""));
  }
  if (paddingValues[1]) {
    result.paddingRight = parseInt(paddingValues[1].replace("px", ""));
  }
  if (paddingValues[2]) {
    result.paddingBottom = parseInt(paddingValues[2].replace("px", ""));
  }
  if (paddingValues[3]) {
    result.paddingLeft = parseInt(paddingValues[3].replace("px", ""));
  }
  return result;
};
const getNavigationGridTemplateColumns = ({
  logoPosition,
  menuPosition,
  logoWidth,
  spaceBetweenMenu,
  device,
  mobileLogoWidth,
  languageSelectPosition
}) => {
  const logoWidthWithSpace = (device === "desktop" ? logoWidth : mobileLogoWidth || logoWidth) + spaceBetweenMenu;
  const logoWidthWithSpaceAuto = `minmax(${logoWidthWithSpace}px, auto)`;
  switch (logoPosition) {
    case coreRenderer.Alignment.left:
      switch (menuPosition) {
        case coreRenderer.Alignment.left:
          if (languageSelectPosition === coreRenderer.Alignment.left) {
            return `${logoWidthWithSpaceAuto} auto 1fr auto`;
          }
          return `${logoWidthWithSpaceAuto} 1fr auto`;
        case coreRenderer.Alignment.center:
          if (languageSelectPosition === coreRenderer.Alignment.left) {
            return `minmax(${logoWidthWithSpace}px, auto) 1fr auto 1fr auto`;
          }
          return `minmax(${logoWidthWithSpace}px, 1fr) auto 1fr auto`;
        case coreRenderer.Alignment.right:
          if (languageSelectPosition === coreRenderer.Alignment.left) {
            return `${logoWidthWithSpaceAuto} auto 1fr auto`;
          }
          return `${logoWidthWithSpaceAuto} 1fr auto`;
      }
    case coreRenderer.Alignment.center:
      switch (menuPosition) {
        case coreRenderer.Alignment.left:
          if (languageSelectPosition === coreRenderer.Alignment.left) {
            return `auto 1fr ${logoWidthWithSpaceAuto} auto`;
          }
          return `1fr ${logoWidthWithSpaceAuto} 1fr auto`;
        case coreRenderer.Alignment.center:
          return `1fr minmax(${logoWidth}px, auto) 1fr auto`;
        case coreRenderer.Alignment.right:
          return `1fr ${logoWidthWithSpaceAuto} 1fr auto`;
      }
    case coreRenderer.Alignment.right:
      switch (menuPosition) {
        case coreRenderer.Alignment.left:
          if (languageSelectPosition === coreRenderer.Alignment.left) {
            return `auto 1fr ${logoWidthWithSpaceAuto} auto`;
          }
          return `1fr ${logoWidthWithSpaceAuto} auto`;
        case coreRenderer.Alignment.center:
          return `1fr auto minmax(${logoWidthWithSpace}px, 1fr) auto`;
        case coreRenderer.Alignment.right:
          return `1fr ${logoWidthWithSpaceAuto} auto`;
      }
  }
};
const getLinksGridColumn = (logoPosition, menuPosition, languageSelectPosition) => {
  switch (logoPosition) {
    case coreRenderer.Alignment.left:
      if (languageSelectPosition === coreRenderer.Alignment.left) {
        return "3/4";
      }
      return "2/3";
    case coreRenderer.Alignment.center:
      switch (menuPosition) {
        case coreRenderer.Alignment.left:
          if (languageSelectPosition === coreRenderer.Alignment.left) {
            return "2/3";
          }
          return `1/2`;
        case coreRenderer.Alignment.center:
          return `1/4`;
        case coreRenderer.Alignment.right:
          return `3/4`;
      }
    case coreRenderer.Alignment.right:
      switch (menuPosition) {
        case coreRenderer.Alignment.left:
          if (languageSelectPosition === coreRenderer.Alignment.left) {
            return "2/3";
          }
          return `1/2`;
        case coreRenderer.Alignment.right:
          return `1/2`;
        case coreRenderer.Alignment.center:
          return `2/3`;
      }
  }
};
const getLogoGridColumn = (logoPosition, menuPosition, languageSelectPosition) => {
  switch (logoPosition) {
    case coreRenderer.Alignment.left:
      return "1/2";
    case coreRenderer.Alignment.center:
      return "2/3";
    case coreRenderer.Alignment.right:
      switch (menuPosition) {
        case coreRenderer.Alignment.left:
          if (languageSelectPosition === coreRenderer.Alignment.left) {
            return "3/4";
          }
          return "2/3";
        case coreRenderer.Alignment.right:
          return `2/3`;
        case coreRenderer.Alignment.center:
          return `3/4`;
      }
  }
};
const getFlattenTreeActiveMenu = (originMenu, activeSlug) => {
  const cloneMenu = cloneDeep__default["default"](originMenu);
  const level1 = cloneMenu.filter((el) => !el.parentId && !el.isHidden);
  let hasActive = false;
  if (!activeSlug)
    hasActive = true;
  return level1.map((item) => {
    var _a;
    const children = cloneMenu.filter(
      (child) => child.parentId === item.id && !child.isHidden
    );
    if (!hasActive) {
      item.isActive = ((_a = item.page) == null ? void 0 : _a.slug) === activeSlug;
      if (item.isActive) {
        hasActive = true;
      } else {
        const activeChild = children.find(
          (child) => {
            var _a2;
            return ((_a2 = child.page) == null ? void 0 : _a2.slug) === activeSlug;
          }
        );
        if (activeChild) {
          activeChild.isActive = true;
          item.isActive = true;
          hasActive = true;
        }
      }
    }
    return __spreadProps(__spreadValues({}, item), {
      children
    });
  });
};
const isLightColor = (input) => {
  const rgba = /^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*[\d.]+)?\)$/.exec(input);
  const hex = /^#([a-f\d]{3}){1,2}$/.exec(input);
  let r, g, b;
  if (rgba) {
    [r, g, b] = rgba.slice(1, 4).map(Number);
  } else if (hex) {
    const fullHex = hex[1].length === 3 ? hex[1].split("").map((x) => x + x).join("") : hex[1];
    [r, g, b] = [0, 2, 4].map(
      (offset) => parseInt(fullHex.substring(offset, offset + 2), 16)
    );
  } else {
    console.error("Invalid color format");
  }
  r /= 255;
  g /= 255;
  b /= 255;
  return (Math.max(r, g, b) + Math.min(r, g, b)) / 2 >= 0.5;
};

exports.calculateGrid = calculateGrid;
exports.getFlattenTreeActiveMenu = getFlattenTreeActiveMenu;
exports.isLightColor = isLightColor;
exports.splitPaddingString = splitPaddingString;
