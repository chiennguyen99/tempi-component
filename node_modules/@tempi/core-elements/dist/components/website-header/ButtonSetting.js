'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var styled = require('@emotion/styled');
var coreEditor = require('@tempi/core-editor');
var React = require('react');
var constants = require('./constants.js');
var propKey = require('../../constants/propKey.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

const ButtonSetting = () => {
  return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: /* @__PURE__ */ jsxRuntime.jsx(coreEditor.FormItem, {
      layout: "vertical",
      children: /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ItemListConfig, {
        maxItem: 2,
        activeItemConfig: ActionButtonConfig,
        defaultItem: constants.DEFAULT_BUTTONS[0],
        propKey: propKey.PROP_KEY.ActionButtons,
        addItemText: i18n.t("Th\xEAm n\xFAt"),
        titleKey: propKey.PROP_KEY.Text
      })
    })
  });
};
const ActionButtonConfig = ({ index }) => {
  const [borderwidth, setBorderWidth] = coreEditor.usePropSeparateDevice(
    propKey.PROP_KEY.joinKey(
      propKey.PROP_KEY.ActionButtons,
      index.toString(),
      propKey.PROP_KEY.ButtonStyle,
      propKey.PROP_KEY.BorderWidth
    )
  );
  const [borderColor] = coreEditor.usePropSeparateDevice(
    propKey.PROP_KEY.joinKey(
      propKey.PROP_KEY.ActionButtons,
      index.toString(),
      propKey.PROP_KEY.ButtonStyle,
      propKey.PROP_KEY.BorderColor
    )
  );
  React.useEffect(() => {
    if (borderColor && !borderwidth) {
      setBorderWidth(1);
    } else if (borderwidth && !borderColor) {
      setBorderWidth(0);
    }
  }, [borderColor]);
  return /* @__PURE__ */ jsxRuntime.jsxs(StyledButtonContent, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ModalConfigWrapper, {
        customModalProps: {
          propKey: propKey.PROP_KEY.joinKey(propKey.PROP_KEY.ActionButtons, index.toString()),
          listOptions: ["link", "openPageOfWebsite"]
        },
        title: i18n.t("S\u1EF1 ki\u1EC7n click"),
        customModal: coreEditor.EventConfig
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputConfig, {
        formItemProps: { layout: "vertical", label: i18n.t("Ti\xEAu \u0111\u1EC1") },
        inputProps: {
          placeholder: i18n.t("Nh\u1EADp ch\u1EEF (t\u1ED1i \u0111a 20 k\xFD t\u1EF1)"),
          maxLength: 20
        },
        propKey: propKey.PROP_KEY.joinKey(
          propKey.PROP_KEY.ActionButtons,
          index.toString(),
          propKey.PROP_KEY.Text
        )
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.RangeSliderConfig, {
        sliderProps: { min: 50, max: 200, step: 1 },
        propKey: propKey.PROP_KEY.joinKey(
          propKey.PROP_KEY.ActionButtons,
          index.toString(),
          propKey.PROP_KEY.ButtonStyle,
          propKey.PROP_KEY.Width
        ),
        formItemProps: { label: i18n.t("Chi\u1EC1u r\u1ED9ng") },
        unitProps: {
          defaultValue: "px"
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.RangeSliderConfig, {
        sliderProps: { min: 20, max: 80, step: 1 },
        propKey: propKey.PROP_KEY.joinKey(
          propKey.PROP_KEY.ActionButtons,
          index.toString(),
          propKey.PROP_KEY.ButtonStyle,
          propKey.PROP_KEY.Height
        ),
        formItemProps: { label: i18n.t("Chi\u1EC1u cao") },
        unitProps: {
          defaultValue: "px"
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.RangeSliderConfig, {
        sliderProps: { min: 0, max: 32, step: 1 },
        propKey: propKey.PROP_KEY.joinKey(
          propKey.PROP_KEY.ActionButtons,
          index.toString(),
          propKey.PROP_KEY.ButtonStyle,
          propKey.PROP_KEY.BorderRadius
        ),
        formItemProps: { label: i18n.t("Bo g\xF3c") },
        unitProps: {
          defaultValue: "px"
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.RangeSliderConfig, {
        sliderProps: { min: 12, max: 72, step: 1, defaultValue: 14 },
        propKey: propKey.PROP_KEY.joinKey(
          propKey.PROP_KEY.ActionButtons,
          index.toString(),
          propKey.PROP_KEY.ButtonStyle,
          propKey.PROP_KEY.FontSize
        ),
        formItemProps: { label: i18n.t("C\u1EE1 ch\u1EEF") },
        unitProps: {
          defaultValue: "px"
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ColorPickerConfig, {
        formItemProps: {
          label: i18n.t("M\xE0u n\u1EC1n")
        },
        propKey: propKey.PROP_KEY.joinKey(
          propKey.PROP_KEY.ActionButtons,
          index.toString(),
          propKey.PROP_KEY.ButtonStyle,
          propKey.PROP_KEY.BackgroundColor
        ),
        gradientPicker: true
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ColorPickerConfig, {
        formItemProps: {
          label: i18n.t("M\xE0u ch\u1EEF")
        },
        propKey: propKey.PROP_KEY.joinKey(
          propKey.PROP_KEY.ActionButtons,
          index.toString(),
          propKey.PROP_KEY.ButtonStyle,
          propKey.PROP_KEY.Color
        )
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ColorPickerConfig, {
        formItemProps: {
          label: i18n.t("M\xE0u vi\u1EC1n")
        },
        propKey: propKey.PROP_KEY.joinKey(
          propKey.PROP_KEY.ActionButtons,
          index.toString(),
          propKey.PROP_KEY.ButtonStyle,
          propKey.PROP_KEY.BorderColor
        )
      })
    ]
  });
};
const StyledButtonContent = styled__default["default"].div`
  padding: 0.5rem;
`;

exports.ButtonSetting = ButtonSetting;
