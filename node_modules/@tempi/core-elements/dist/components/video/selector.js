'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var coreEditor = require('@tempi/core-editor');
var constants = require('./constants.js');
var quickSetting = require('./quick-setting.js');
var setting = require('./setting.js');
var ui = require('./ui.js');
var selector = require('../section/selector.js');
var selector$1 = require('../root/selector.js');

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const VideoEditor = (props) => {
  const { track } = coreEditor.useBuilder();
  const { enabled } = coreEditor.useEditor((state) => ({
    enabled: state.options.enabled
  }));
  const {
    connectors: { connect, drag }
  } = coreEditor.useNode();
  if (!enabled)
    return /* @__PURE__ */ jsxRuntime.jsx(ui.Video, __spreadProps(__spreadValues({}, props), {
      isEditorMode: enabled
    }));
  return /* @__PURE__ */ jsxRuntime.jsx("div", {
    ref: (ref) => connect(drag(ref)),
    style: { cursor: "pointer" },
    children: /* @__PURE__ */ jsxRuntime.jsx(ui.Video, __spreadProps(__spreadValues({
      onClick: (e) => {
        e.preventDefault();
        track == null ? void 0 : track({
          regionName: "videoSetting",
          contentName: "quickSettingBtn"
        });
      }
    }, props), {
      isEditorMode: enabled
    }))
  });
};
VideoEditor.craft = coreEditor.crafting({
  displayName: "Video",
  tag: ui.Video.displayName.toLowerCase(),
  advanceAttributes: coreEditor.AdvanceAttributes,
  quickSetting: quickSetting.VideoQuickSetting,
  customAttributes: setting.VideoSetting,
  props: constants.DEFAULT_VIDEO,
  rules: {
    canDrop: (targetNode) => {
      const ignoreTargets = [
        coreEditor.getEditorName({ RowEditor: selector.RowEditor }),
        coreEditor.getEditorName({ RootEditor: selector$1.RootEditor })
      ];
      return !ignoreTargets.includes(targetNode.data.name);
    }
  }
});

exports.VideoEditor = VideoEditor;
