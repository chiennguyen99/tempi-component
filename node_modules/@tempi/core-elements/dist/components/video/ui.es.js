import { jsx, Fragment } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { youtubeParser, getStyle } from '@tempi/core-renderer';
import React__default from 'react';
import Ytb from 'react-youtube';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const Video = React__default.forwardRef(
  (props, ref) => {
    const _a = props, {
      uploadSrc,
      src,
      isEditorMode = false,
      autoplay = false,
      loop = false,
      showController
    } = _a, rest = __objRest(_a, [
      "uploadSrc",
      "src",
      "isEditorMode",
      "autoplay",
      "loop",
      "showController"
    ]);
    const videoSrc = uploadSrc + "#t=0.001";
    const uploadRender = /* @__PURE__ */ jsx(Fragment, {
      children: /* @__PURE__ */ jsx(StyledVideo, {
        controls: showController,
        autoPlay: autoplay,
        loop,
        muted: true,
        src: videoSrc,
        playsInline: true
      })
    });
    let videoId;
    if (src) {
      videoId = youtubeParser(src);
    }
    const youtubeRender = /* @__PURE__ */ jsx(Fragment, {
      children: /* @__PURE__ */ jsx(StyledYtb, {
        className: isEditorMode ? "editor-mode" : "",
        containerClassName: "container",
        videoId,
        loading: "lazy",
        opts: !isEditorMode ? {
          playerVars: {
            playlist: videoId,
            autoplay: autoplay ? 1 : 0,
            mute: autoplay ? 1 : 0,
            loop: loop ? 1 : 0,
            controls: showController ? 1 : 0
          }
        } : {}
      })
    });
    return /* @__PURE__ */ jsx(StyledWrapper, __spreadProps(__spreadValues({}, rest), {
      ref,
      children: /* @__PURE__ */ jsx(StyledRatio, {
        children: uploadSrc ? uploadRender : youtubeRender
      })
    }));
  }
);
const StyledWrapper = styled.div(
  ({ commonStyle }) => `
    ${getStyle(commonStyle)}
    width: 100%
  `
);
const StyledRatio = styled.div`
  position: relative;
  aspect-ratio: auto 16 / 9;
  .container {
    height: 100%;
  }
`;
const StyledYtb = styled(Ytb)`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  &.editor-mode {
    pointer-events: none;
  }
`;
const StyledVideo = styled.video`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  &.editor-mode {
    pointer-events: none;
  }
`;
Video.displayName = "Video";

export { Video };
