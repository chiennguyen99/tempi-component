import { jsx } from 'react/jsx-runtime';
import { withSelector, useBuilder, useEditor, useProp, AdvanceAttributes, getEditorName } from '@tempi/core-editor';
import { DEFAULT_TABLE } from './constants.es.js';
import { TableQuickSetting } from './quick-setting.es.js';
import { Table } from './ui.es.js';
import { PROP_KEY } from '../../constants/propKey.es.js';
import { TipTapEditorV2 } from '../../configs/TipTapEditor/TipTapEditorV2.es.js';
import { RowEditor } from '../section/selector.es.js';
import { RootEditor } from '../root/selector.es.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const TableEditor = withSelector(
  (_a) => {
    var _b = _a, { id } = _b, rest = __objRest(_b, ["id"]);
    const { track } = useBuilder();
    const { enabled } = useEditor((state) => ({
      enabled: state.options.enabled
    }));
    const [text] = useProp(PROP_KEY.Text);
    if (!enabled)
      return /* @__PURE__ */ jsx(Table, __spreadValues({
        id,
        text
      }, rest));
    return /* @__PURE__ */ jsx(TipTapEditorV2, {
      track: () => track == null ? void 0 : track({
        regionName: "TableEditorSetting",
        contentName: "quickSettingBtn"
      }),
      propKey: PROP_KEY.Text,
      quickSetting: TableQuickSetting,
      children: /* @__PURE__ */ jsx(Table, __spreadValues({}, rest))
    });
  },
  {
    displayName: "B\u1EA3ng",
    tag: Table.displayName.toLowerCase(),
    advanceAttributes: AdvanceAttributes,
    props: DEFAULT_TABLE,
    rules: {
      canDrop: (targetNode) => {
        const ignoreTargets = [
          getEditorName({ RowEditor }),
          getEditorName({ RootEditor })
        ];
        return !ignoreTargets.includes(targetNode.data.name);
      }
    }
  }
);

export { TableEditor };
