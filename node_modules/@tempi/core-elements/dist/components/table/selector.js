'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var coreEditor = require('@tempi/core-editor');
var constants = require('./constants.js');
var quickSetting = require('./quick-setting.js');
var ui = require('./ui.js');
var propKey = require('../../constants/propKey.js');
var TipTapEditorV2 = require('../../configs/TipTapEditor/TipTapEditorV2.js');
var selector = require('../section/selector.js');
var selector$1 = require('../root/selector.js');

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const TableEditor = coreEditor.withSelector(
  (_a) => {
    var _b = _a, { id } = _b, rest = __objRest(_b, ["id"]);
    const { track } = coreEditor.useBuilder();
    const { enabled } = coreEditor.useEditor((state) => ({
      enabled: state.options.enabled
    }));
    const [text] = coreEditor.useProp(propKey.PROP_KEY.Text);
    if (!enabled)
      return /* @__PURE__ */ jsxRuntime.jsx(ui.Table, __spreadValues({
        id,
        text
      }, rest));
    return /* @__PURE__ */ jsxRuntime.jsx(TipTapEditorV2.TipTapEditorV2, {
      track: () => track == null ? void 0 : track({
        regionName: "TableEditorSetting",
        contentName: "quickSettingBtn"
      }),
      propKey: propKey.PROP_KEY.Text,
      quickSetting: quickSetting.TableQuickSetting,
      children: /* @__PURE__ */ jsxRuntime.jsx(ui.Table, __spreadValues({}, rest))
    });
  },
  {
    displayName: "B\u1EA3ng",
    tag: ui.Table.displayName.toLowerCase(),
    advanceAttributes: coreEditor.AdvanceAttributes,
    props: constants.DEFAULT_TABLE,
    rules: {
      canDrop: (targetNode) => {
        const ignoreTargets = [
          coreEditor.getEditorName({ RowEditor: selector.RowEditor }),
          coreEditor.getEditorName({ RootEditor: selector$1.RootEditor })
        ];
        return !ignoreTargets.includes(targetNode.data.name);
      }
    }
  }
);

exports.TableEditor = TableEditor;
