import { jsx } from 'react/jsx-runtime';
import { t } from '../../../i18n.es.js';
import { useProp } from '@tempi/core-editor';
import { Form, Modal, Input } from 'antd';
import { useEffect } from 'react';
import { useFrame } from 'react-frame-component';
import { PROP_KEY } from '../../../constants/propKey.es.js';

const RedirectLinkSetting = ({
  open,
  setOpen
}) => {
  const { document: frameDocument } = useFrame();
  const [form] = Form.useForm();
  const [buttonLink, setButtonLink] = useProp(PROP_KEY.ButtonLink);
  const handlerSaveModal = async (value) => {
    setButtonLink(value.link);
    setOpen(false);
  };
  useEffect(() => {
    if (!!buttonLink && open)
      form.setFieldValue("link", buttonLink);
  }, [open]);
  return /* @__PURE__ */ jsx(Modal, {
    title: t("C\u1EA5u h\xECnh \u0111\u01B0\u1EDDng d\u1EABn"),
    zIndex: 2e3,
    onCancel: () => {
      form.resetFields();
      setOpen(false);
    },
    open,
    okText: t("L\u01B0u"),
    destroyOnClose: true,
    cancelText: t("common.cancel"),
    bodyStyle: { paddingTop: 0 },
    getContainer: () => (frameDocument == null ? void 0 : frameDocument.body) || (document == null ? void 0 : document.body),
    onOk: () => form.submit(),
    cancelButtonProps: {
      shape: "round"
    },
    okButtonProps: {
      shape: "round"
    },
    children: /* @__PURE__ */ jsx(Form, {
      form,
      onFinish: handlerSaveModal,
      layout: "vertical",
      scrollToFirstError: true,
      children: /* @__PURE__ */ jsx(Form.Item, {
        label: t("\u0110\u01B0\u1EDDng d\u1EABn"),
        name: "link",
        children: /* @__PURE__ */ jsx(Input, {
          placeholder: t("Nh\u1EADp \u0111\u01B0\u1EDDng d\u1EABn")
        })
      })
    })
  });
};

export { RedirectLinkSetting };
