'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../../../i18n.js');
var sortable = require('@dnd-kit/sortable');
var coreEditor = require('@tempi/core-editor');
var antd = require('antd');
var React = require('react');
var core = require('@dnd-kit/core');
var uuid = require('uuid');
var reactFrameComponent = require('react-frame-component');
var set = require('lodash.set');
var get = require('lodash.get');
var constants = require('../../constants.js');
var RatingConfig = require('../../../../configs/RatingConfig/RatingConfig.js');
var propKey = require('../../../../constants/propKey.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var set__default = /*#__PURE__*/_interopDefaultLegacy(set);
var get__default = /*#__PURE__*/_interopDefaultLegacy(get);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const ProductListConfigModal = ({
  visible,
  setVisible,
  separateDevice
}) => {
  const { document: frameDocument } = reactFrameComponent.useFrame();
  const itemsPropKey = propKey.PROP_KEY.Items;
  const [items, setItems] = coreEditor.usePropSeparateDevice(itemsPropKey, false, {
    formatter: (val) => {
      var _a, _b;
      return (_b = (_a = val || []).map) == null ? void 0 : _b.call(_a, (el) => __spreadProps(__spreadValues({}, el), {
        id: el.id ? el.id : uuid.v4()
      }));
    }
  });
  const [modalState, setModalState] = React.useState([]);
  const [eventType] = coreEditor.usePropSeparateDevice(propKey.PROP_KEY.EventType, separateDevice);
  const handleChangeValueOnRow = (index, key, newValue) => {
    const dataPropKey = propKey.PROP_KEY.joinKey(index + "", key);
    setModalState((prev) => {
      const newState = JSON.parse(JSON.stringify(prev));
      set__default["default"](newState, dataPropKey, newValue);
      return newState;
    });
  };
  const getValueOnRow = (index, key) => {
    const dataPropKey = propKey.PROP_KEY.joinKey(index + "", key);
    return get__default["default"](modalState, dataPropKey);
  };
  const onAddItem = () => {
    const cloneItems = [...modalState];
    const newProduct = {
      id: uuid.v4(),
      name: i18n.t("S\u1EA3n ph\u1EA9m m\u1EDBi"),
      price: 1e5,
      discount: 20,
      virtualRating: 5
    };
    cloneItems.unshift(newProduct);
    setModalState(cloneItems);
  };
  const onDuplicateItem = (index) => {
    const cloneItems = [...modalState];
    const newRecord = __spreadProps(__spreadValues({}, cloneItems[index]), {
      id: uuid.v4()
    });
    cloneItems.splice(index + 1, 0, newRecord);
    setModalState(cloneItems);
  };
  const onDeleteItem = (index) => {
    const cloneItems = [...modalState];
    cloneItems.splice(index, 1);
    setModalState(cloneItems);
  };
  const onChangeRow = (rowIndex, dataIndex, value) => {
    if (value === modalState[rowIndex][dataIndex])
      return;
    handleChangeValueOnRow(rowIndex, dataIndex, value);
  };
  const defaultColumns = [
    {
      key: "sort",
      width: 55,
      fixed: "left"
    },
    {
      title: i18n.t("common.image"),
      dataIndex: "image",
      key: "image",
      width: 150,
      render: (_text, _record, index) => {
        const imagePropKey = propKey.PROP_KEY.joinKey(
          itemsPropKey,
          index + "",
          propKey.PROP_KEY.Image,
          propKey.PROP_KEY.Src
        );
        const widthPropKey = propKey.PROP_KEY.joinKey(
          itemsPropKey,
          index + "",
          propKey.PROP_KEY.Image,
          propKey.PROP_KEY.GoogleImageParams,
          propKey.PROP_KEY.Width
        );
        return /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ImageUploadButton, {
          accept: "image/jpg, image/jpeg, image/png, image/gif, image/webp",
          beforeUpload: coreEditor.beforeUploadImage,
          imagePropKey,
          widthPropKey,
          separateDevice,
          layout: "vertical",
          stateImageUpload: {
            image: getValueOnRow(
              index,
              propKey.PROP_KEY.joinKey(propKey.PROP_KEY.Image, propKey.PROP_KEY.Src)
            ),
            setImage: (v) => handleChangeValueOnRow(
              index,
              propKey.PROP_KEY.joinKey(propKey.PROP_KEY.Image, propKey.PROP_KEY.Src),
              v
            ),
            setWidth: (v) => handleChangeValueOnRow(
              index,
              propKey.PROP_KEY.joinKey(
                propKey.PROP_KEY.Image,
                propKey.PROP_KEY.GoogleImageParams,
                propKey.PROP_KEY.Width
              ),
              v
            )
          }
        });
      },
      fixed: "left"
    },
    {
      title: i18n.t("T\xEAn s\u1EA3n ph\u1EA9m"),
      dataIndex: "name",
      key: "name",
      editable: {
        inputType: "text",
        rules: [
          {
            required: true,
            message: i18n.t("B\u1EA1n ch\u01B0a c\u1EA5u h\xECnh t\xEAn s\u1EA3n ph\u1EA9m")
          }
        ]
      },
      width: 250,
      ellipsis: true
    },
    {
      title: i18n.t("Gi\xE1 b\xE1n"),
      dataIndex: "price",
      key: "price",
      editable: {
        inputType: "number",
        rules: [
          {
            type: "number",
            min: 0,
            message: i18n.t("Gi\xE1 b\xE1n kh\xF4ng \u0111\u01B0\u1EE3c nh\u1ECF h\u01A1n 0")
          }
        ]
      },
      width: 200,
      ellipsis: true
    },
    {
      title: i18n.t("% gi\u1EA3m gi\xE1"),
      dataIndex: "discount",
      key: "discount",
      editable: {
        inputType: "number",
        rules: [
          {
            type: "number",
            min: 0,
            message: i18n.t("C\u1EA7n n\u1EB1m trong kho\u1EA3ng 0 \u0111\u1EBFn 100")
          },
          {
            type: "number",
            max: 100,
            message: i18n.t("C\u1EA7n n\u1EB1m trong kho\u1EA3ng 0 \u0111\u1EBFn 100")
          }
        ]
      },
      width: 120,
      ellipsis: true
    },
    {
      title: i18n.t("\u0110\xE1nh gi\xE1 \u1EA3o"),
      dataIndex: propKey.PROP_KEY.VirtualRating,
      key: propKey.PROP_KEY.VirtualRating,
      width: 150,
      render: (_text, _record, index) => {
        const propKey$1 = propKey.PROP_KEY.joinKey(
          itemsPropKey,
          index + "",
          propKey.PROP_KEY.VirtualRating
        );
        return /* @__PURE__ */ jsxRuntime.jsx(RatingConfig.RatingConfig, {
          propKey: propKey$1,
          ratingProps: {
            value: getValueOnRow(index, propKey.PROP_KEY.VirtualRating),
            onChange: (v) => handleChangeValueOnRow(index, propKey.PROP_KEY.VirtualRating, v)
          }
        });
      }
    },
    {
      title: i18n.t("L\u01B0\u1EE3t mua \u1EA3o"),
      dataIndex: propKey.PROP_KEY.VirtualSold,
      key: propKey.PROP_KEY.VirtualSold,
      editable: {
        inputType: "number",
        rules: [
          {
            type: "number",
            min: 0,
            message: i18n.t("L\u01B0\u1EE3t mua \u1EA3o c\u1EA7n l\u1EDBn h\u01A1n 0")
          }
        ]
      },
      width: 120,
      ellipsis: true
    },
    {
      title: () => /* @__PURE__ */ jsxRuntime.jsx(antd.Tooltip, {
        zIndex: 1081,
        placement: "bottomRight",
        title: i18n.t("\u0110i\u1EC1u h\u01B0\u1EDBng \u0111\u1EBFn khi kh\xE1ch h\xE0ng b\u1EA5m v\xE0o s\u1EA3n ph\u1EA9m"),
        children: i18n.t("\u0110\u01B0\u1EDDng d\u1EABn (n\u1EBFu c\xF3)")
      }),
      dataIndex: "link",
      key: "link",
      editable: {
        inputType: "text",
        rules: [
          {
            required: eventType === "link",
            message: i18n.t("Vui l\xF2ng nh\u1EADp \u0111\u01B0\u1EDDng d\u1EABn")
          }
        ]
      },
      width: 200,
      ellipsis: true
    },
    {
      title: i18n.t("H\xE0nh \u0111\u1ED9ng"),
      key: "action",
      dataIndex: "action",
      fixed: "right",
      width: 150,
      render: (_, _record, index) => {
        return /* @__PURE__ */ jsxRuntime.jsxs("div", {
          children: [
            /* @__PURE__ */ jsxRuntime.jsx(antd.Typography.Link, {
              className: "mr-half",
              onClick: () => onDuplicateItem(index),
              children: i18n.t("Nh\xE2n b\u1EA3n")
            }),
            /* @__PURE__ */ jsxRuntime.jsx(antd.Typography.Link, {
              onClick: () => onDeleteItem(index),
              children: i18n.t("Xo\xE1")
            })
          ]
        });
      }
    }
  ];
  const columns = defaultColumns.map((col) => {
    if (!col.editable) {
      return col;
    }
    return __spreadProps(__spreadValues({}, col), {
      onCell: (record, rowIndex) => ({
        editable: col.editable,
        dataIndex: col.dataIndex,
        title: col.title,
        rowIndex,
        propKey: itemsPropKey,
        separateDevice,
        record,
        onChange: (value) => onChangeRow(rowIndex, col.dataIndex, value)
      })
    });
  });
  const components = {
    body: {
      row: coreEditor.EditableRow,
      cell: coreEditor.EditableCell
    }
  };
  const onDragEnd = ({ active, over }) => {
    if ((active == null ? void 0 : active.id) !== (over == null ? void 0 : over.id)) {
      let cloneItems = [...modalState];
      const activeIndex = cloneItems.findIndex((i) => i.id === (active == null ? void 0 : active.id));
      const overIndex = cloneItems.findIndex((i) => i.id === (over == null ? void 0 : over.id));
      cloneItems = sortable.arrayMove(cloneItems, activeIndex, overIndex);
      setModalState(cloneItems);
    }
  };
  const onClose = () => setVisible(false);
  const addProduct = (imageUrls) => {
    if (!(imageUrls == null ? void 0 : imageUrls.length))
      return;
    const newItems = [];
    imageUrls.forEach((url) => {
      const newObject = {
        src: url,
        googleImageParams: {
          width: 0
        }
      };
      newItems.push(__spreadProps(__spreadValues({}, constants.DEFAULT_PRODUCT), {
        id: uuid.v4(),
        image: newObject
      }));
    });
    setModalState((prev) => {
      return [...newItems, ...prev];
    });
  };
  const handleClose = () => {
    setItems(
      modalState.map((el) => {
        const _a = el, rest = __objRest(_a, ["id"]);
        return rest;
      })
    );
    onClose == null ? void 0 : onClose();
  };
  React.useEffect(() => {
    if (visible)
      setModalState(items);
  }, [visible]);
  return /* @__PURE__ */ jsxRuntime.jsxs(antd.Modal, {
    bodyStyle: {
      minHeight: 500
    },
    style: {
      top: 20
    },
    zIndex: 1080,
    width: "100%",
    title: i18n.t("Qu\u1EA3n l\xFD s\u1EA3n ph\u1EA9m"),
    okText: i18n.t("\u0110\xF3ng"),
    destroyOnClose: true,
    onCancel: handleClose,
    open: visible,
    getContainer: () => (frameDocument == null ? void 0 : frameDocument.body) || (document == null ? void 0 : document.body),
    footer: /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, {
      children: /* @__PURE__ */ jsxRuntime.jsx(antd.Button, {
        type: "primary",
        onClick: handleClose,
        shape: "round",
        children: i18n.t("\u0110\xF3ng")
      })
    }),
    children: [
      /* @__PURE__ */ jsxRuntime.jsxs("div", {
        className: "my-base",
        style: { display: "flex", justifyContent: "flex-end", gap: 8 },
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(coreEditor.UploadImageButton, {
            handlerAfterUpload: addProduct
          }),
          /* @__PURE__ */ jsxRuntime.jsx(antd.Button, {
            type: "primary",
            shape: "round",
            onClick: onAddItem,
            children: i18n.t("Th\xEAm m\u1EDBi s\u1EA3n ph\u1EA9m")
          })
        ]
      }),
      /* @__PURE__ */ jsxRuntime.jsx(core.DndContext, {
        onDragEnd,
        children: /* @__PURE__ */ jsxRuntime.jsx(sortable.SortableContext, {
          items: modalState == null ? void 0 : modalState.map((i) => i.id),
          strategy: sortable.verticalListSortingStrategy,
          children: /* @__PURE__ */ jsxRuntime.jsx(antd.Table, {
            components,
            dataSource: modalState,
            rowKey: "id",
            columns,
            pagination: false,
            scroll: { x: 1e3, y: 500 }
          })
        })
      })
    ]
  });
};

exports.ProductListConfigModal = ProductListConfigModal;
