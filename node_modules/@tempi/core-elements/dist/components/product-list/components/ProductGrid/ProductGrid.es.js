import { jsx } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { useStore, BreakpointWidthProvider } from '@tempi/core-renderer';
import { ProductCard } from '../ProductCard/ProductCard.es.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const GAP = 16;
const ProductGrid = (_a) => {
  var _b = _a, {
    items = [],
    gridOptions,
    layout
  } = _b, rest = __objRest(_b, [
    "items",
    "gridOptions",
    "layout"
  ]);
  const { device } = useStore();
  const { columns = 5 } = gridOptions || {};
  const cols = device === "mobile" ? 2 : columns;
  return /* @__PURE__ */ jsx(WrapperGrid, {
    style: { gridTemplateColumns: `repeat(${cols}, minmax(0, 1fr))` },
    children: items.map((product, index) => /* @__PURE__ */ jsx("div", {
      children: /* @__PURE__ */ jsx(BreakpointWidthProvider, {
        sWidth: { value: 100 / 2, unit: "%" },
        mWidth: { value: 100 / columns, unit: "%" },
        children: /* @__PURE__ */ jsx(ProductCard, __spreadValues({
          product
        }, rest))
      })
    }, index))
  });
};
const WrapperGrid = styled.div`
  display: grid;
  align-self: stretch;
  gap: ${GAP}px;
`;

export { ProductGrid };
