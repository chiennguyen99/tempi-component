'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../../../i18n.js');
var styled = require('@emotion/styled');
var coreRenderer = require('@tempi/core-renderer');
var antd = require('antd');
var clsx = require('clsx');
var ui = require('../../../button/v2/ui.js');
var index = require('../../../../core/Link/index.js');
var ui$1 = require('../../../image/ui.js');
var ui$2 = require('../../../paragraph/ui.js');
var Rating = require('../../../../core/Rating/Rating.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
var clsx__default = /*#__PURE__*/_interopDefaultLegacy(clsx);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const ProductCard = ({
  product,
  nameStyle,
  priceStyle,
  alignment,
  onClick,
  isEditingMode = false,
  currencyUnit,
  currencyAlignment,
  orderButton,
  buttonLink,
  showButton
}) => {
  const hasClickEvent = typeof onClick === "function";
  const { name, discount, price, image, link, virtualSold, virtualRating } = product;
  const getPriceText = () => {
    const formattedPrice = coreRenderer.formatCurrencyVND(price, false);
    const unit = currencyUnit || i18n.t("\u0111");
    if (currencyAlignment === "left")
      return `${unit}${formattedPrice}`;
    return `${formattedPrice} ${unit}`;
  };
  const handleClickProduct = () => {
    if (hasClickEvent)
      onClick(product);
  };
  const renderSold = () => {
    const sold = Intl.NumberFormat("en-US", {
      notation: "compact",
      maximumFractionDigits: 1
    }).format(virtualSold);
    return /* @__PURE__ */ jsxRuntime.jsx(Sold, {
      text: `\u0110\xE3 b\xE1n ${sold}`,
      fontSize: +priceStyle.fontSize - 1
    });
  };
  const productVisualElement = /* @__PURE__ */ jsxRuntime.jsx(ProductVisualWrapper, {
    children: /* @__PURE__ */ jsxRuntime.jsx("div", {
      style: { position: "relative", paddingBottom: "100%" },
      children: /* @__PURE__ */ jsxRuntime.jsx(StyledImage, __spreadValues({
        commonStyle: {
          objectFit: "contain",
          height: "100%",
          width: "100%"
        },
        autoOptimize: true
      }, image))
    })
  });
  const renderProductVisual = () => {
    if (isEditingMode || !showButton)
      return productVisualElement;
    return /* @__PURE__ */ jsxRuntime.jsx(index.Link, __spreadProps(__spreadValues({}, {
      eventType: "link",
      link: { openNewTab: true, nofollow: true, href: link }
    }), {
      children: productVisualElement
    }));
  };
  const orderButtonElement = /* @__PURE__ */ jsxRuntime.jsx(ui.ButtonV2, __spreadProps(__spreadValues({
    onClick: hasClickEvent && !isEditingMode ? handleClickProduct : null
  }, orderButton), {
    isEditingMode,
    commonStyle: {
      justifyContent: "center"
    },
    style: { marginTop: 6 }
  }));
  const renderOrderButton = () => {
    if (!showButton)
      return null;
    if (hasClickEvent || isEditingMode)
      return /* @__PURE__ */ jsxRuntime.jsx(antd.Space, {
        align: "center",
        direction: "vertical",
        style: { width: "100%" },
        children: orderButtonElement
      });
    return /* @__PURE__ */ jsxRuntime.jsx(antd.Space, {
      align: "center",
      direction: "vertical",
      style: { width: "100%" },
      children: /* @__PURE__ */ jsxRuntime.jsx(index.Link, __spreadProps(__spreadValues({}, {
        eventType: "link",
        link: { openNewTab: true, nofollow: true, href: buttonLink }
      }), {
        children: orderButtonElement
      }))
    });
  };
  const renderCard = () => {
    return /* @__PURE__ */ jsxRuntime.jsxs(ProductCardContent, {
      className: clsx__default["default"]({ "allow-click": hasClickEvent }),
      children: [
        renderProductVisual(),
        /* @__PURE__ */ jsxRuntime.jsxs(DetailCard, {
          className: clsx__default["default"]("detail-card", alignment),
          children: [
            /* @__PURE__ */ jsxRuntime.jsx(ProductName, {
              className: "detail-card__name",
              text: name,
              commonStyle: nameStyle
            }),
            /* @__PURE__ */ jsxRuntime.jsxs(WrapperPrice, {
              className: "detail-card__price",
              children: [
                (!!price || price === 0) && /* @__PURE__ */ jsxRuntime.jsx(Price, {
                  text: getPriceText(),
                  commonStyle: priceStyle
                }),
                !!discount && /* @__PURE__ */ jsxRuntime.jsx(WrapperDiscount, {
                  children: /* @__PURE__ */ jsxRuntime.jsx(Discount, {
                    fontSize: +priceStyle.fontSize - 4,
                    children: `-${discount}%`
                  })
                })
              ]
            }),
            (virtualRating > 0 || virtualSold > 0) && /* @__PURE__ */ jsxRuntime.jsxs(WrapperExtra, {
              className: "detail-card__extra",
              children: [
                virtualRating > 0 && /* @__PURE__ */ jsxRuntime.jsx(Rating.Rating, {
                  style: { fontSize: priceStyle.fontSize || 14 },
                  value: virtualRating,
                  disabled: true
                }),
                virtualSold > 0 && renderSold()
              ]
            })
          ]
        }),
        renderOrderButton()
      ]
    });
  };
  if (isEditingMode || showButton)
    return /* @__PURE__ */ jsxRuntime.jsx(Wrapper, {
      children: renderCard()
    });
  if (hasClickEvent)
    return /* @__PURE__ */ jsxRuntime.jsx(Wrapper, {
      onClick: handleClickProduct,
      children: renderCard()
    });
  return /* @__PURE__ */ jsxRuntime.jsx(index.Link, __spreadProps(__spreadValues({}, {
    eventType: "link",
    link: { openNewTab: true, nofollow: true, href: link }
  }), {
    children: /* @__PURE__ */ jsxRuntime.jsx(Wrapper, {
      children: renderCard()
    })
  }));
};
const Wrapper = styled__default["default"].div`
  position: relative;
  width: 100%;
  display: flex;
  flex-direction: column;
  background-color: transparent;
`;
const ProductCardContent = styled__default["default"].div`
  position: relative;
  flex: 1 0 auto;

  &.allow-click {
    &:hover {
      cursor: pointer;
    }
  }
`;
const ProductVisualWrapper = styled__default["default"].div`
  position: relative;
  margin-bottom: 4px;
`;
const StyledImage = styled__default["default"](ui$1.Image)`
  display: inline-block;
  overflow: hidden;
  position: absolute;
  height: 100%;
  inset: 0;
`;
const DetailCard = styled__default["default"].div`
  &.detail-card.left {
    .detail-card__name {
      text-align: left;
    }
    .detail-card__price,
    .detail-card__extra {
      justify-content: flex-start;
    }
  }
  &.detail-card.center {
    .detail-card__name {
      text-align: center;
    }
    .detail-card__price,
    .detail-card__extra {
      justify-content: center;
    }
  }
  &.detail-card.right {
    .detail-card__name {
      text-align: right;
    }
    .detail-card__price,
    .detail-card__extra {
      justify-content: flex-end;
    }
  }
`;
const ProductName = styled__default["default"](ui$2.Paragraph)`
  font-size: 14px;
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
  color: #000000;
  font-weight: 700;
  ${(props) => coreRenderer.getStyle(props == null ? void 0 : props.commonStyle)}
`;
const WrapperPrice = styled__default["default"].div`
  display: flex;
`;
const Price = styled__default["default"](ui$2.Paragraph)`
  font-weight: 400;
  font-size: 14px;
  line-height: 22px;
  ${(props) => coreRenderer.getStyle(props == null ? void 0 : props.commonStyle)}
`;
const WrapperDiscount = styled__default["default"].div`
  margin-left: 8px;
`;
const Discount = styled__default["default"].span(
  ({ fontSize = 10 }) => `
padding: 0 4px;
color: #ffffff;
background-color: #e40303;
font-size: ${fontSize}px;
line-height: 14px;
font-weight: 700;
border-radius: 2px;
`
);
const WrapperExtra = styled__default["default"].div`
  display: flex;
  align-items: center;
  column-gap: 8px;
`;
const Sold = styled__default["default"](ui$2.Paragraph)(
  ({ fontSize = 13 }) => `
font-weight: 400;
font-size: ${fontSize}px;
line-height: 22px;
`
);

exports.ProductCard = ProductCard;
