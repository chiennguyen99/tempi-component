'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var i18n = require('../../i18n.js');
var React = require('react');
var coreRenderer = require('@tempi/core-renderer');
var constants = require('./constants.js');
var queryStringToObject = require('../../utils/queryStringToObject.js');
var getPartialDateTimeTimeZone7 = require('../../utils/getPartialDateTimeTimeZone7.js');
var transformValueGGSheet = require('../../utils/transformValueGGSheet.js');
var form = require('../../utils/form.js');

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const useCheckout = (configStorage) => {
  const { env } = coreRenderer.useStore();
  const [selectedProduct, setSelectedProduct] = React.useState();
  const [loading, setLoading] = React.useState(false);
  const [doneCheckout, setDoneCheckout] = React.useState(false);
  const handleFinishCheckout = async (values) => {
    var _b;
    try {
      setLoading(true);
      const _a = queryStringToObject.queryStringToObject(window.location.search) || {}, {
        utm_source,
        utm_medium,
        utm_campaign,
        utm_term,
        utm_content
      } = _a, rest = __objRest(_a, [
        "utm_source",
        "utm_medium",
        "utm_campaign",
        "utm_term",
        "utm_content"
      ]);
      const newValues = __spreadValues(__spreadValues({
        utm_source,
        utm_medium,
        utm_campaign,
        utm_term,
        utm_content
      }, (configStorage == null ? void 0 : configStorage.autoPassParams) && rest), values);
      const date = new Date();
      const { year, month, day, hour, minute, second } = getPartialDateTimeTimeZone7.getPartialDateTimeTimeZone7(date);
      const dateString = `${year}-${month}-${day} ${hour}:${minute}:${second}`;
      let valuesSubmit = transformValueGGSheet.transformValuesGGSheet(newValues, constants.inputsConfig);
      valuesSubmit = [
        ...valuesSubmit,
        {
          name: i18n.t("T\xEAn s\u1EA3n ph\u1EA9m"),
          type: "string",
          value: selectedProduct == null ? void 0 : selectedProduct.name
        },
        {
          name: i18n.t("Gi\xE1 b\xE1n"),
          type: "number",
          value: selectedProduct == null ? void 0 : selectedProduct.price
        },
        {
          name: i18n.t("Th\u1EDDi gian g\u1EEDi"),
          type: "string",
          value: dateString
        },
        {
          name: i18n.t("G\u1EEDi t\u1EEB URL"),
          type: "string",
          value: (_b = window == null ? void 0 : window.location) == null ? void 0 : _b.href
        }
      ];
      await form.formUtils.submitFormData(
        configStorage == null ? void 0 : configStorage.formConfigId,
        valuesSubmit,
        `${coreRenderer.publicBffUrl[env]}/v1/submit-form`
      );
      setSelectedProduct(void 0);
      setDoneCheckout(true);
    } finally {
      setLoading(false);
    }
  };
  return {
    loading,
    handleFinishCheckout,
    selectedProduct,
    setSelectedProduct,
    doneCheckout,
    setDoneCheckout
  };
};

exports.useCheckout = useCheckout;
