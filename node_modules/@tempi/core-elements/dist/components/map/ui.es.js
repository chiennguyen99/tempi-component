import { jsx } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { getStyle } from '@tempi/core-renderer';
import React__default from 'react';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const Map = React__default.forwardRef((props, ref) => {
  const _a = props, { address, zoom, commonStyle, id } = _a, rest = __objRest(_a, ["address", "zoom", "commonStyle", "id"]);
  return /* @__PURE__ */ jsx(Wrapper, __spreadProps(__spreadValues({
    ref,
    id,
    commonStyle
  }, rest), {
    children: /* @__PURE__ */ jsx("iframe", {
      title: "map",
      width: "100%",
      height: "100%",
      frameBorder: 0,
      scrolling: "no",
      marginHeight: 0,
      marginWidth: 0,
      src: `https://maps.google.com/maps?q=${encodeURI(address || "")}&z=${zoom || 14}&ie=UTF8&iwloc=B&output=embed`
    })
  }));
});
const Wrapper = styled.div(
  ({ commonStyle }) => `
    ${getStyle(commonStyle)}`
);
Map.displayName = "Map";

export { Map };
