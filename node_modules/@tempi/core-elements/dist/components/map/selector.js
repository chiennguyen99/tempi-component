'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var coreEditor = require('@tempi/core-editor');
var constants = require('./constants.js');
var quickSetting = require('./quick-setting.js');
var setting = require('./setting.js');
var ui = require('./ui.js');
var selector = require('../section/selector.js');
var selector$1 = require('../root/selector.js');

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const Inner = (props) => {
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx("div", {
        style: { position: "absolute", inset: 0 }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(ui.Map, __spreadValues({
        style: { pointerEvents: "none" }
      }, props))
    ]
  });
};
const MapEditor = coreEditor.withSelector(
  Inner,
  {
    displayName: "B\u1EA3n \u0111\u1ED3",
    tag: ui.Map.displayName.toLowerCase(),
    advanceAttributes: coreEditor.AdvanceAttributes,
    quickSetting: quickSetting.MapQuickSetting,
    customAttributes: setting.MapSetting,
    props: constants.DEFAULT_MAP,
    rules: {
      canDrop: (targetNode) => {
        const ignoreTargets = [
          coreEditor.getEditorName({ RowEditor: selector.RowEditor }),
          coreEditor.getEditorName({ RootEditor: selector$1.RootEditor })
        ];
        return !ignoreTargets.includes(targetNode.data.name);
      }
    }
  },
  {
    style: {
      position: "relative"
    }
  }
);

exports.MapEditor = MapEditor;
