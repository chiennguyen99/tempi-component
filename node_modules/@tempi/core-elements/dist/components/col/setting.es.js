import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t, getOptionsI18n } from '../../i18n.es.js';
import { useEditor, useNode, useProp, RangeSliderConfig, SelectConfig, VerticalAlignmentConfig } from '@tempi/core-editor';
import { UnitEnum } from '@tempi/core-renderer';
import set from 'lodash.set';
import { useMemo, useState } from 'react';
import { HeightTypeEnum } from '../../types/index.es.js';
import { parseFlex, getRemainingPercent, MIN_PERCENTAGE_COL_WIDTH } from './utils.es.js';
import { PROP_KEY } from '../../constants/propKey.es.js';
import { floorPercentage } from '../../core/Grid/Col.es.js';
import { DEFAULT_HEIGHT } from '../../constants/grid.es.js';

const HEIGHT_TYPE_OPTIONS = [
  {
    label: "common.default",
    value: HeightTypeEnum.default
  },
  { label: "common.custom", value: HeightTypeEnum.fixed }
];
const ColSetting = () => {
  const { query, actions, getSiblings, getPrevNode, getNextNode } = useEditor();
  const { id } = useNode();
  const siblings = getSiblings(id);
  const adjacentSibling = useMemo(() => {
    return getNextNode(id) || getPrevNode(id);
  }, [id, siblings.length]);
  const showDesktopWidthSetting = useMemo(() => {
    return (siblings == null ? void 0 : siblings.length) > 1;
  }, [siblings.length]);
  const minHeightPropKey = PROP_KEY.joinKey(
    PROP_KEY.CommonStyle,
    PROP_KEY.MinHeight
  );
  const [minHeight, setMinHeight] = useProp(minHeightPropKey);
  const [heightType, setHeightType] = useState(
    minHeight !== void 0 ? HeightTypeEnum.fixed : HeightTypeEnum.default
  );
  const onChangeHeightType = (value) => {
    setHeightType(value);
    if (value === HeightTypeEnum.default)
      setMinHeight(void 0);
    if (value === HeightTypeEnum.fixed)
      setMinHeight(DEFAULT_HEIGHT);
  };
  const [xs, setXs] = useProp(PROP_KEY.Xs);
  const [md, setMd] = useProp(PROP_KEY.Md);
  const colFlex = parseFlex(md);
  const otherSiblingsPercent = siblings.filter((nodeId) => nodeId !== (adjacentSibling == null ? void 0 : adjacentSibling.id) && nodeId !== id).map((id2) => {
    var _a, _b, _c;
    return (_c = (_b = (_a = query.node(id2).get().data) == null ? void 0 : _a.props) == null ? void 0 : _b.md) == null ? void 0 : _c.flex;
  });
  const remainingPercent = getRemainingPercent(otherSiblingsPercent);
  const onChangeFlex = (value) => {
    if (value !== void 0) {
      value = floorPercentage(value);
      setMd(`${value}%`);
      if (adjacentSibling) {
        actions.history.throttle().setProp(adjacentSibling.id, (props) => {
          set(
            props,
            PROP_KEY.Md,
            `${floorPercentage(remainingPercent - value)}%`
          );
        });
      }
    }
  };
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      showDesktopWidthSetting && /* @__PURE__ */ jsx(RangeSliderConfig, {
        sliderProps: {
          max: adjacentSibling ? floorPercentage(remainingPercent - MIN_PERCENTAGE_COL_WIDTH) : 100,
          min: MIN_PERCENTAGE_COL_WIDTH,
          value: colFlex,
          onChange: onChangeFlex
        },
        unitProps: { defaultValue: UnitEnum.percent },
        formItemProps: {
          label: t("Chi\u1EC1u r\u1ED9ng c\u1ED9t tr\xEAn m\xE1y t\xEDnh")
        }
      }),
      /* @__PURE__ */ jsx(RangeSliderConfig, {
        sliderProps: {
          max: 100,
          min: MIN_PERCENTAGE_COL_WIDTH,
          value: parseFlex(xs),
          onChange: (value) => {
            if (value !== void 0) {
              setXs(`${value}%`);
            }
          }
        },
        unitProps: { defaultValue: UnitEnum.percent },
        formItemProps: {
          label: t("Chi\u1EC1u r\u1ED9ng c\u1ED9t tr\xEAn \u0111i\u1EC7n tho\u1EA1i")
        }
      }),
      /* @__PURE__ */ jsx(SelectConfig, {
        options: getOptionsI18n(t, HEIGHT_TYPE_OPTIONS, "label"),
        formItemProps: {
          label: t("Chi\u1EC1u cao c\u1ED9t"),
          layout: "vertical"
        },
        selectProps: {
          value: heightType,
          onChange: onChangeHeightType,
          style: { width: "100%" }
        }
      }),
      heightType === HeightTypeEnum.fixed && /* @__PURE__ */ jsx(RangeSliderConfig, {
        sliderProps: {
          min: 0,
          max: 1e3
        },
        propKey: minHeightPropKey,
        unitProps: { defaultValue: UnitEnum.pixel }
      }),
      /* @__PURE__ */ jsx(VerticalAlignmentConfig, {
        propKey: PROP_KEY.VerticalAlignment,
        formItemProps: {
          label: t("C\u0103n ch\u1EC9nh n\u1ED9i dung b\xEAn trong theo chi\u1EC1u d\u1ECDc"),
          layout: "vertical"
        }
      })
    ]
  });
};

export { ColSetting };
