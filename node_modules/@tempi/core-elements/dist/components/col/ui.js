'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var styled = require('@emotion/styled');
var coreRenderer = require('@tempi/core-renderer');
var clsx = require('clsx');
var React = require('react');
var utils = require('./utils.js');
var Col = require('../../core/Grid/Col.js');
var grid = require('../../constants/grid.js');
var index = require('../../core/Link/index.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
var clsx__default = /*#__PURE__*/_interopDefaultLegacy(clsx);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const ColContent = styled__default["default"].div(
  ({
    commonStyle,
    verticalAlignment
  }) => `
  ${coreRenderer.getStyle(commonStyle, { lazyBgImage: true })}
  display: flex;
  flex-direction: column;
  justify-content: ${grid.MAPPING_VERTICAL_ALIGNMENT_FLEX[verticalAlignment] || grid.MAPPING_VERTICAL_ALIGNMENT_FLEX.top}
`
);
const PbCol = React__default["default"].forwardRef(
  (props, ref) => {
    var _b, _c, _d;
    const _a = props, { commonStyle, verticalAlignment, children, event } = _a, rest = __objRest(_a, ["commonStyle", "verticalAlignment", "children", "event"]);
    const colRef = React.useRef();
    const { style: animationStyle, animationClassName } = coreRenderer.useAnimation(
      commonStyle == null ? void 0 : commonStyle.animation,
      colRef
    );
    const isIntersected = coreRenderer.useIntersectionObserver(colRef, {
      freezeOnceVisible: true
    });
    return /* @__PURE__ */ jsxRuntime.jsx(coreRenderer.BreakpointWidthProvider, {
      sWidth: {
        value: utils.parseFlexPercent((_b = rest == null ? void 0 : rest.xs) == null ? void 0 : _b.flex),
        unit: "%"
      },
      mWidth: {
        value: utils.parseFlexPercent((_c = rest == null ? void 0 : rest.md) == null ? void 0 : _c.flex),
        unit: "%"
      },
      children: /* @__PURE__ */ jsxRuntime.jsxs(Col.Col, __spreadProps(__spreadValues({
        ref
      }, rest), {
        children: [
          (commonStyle == null ? void 0 : commonStyle.backgroundVideo) && /* @__PURE__ */ jsxRuntime.jsx(coreRenderer.BackgroundVideo, __spreadProps(__spreadValues({}, commonStyle.backgroundVideo), {
            background: (_d = commonStyle.background) == null ? void 0 : _d.toString()
          })),
          /* @__PURE__ */ jsxRuntime.jsx(index.Link, __spreadProps(__spreadValues({}, event), {
            children: /* @__PURE__ */ jsxRuntime.jsx(ColContent, {
              ref: colRef,
              commonStyle,
              verticalAlignment,
              style: animationStyle,
              className: clsx__default["default"](
                {
                  [coreRenderer.BG_LAZY_CLASS_NAME]: true,
                  [coreRenderer.BG_VISIBLE_LAZY_CLASS_NAME]: isIntersected
                },
                animationClassName
              ),
              children
            })
          }))
        ]
      }))
    });
  }
);
PbCol.displayName = Col.Col.displayName;

exports.PbCol = PbCol;
