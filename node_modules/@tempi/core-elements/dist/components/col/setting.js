'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var coreEditor = require('@tempi/core-editor');
var coreRenderer = require('@tempi/core-renderer');
var set = require('lodash.set');
var React = require('react');
var index = require('../../types/index.js');
var utils = require('./utils.js');
var propKey = require('../../constants/propKey.js');
var Col = require('../../core/Grid/Col.js');
var grid = require('../../constants/grid.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var set__default = /*#__PURE__*/_interopDefaultLegacy(set);

const HEIGHT_TYPE_OPTIONS = [
  {
    label: "common.default",
    value: index.HeightTypeEnum.default
  },
  { label: "common.custom", value: index.HeightTypeEnum.fixed }
];
const ColSetting = () => {
  const { query, actions, getSiblings, getPrevNode, getNextNode } = coreEditor.useEditor();
  const { id } = coreEditor.useNode();
  const siblings = getSiblings(id);
  const adjacentSibling = React.useMemo(() => {
    return getNextNode(id) || getPrevNode(id);
  }, [id, siblings.length]);
  const showDesktopWidthSetting = React.useMemo(() => {
    return (siblings == null ? void 0 : siblings.length) > 1;
  }, [siblings.length]);
  const minHeightPropKey = propKey.PROP_KEY.joinKey(
    propKey.PROP_KEY.CommonStyle,
    propKey.PROP_KEY.MinHeight
  );
  const [minHeight, setMinHeight] = coreEditor.useProp(minHeightPropKey);
  const [heightType, setHeightType] = React.useState(
    minHeight !== void 0 ? index.HeightTypeEnum.fixed : index.HeightTypeEnum.default
  );
  const onChangeHeightType = (value) => {
    setHeightType(value);
    if (value === index.HeightTypeEnum.default)
      setMinHeight(void 0);
    if (value === index.HeightTypeEnum.fixed)
      setMinHeight(grid.DEFAULT_HEIGHT);
  };
  const [xs, setXs] = coreEditor.useProp(propKey.PROP_KEY.Xs);
  const [md, setMd] = coreEditor.useProp(propKey.PROP_KEY.Md);
  const colFlex = utils.parseFlex(md);
  const otherSiblingsPercent = siblings.filter((nodeId) => nodeId !== (adjacentSibling == null ? void 0 : adjacentSibling.id) && nodeId !== id).map((id2) => {
    var _a, _b, _c;
    return (_c = (_b = (_a = query.node(id2).get().data) == null ? void 0 : _a.props) == null ? void 0 : _b.md) == null ? void 0 : _c.flex;
  });
  const remainingPercent = utils.getRemainingPercent(otherSiblingsPercent);
  const onChangeFlex = (value) => {
    if (value !== void 0) {
      value = Col.floorPercentage(value);
      setMd(`${value}%`);
      if (adjacentSibling) {
        actions.history.throttle().setProp(adjacentSibling.id, (props) => {
          set__default["default"](
            props,
            propKey.PROP_KEY.Md,
            `${Col.floorPercentage(remainingPercent - value)}%`
          );
        });
      }
    }
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      showDesktopWidthSetting && /* @__PURE__ */ jsxRuntime.jsx(coreEditor.RangeSliderConfig, {
        sliderProps: {
          max: adjacentSibling ? Col.floorPercentage(remainingPercent - utils.MIN_PERCENTAGE_COL_WIDTH) : 100,
          min: utils.MIN_PERCENTAGE_COL_WIDTH,
          value: colFlex,
          onChange: onChangeFlex
        },
        unitProps: { defaultValue: coreRenderer.UnitEnum.percent },
        formItemProps: {
          label: i18n.t("Chi\u1EC1u r\u1ED9ng c\u1ED9t tr\xEAn m\xE1y t\xEDnh")
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.RangeSliderConfig, {
        sliderProps: {
          max: 100,
          min: utils.MIN_PERCENTAGE_COL_WIDTH,
          value: utils.parseFlex(xs),
          onChange: (value) => {
            if (value !== void 0) {
              setXs(`${value}%`);
            }
          }
        },
        unitProps: { defaultValue: coreRenderer.UnitEnum.percent },
        formItemProps: {
          label: i18n.t("Chi\u1EC1u r\u1ED9ng c\u1ED9t tr\xEAn \u0111i\u1EC7n tho\u1EA1i")
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
        options: i18n.getOptionsI18n(i18n.t, HEIGHT_TYPE_OPTIONS, "label"),
        formItemProps: {
          label: i18n.t("Chi\u1EC1u cao c\u1ED9t"),
          layout: "vertical"
        },
        selectProps: {
          value: heightType,
          onChange: onChangeHeightType,
          style: { width: "100%" }
        }
      }),
      heightType === index.HeightTypeEnum.fixed && /* @__PURE__ */ jsxRuntime.jsx(coreEditor.RangeSliderConfig, {
        sliderProps: {
          min: 0,
          max: 1e3
        },
        propKey: minHeightPropKey,
        unitProps: { defaultValue: coreRenderer.UnitEnum.pixel }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.VerticalAlignmentConfig, {
        propKey: propKey.PROP_KEY.VerticalAlignment,
        formItemProps: {
          label: i18n.t("C\u0103n ch\u1EC9nh n\u1ED9i dung b\xEAn trong theo chi\u1EC1u d\u1ECDc"),
          layout: "vertical"
        }
      })
    ]
  });
};

exports.ColSetting = ColSetting;
