'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var icons = require('@ant-design/icons');
var styled = require('@emotion/styled');
var reactIcons = require('@fluentui/react-icons');
var coreEditor = require('@tempi/core-editor');
var React = require('react');
var MoveLeft = require('../../quick-configs/MoveLeft/MoveLeft.js');
var MoveRight = require('../../quick-configs/MoveRight/MoveRight.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

const ColQuickSetting = () => {
  const { actions, query } = coreEditor.useEditor();
  const {
    connectors: { drag },
    id,
    parentId
  } = coreEditor.useNode((node) => ({
    parentId: node.data.parent
  }));
  const { track } = coreEditor.useBuilder();
  const [enabledDrag, setEnableDrag] = React.useState(false);
  const onDeleteColumn = () => {
    actions.delete(id);
    const numOfColAfterDelete = query.node(parentId).childNodes().length;
    if (numOfColAfterDelete === 0)
      actions.history.throttle().delete(parentId);
  };
  return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: /* @__PURE__ */ jsxRuntime.jsx(IndicatorDiv, {
      children: /* @__PURE__ */ jsxRuntime.jsx(coreEditor.RenderQuickSetting, {
        trigger: "click",
        content: /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
          children: [
            /* @__PURE__ */ jsxRuntime.jsx(MoveLeft.MoveLeft, {}),
            /* @__PURE__ */ jsxRuntime.jsx(MoveRight.MoveRight, {}),
            /* @__PURE__ */ jsxRuntime.jsx(coreEditor.EventQuickSetting, {}),
            /* @__PURE__ */ jsxRuntime.jsx(coreEditor.OpenSettingDialog, {}),
            /* @__PURE__ */ jsxRuntime.jsx(CustomColDuplicate, {}),
            /* @__PURE__ */ jsxRuntime.jsx(coreEditor.DeleteNode, {
              customDelete: onDeleteColumn
            })
          ]
        }),
        onOpenChange: (visible) => {
          if (visible) {
            track == null ? void 0 : track({
              regionName: "ColQuickSetting",
              contentName: "quickSettingBtn"
            });
          }
        },
        destroyTooltipOnHide: false,
        children: /* @__PURE__ */ jsxRuntime.jsx(ColumnQuickSettingBtn, {
          ref: drag,
          onClick: () => actions.selectNode(id),
          onMouseEnter: () => setEnableDrag(true),
          onMouseLeave: () => setEnableDrag(false),
          children: enabledDrag ? /* @__PURE__ */ jsxRuntime.jsx(icons.DragOutlined, {
            style: {
              color: "#fff",
              pointerEvents: "none",
              cursor: "move"
            }
          }) : /* @__PURE__ */ jsxRuntime.jsx(reactIcons.ChevronDownRegular, {
            fontSize: 12,
            style: {
              color: "#fff",
              pointerEvents: "none",
              cursor: "unset"
            }
          })
        })
      })
    })
  });
};
const IndicatorDiv = styled__default["default"].div`
  font-size: 12px;
  line-height: 12px;
  position: absolute !important;
  display: flex;
  align-items: center;
  justify-content: left;
  right: -10px;
  top: -10px;
  z-index: 999;
`;
const ColumnQuickSettingBtn = styled__default["default"].div`
  width: 18px;
  height: 18px;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #ffa500 !important;
  cursor: pointer;
  border-radius: 999px;
  transition-duration: 0.2s;
  &:hover {
    width: 24px;
    height: 24px;
  }
`;
const CustomColDuplicate = () => {
  const { duplicateNode, getSiblings } = coreEditor.useEditor();
  const { id, node, parentId } = coreEditor.useNode((node2) => ({
    node: node2,
    parentId: node2.data.parent
  }));
  return /* @__PURE__ */ jsxRuntime.jsx(coreEditor.QuickSettingButton, {
    onClick: () => {
      const siblings = getSiblings(id);
      if (siblings.length >= 12)
        return;
      const index = siblings.findIndex((el) => el === id);
      duplicateNode(node, parentId, index + 1);
    },
    children: /* @__PURE__ */ jsxRuntime.jsx(reactIcons.Copy16Regular, {})
  });
};

exports.ColQuickSetting = ColQuickSetting;
exports.CustomColDuplicate = CustomColDuplicate;
