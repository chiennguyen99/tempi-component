'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var coreEditor = require('@tempi/core-editor');
var React = require('react');
var hooks = require('../../../../configs/TipTapEditor/hooks.js');
var MenuItemQuickSetting = require('./MenuItemQuickSetting.js');
var propKey = require('../../../../constants/propKey.js');
var customKit = require('../../../../configs/TipTapEditor/utils/custom-kit.js');
var ui = require('../../../button/v2/ui.js');
var EditorContent = require('../../../../configs/TipTapEditor/components/EditorContent.js');

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const ButtonMenuItem = ({ commonStyle }) => {
  const { track } = coreEditor.useBuilder();
  const { isActive } = coreEditor.useNode((node) => ({
    isActive: node.events.selected
  }));
  const textPropKey = propKey.PROP_KEY.joinKey(propKey.PROP_KEY.ItemData, propKey.PROP_KEY.Text);
  const [itemData] = coreEditor.useProp(propKey.PROP_KEY.ItemData);
  const [oldButtonStyle, setOldButtonStyle] = coreEditor.useProp(propKey.PROP_KEY.ButtonStyle);
  const [, setButtonStyle] = coreEditor.useProp(
    propKey.PROP_KEY.joinKey(propKey.PROP_KEY.ItemData, propKey.PROP_KEY.ButtonStyle)
  );
  const [oldEvent, setOldEvent] = coreEditor.useProp(propKey.PROP_KEY.Event);
  const [, setEvent] = coreEditor.useProp(
    propKey.PROP_KEY.joinKey(propKey.PROP_KEY.ItemData, propKey.PROP_KEY.Event)
  );
  const { editor, setIsEditable } = hooks.useCustomTiptap(
    {
      editorOptions: {
        extensions: [
          customKit.CustomKit.configure({
            backgroundColor: false,
            bold: false,
            color: false,
            link: false,
            list: false,
            table: false,
            textTransform: false,
            underline: false
          })
        ]
      }
    },
    textPropKey
  );
  React.useEffect(() => {
    let newButtonStyle = {};
    if (oldButtonStyle) {
      newButtonStyle = oldButtonStyle;
      setOldButtonStyle(void 0);
    }
    if (oldEvent) {
      setEvent(oldEvent);
      setOldEvent(void 0);
    }
    if (Object.keys(newButtonStyle).length) {
      setButtonStyle(newButtonStyle);
    }
  }, []);
  React.useEffect(() => {
    if (isActive) {
      track == null ? void 0 : track({
        regionName: "ButtonMenuItemSetting",
        contentName: "quickSettingBtn"
      });
    }
  }, [isActive]);
  return /* @__PURE__ */ jsxRuntime.jsx(coreEditor.RenderQuickSetting, {
    open: isActive,
    content: /* @__PURE__ */ jsxRuntime.jsx(MenuItemQuickSetting.QuickSetting, {
      editor
    }),
    children: /* @__PURE__ */ jsxRuntime.jsx(ui.ButtonV2, __spreadValues({
      isEditingMode: true,
      customText: /* @__PURE__ */ jsxRuntime.jsx(EditorContent.EditorContent, {
        editor,
        setIsEditable
      }),
      commonStyle
    }, itemData))
  });
};

exports.ButtonMenuItem = ButtonMenuItem;
