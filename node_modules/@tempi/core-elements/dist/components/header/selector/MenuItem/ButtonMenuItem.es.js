import { jsx } from 'react/jsx-runtime';
import { useBuilder, useNode, useProp, RenderQuickSetting } from '@tempi/core-editor';
import { useEffect } from 'react';
import { useCustomTiptap } from '../../../../configs/TipTapEditor/hooks.es.js';
import { QuickSetting } from './MenuItemQuickSetting.es.js';
import { PROP_KEY } from '../../../../constants/propKey.es.js';
import { CustomKit } from '../../../../configs/TipTapEditor/utils/custom-kit.es.js';
import { ButtonV2 } from '../../../button/v2/ui.es.js';
import { EditorContent } from '../../../../configs/TipTapEditor/components/EditorContent.es.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const ButtonMenuItem = ({ commonStyle }) => {
  const { track } = useBuilder();
  const { isActive } = useNode((node) => ({
    isActive: node.events.selected
  }));
  const textPropKey = PROP_KEY.joinKey(PROP_KEY.ItemData, PROP_KEY.Text);
  const [itemData] = useProp(PROP_KEY.ItemData);
  const [oldButtonStyle, setOldButtonStyle] = useProp(PROP_KEY.ButtonStyle);
  const [, setButtonStyle] = useProp(
    PROP_KEY.joinKey(PROP_KEY.ItemData, PROP_KEY.ButtonStyle)
  );
  const [oldEvent, setOldEvent] = useProp(PROP_KEY.Event);
  const [, setEvent] = useProp(
    PROP_KEY.joinKey(PROP_KEY.ItemData, PROP_KEY.Event)
  );
  const { editor, setIsEditable } = useCustomTiptap(
    {
      editorOptions: {
        extensions: [
          CustomKit.configure({
            backgroundColor: false,
            bold: false,
            color: false,
            link: false,
            list: false,
            table: false,
            textTransform: false,
            underline: false
          })
        ]
      }
    },
    textPropKey
  );
  useEffect(() => {
    let newButtonStyle = {};
    if (oldButtonStyle) {
      newButtonStyle = oldButtonStyle;
      setOldButtonStyle(void 0);
    }
    if (oldEvent) {
      setEvent(oldEvent);
      setOldEvent(void 0);
    }
    if (Object.keys(newButtonStyle).length) {
      setButtonStyle(newButtonStyle);
    }
  }, []);
  useEffect(() => {
    if (isActive) {
      track == null ? void 0 : track({
        regionName: "ButtonMenuItemSetting",
        contentName: "quickSettingBtn"
      });
    }
  }, [isActive]);
  return /* @__PURE__ */ jsx(RenderQuickSetting, {
    open: isActive,
    content: /* @__PURE__ */ jsx(QuickSetting, {
      editor
    }),
    children: /* @__PURE__ */ jsx(ButtonV2, __spreadValues({
      isEditingMode: true,
      customText: /* @__PURE__ */ jsx(EditorContent, {
        editor,
        setIsEditable
      }),
      commonStyle
    }, itemData))
  });
};

export { ButtonMenuItem };
