'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../../../i18n.js');
var coreEditor = require('@tempi/core-editor');
var constants = require('../../constants.js');
var type = require('../../type.js');
var propKey = require('../../../../constants/propKey.js');

const MenuItemSetting = () => {
  const [type$1, setType] = coreEditor.useProp(propKey.PROP_KEY.Type);
  const [, setData] = coreEditor.useProp(propKey.PROP_KEY.ItemData);
  const onChangeType = (type2) => {
    if (type2 === type.MenuItemType.link) {
      setData(constants.DEFAULT_HEADER.link.itemData);
    } else if (type2 === type.MenuItemType.button) {
      setData(constants.DEFAULT_HEADER.button.itemData);
    }
    setType(type2);
  };
  return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
      options: Object.values(type.MenuItemType).map((itemType) => ({
        label: itemType,
        value: itemType
      })),
      formItemProps: {
        label: i18n.t("Lo\u1EA1i"),
        style: {
          marginBottom: 0
        }
      },
      selectProps: {
        placeholder: i18n.t("Ch\u1ECDn lo\u1EA1i"),
        value: type$1,
        style: {
          minWidth: 140
        },
        onChange: onChangeType
      }
    })
  });
};

exports.MenuItemSetting = MenuItemSetting;
