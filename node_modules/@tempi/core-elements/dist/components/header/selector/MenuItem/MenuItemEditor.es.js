import { jsx } from 'react/jsx-runtime';
import { withSelector, useEditor, AdvanceAttributes } from '@tempi/core-editor';
import { MenuItemType } from '../../type.es.js';
import { ButtonMenuItem } from './ButtonMenuItem.es.js';
import { LinkEditorQuickSetting } from './LinkEditorQuickSetting.es.js';
import { QuickSetting } from './MenuItemQuickSetting.es.js';
import { MenuItem } from '../../ui/MenuItem/MenuItem.es.js';
import { TipTapEditorV2 } from '../../../../configs/TipTapEditor/TipTapEditorV2.es.js';
import { PROP_KEY } from '../../../../constants/propKey.es.js';
import { Heading } from '../../../heading/ui.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const MenuItemEditor = withSelector(
  (props) => {
    const { enabled } = useEditor((state) => ({
      enabled: state.options.enabled
    }));
    return /* @__PURE__ */ jsx(MenuItem, __spreadProps(__spreadValues({}, props), {
      enabled,
      children: props.type === MenuItemType.link ? /* @__PURE__ */ jsx(TipTapEditorV2, {
        propKey: PROP_KEY.joinKey(PROP_KEY.ItemData, PROP_KEY.Text),
        quickSetting: QuickSetting,
        editorQuickSetting: LinkEditorQuickSetting,
        children: /* @__PURE__ */ jsx(Heading, {
          commonStyle: props == null ? void 0 : props.commonStyle
        })
      }) : /* @__PURE__ */ jsx(ButtonMenuItem, __spreadValues({}, props))
    }));
  },
  {
    displayName: MenuItem.displayName,
    tag: MenuItem.displayName.toLowerCase(),
    advanceAttributes: AdvanceAttributes
  }
);

export { MenuItemEditor };
