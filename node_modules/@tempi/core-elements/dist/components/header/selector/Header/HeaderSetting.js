'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../../../i18n.js');
var coreEditor = require('@tempi/core-editor');
var antd = require('antd');
var index = require('../../../../types/index.js');
var type = require('../../type.js');
var ToggleIconSetting = require('./ToggleIconSetting.js');
var grid = require('../../../../constants/grid.js');
var propKey = require('../../../../constants/propKey.js');

const { Panel } = antd.Collapse;
const HeaderSetting = () => {
  const headerPositionOptions = [
    { label: i18n.t("B\xECnh th\u01B0\u1EDDng"), value: type.PositionHeader.NORMAL },
    { label: i18n.t("G\u1EAFn \u0111\u1EA7u trang"), value: type.PositionHeader.STICKY },
    { label: i18n.t("\u1EA8n hi\u1EC7n khi cu\u1ED9n"), value: type.PositionHeader.DYNAMIC }
  ];
  const maxWidthPropKey = propKey.PROP_KEY.joinKey(
    propKey.PROP_KEY.CommonStyle,
    propKey.PROP_KEY.MaxWidth
  );
  const [, setMaxWidth] = coreEditor.useProp(maxWidthPropKey);
  const [widthType, setWidthType] = coreEditor.useProp(propKey.PROP_KEY.WidthType);
  const onChangeWidthType = (value) => {
    setWidthType(value);
    if (value === index.WidthTypeEnum.full)
      setMaxWidth(void 0);
    if (value === index.WidthTypeEnum.fixed)
      setMaxWidth(grid.DEFAULT_WIDTH);
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.AlignmentConfig, {
        formItemProps: {
          label: i18n.t("C\u0103n ch\u1EC9nh")
        },
        propKey: propKey.PROP_KEY.Alignment
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
        propKey: propKey.PROP_KEY.PositionType,
        options: headerPositionOptions,
        formItemProps: { label: i18n.t("V\u1ECB tr\xED") }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
        options: i18n.getOptionsI18n(i18n.t, grid.WIDTH_TYPE_OPTIONS, "label"),
        formItemProps: {
          label: i18n.t("Chi\u1EC1u r\u1ED9ng")
        },
        selectProps: {
          placeholder: i18n.t("M\u1EB7c \u0111\u1ECBnh"),
          value: widthType,
          style: { width: 140 },
          onChange: onChangeWidthType
        }
      }),
      widthType === index.WidthTypeEnum.fixed && /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
        propKey: maxWidthPropKey,
        inputNumberProps: {
          min: 1
        },
        formItemProps: {
          label: i18n.t("Chi\u1EC1u r\u1ED9ng c\u1ED1 \u0111\u1ECBnh")
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(antd.Collapse, {
        defaultActiveKey: ["TOGGLE"],
        expandIconPosition: "end",
        bordered: false,
        children: /* @__PURE__ */ jsxRuntime.jsx(Panel, {
          header: i18n.t("Toggle (di \u0111\u1ED9ng)"),
          children: /* @__PURE__ */ jsxRuntime.jsx(ToggleIconSetting.ToggleIconSetting, {})
        }, "TOGGLE")
      })
    ]
  });
};

exports.HeaderSetting = HeaderSetting;
