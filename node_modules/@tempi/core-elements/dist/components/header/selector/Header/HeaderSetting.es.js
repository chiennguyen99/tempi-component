import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t, getOptionsI18n } from '../../../../i18n.es.js';
import { useProp, AlignmentConfig, SelectConfig, InputNumberConfig } from '@tempi/core-editor';
import { Collapse } from 'antd';
import { WidthTypeEnum } from '../../../../types/index.es.js';
import { PositionHeader } from '../../type.es.js';
import { ToggleIconSetting } from './ToggleIconSetting.es.js';
import { WIDTH_TYPE_OPTIONS, DEFAULT_WIDTH } from '../../../../constants/grid.es.js';
import { PROP_KEY } from '../../../../constants/propKey.es.js';

const { Panel } = Collapse;
const HeaderSetting = () => {
  const headerPositionOptions = [
    { label: t("B\xECnh th\u01B0\u1EDDng"), value: PositionHeader.NORMAL },
    { label: t("G\u1EAFn \u0111\u1EA7u trang"), value: PositionHeader.STICKY },
    { label: t("\u1EA8n hi\u1EC7n khi cu\u1ED9n"), value: PositionHeader.DYNAMIC }
  ];
  const maxWidthPropKey = PROP_KEY.joinKey(
    PROP_KEY.CommonStyle,
    PROP_KEY.MaxWidth
  );
  const [, setMaxWidth] = useProp(maxWidthPropKey);
  const [widthType, setWidthType] = useProp(PROP_KEY.WidthType);
  const onChangeWidthType = (value) => {
    setWidthType(value);
    if (value === WidthTypeEnum.full)
      setMaxWidth(void 0);
    if (value === WidthTypeEnum.fixed)
      setMaxWidth(DEFAULT_WIDTH);
  };
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(AlignmentConfig, {
        formItemProps: {
          label: t("C\u0103n ch\u1EC9nh")
        },
        propKey: PROP_KEY.Alignment
      }),
      /* @__PURE__ */ jsx(SelectConfig, {
        propKey: PROP_KEY.PositionType,
        options: headerPositionOptions,
        formItemProps: { label: t("V\u1ECB tr\xED") }
      }),
      /* @__PURE__ */ jsx(SelectConfig, {
        options: getOptionsI18n(t, WIDTH_TYPE_OPTIONS, "label"),
        formItemProps: {
          label: t("Chi\u1EC1u r\u1ED9ng")
        },
        selectProps: {
          placeholder: t("M\u1EB7c \u0111\u1ECBnh"),
          value: widthType,
          style: { width: 140 },
          onChange: onChangeWidthType
        }
      }),
      widthType === WidthTypeEnum.fixed && /* @__PURE__ */ jsx(InputNumberConfig, {
        propKey: maxWidthPropKey,
        inputNumberProps: {
          min: 1
        },
        formItemProps: {
          label: t("Chi\u1EC1u r\u1ED9ng c\u1ED1 \u0111\u1ECBnh")
        }
      }),
      /* @__PURE__ */ jsx(Collapse, {
        defaultActiveKey: ["TOGGLE"],
        expandIconPosition: "end",
        bordered: false,
        children: /* @__PURE__ */ jsx(Panel, {
          header: t("Toggle (di \u0111\u1ED9ng)"),
          children: /* @__PURE__ */ jsx(ToggleIconSetting, {})
        }, "TOGGLE")
      })
    ]
  });
};

export { HeaderSetting };
