'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var icons = require('@ant-design/icons');
var coreEditor = require('@tempi/core-editor');
var constants = require('../../constants.js');
var MenuCol = require('../../ui/MenuCol/MenuCol.js');
var MenuItemEditor = require('../MenuItem/MenuItemEditor.js');

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const MenuColEditor = (_a) => {
  var _b = _a, { children } = _b, rest = __objRest(_b, ["children"]);
  const {
    id,
    isSelected,
    connectors: { connect }
  } = coreEditor.useNode(({ events }) => ({
    isSelected: events.selected
  }));
  const {
    actions: { add, selectNode },
    query: { parseFreshNode },
    ancestors
  } = coreEditor.useEditor((_, query) => ({
    ancestors: query.node(id).ancestors()
  }));
  const { realDevice: device } = coreEditor.useBuilder();
  const isMobile = device === "mobile";
  const onAddMenuItem = (e) => {
    e.stopPropagation();
    add(
      parseFreshNode({
        data: {
          type: MenuItemEditor.MenuItemEditor,
          props: constants.DEFAULT_HEADER.link
        }
      }).toNode(),
      id,
      0
    );
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(MenuCol.MenuCol, __spreadProps(__spreadValues({
    ref: connect,
    onClick: () => {
      if (isSelected && ancestors.length) {
        selectNode(ancestors[ancestors.length - 1]);
      }
    }
  }, rest), {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx("div", {
        style: __spreadValues({
          cursor: "pointer",
          padding: 8
        }, isMobile && {
          display: "flex",
          justifyContent: "center"
        }),
        onClick: onAddMenuItem,
        children: /* @__PURE__ */ jsxRuntime.jsx(icons.PlusOutlined, {
          style: { fontSize: 18 }
        })
      }),
      children
    ]
  }));
};
MenuColEditor.craft = coreEditor.crafting({
  displayName: MenuCol.MenuCol.displayName,
  tag: MenuCol.MenuCol.displayName.toLowerCase(),
  rules: {
    canMoveOut: () => false,
    canMoveIn: (incomingNodes, currentNode) => {
      return incomingNodes.every(
        (incomingNode) => incomingNode.data.parent === currentNode.id
      );
    }
  }
});

exports.MenuColEditor = MenuColEditor;
