'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var styled = require('@emotion/styled');
var icons = require('@tempi/icons');
var React = require('react');
var context = require('../../context.js');
var getPropsIcon = require('../../../../utils/getPropsIcon.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const MobileMenu = ({ children }) => {
  const { toggle } = React.useContext(context.HeaderContext);
  const [visibleMenu, setVisibleMenu] = React.useState(false);
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(ToggleButton, {
        className: "toggle-button",
        onClick: () => setVisibleMenu(!visibleMenu),
        children: visibleMenu ? /* @__PURE__ */ jsxRuntime.jsx(icons.Icon, __spreadValues({
          name: "CloseOutlined"
        }, getPropsIcon.getPropsIcon(toggle == null ? void 0 : toggle.icon))) : /* @__PURE__ */ jsxRuntime.jsx(icons.Icon, __spreadValues({
          name: "MenuOutlined"
        }, getPropsIcon.getPropsIcon(toggle == null ? void 0 : toggle.icon)))
      }),
      /* @__PURE__ */ jsxRuntime.jsx(DropdownMenu, {
        className: `dropdown-menu ${visibleMenu ? "show" : ""}`,
        children
      })
    ]
  });
};
const ToggleButton = styled__default["default"].div`
  margin-left: auto;
  cursor: pointer;
  display: flex;
  align-items: center;
  padding: 0 8px;
`;
const DropdownMenu = styled__default["default"].div`
  position: absolute;
  top: 80%;
  left: 0;
  right: 0;
  z-index: 100;

  display: flex;
  flex-direction: column;
  align-content: center;
  row-gap: 8px;

  height: auto;
  padding: 16px;
  overflow-y: auto;

  opacity: 0;
  visibility: hidden;
  transition: all 0.2s ease-in-out;

  background: inherit;
  box-shadow: 0 10px 16px rgba(10, 10, 10, 0.1);

  &.show {
    top: 100%;
    opacity: 1;
    visibility: visible;
  }
`;

exports.MobileMenu = MobileMenu;
