import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { getStyle } from '@tempi/core-renderer';
import { HeaderContext } from '../../context.es.js';
import { useHeaderPosition } from '../../hooks.es.js';
import { PositionHeader } from '../../type.es.js';
import { MAPPING_ALIGNMENT_FLEX } from '../../../../constants/grid.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const Header = (_a) => {
  var _b = _a, {
    children,
    isMobile,
    toggle,
    positionType
  } = _b, rest = __objRest(_b, [
    "children",
    "isMobile",
    "toggle",
    "positionType"
  ]);
  const _a2 = rest, { commonStyle } = _a2, others = __objRest(_a2, ["commonStyle"]);
  const _b2 = commonStyle, { maxWidth } = _b2, restStyle = __objRest(_b2, ["maxWidth"]);
  const { headerRef, headerHeight, direction } = useHeaderPosition(positionType);
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(Wrapper, __spreadProps(__spreadValues({
        ref: headerRef,
        isMobile,
        commonStyle: restStyle,
        positionType,
        direction,
        headerHeight
      }, others), {
        children: /* @__PURE__ */ jsx(ContentRow, {
          style: { maxWidth },
          children: /* @__PURE__ */ jsx(HeaderContext.Provider, {
            value: { toggle, isMobile },
            children
          })
        })
      })),
      /* @__PURE__ */ jsx("div", {
        className: "placeholder"
      })
    ]
  });
};
Header.displayName = "Header";
const mobileCss = ({
  commonStyle: { maxHeight, height, minHeight }
}) => `
  max-width: 100%;

  .logo {
    max-width: 50%;
  }

  .menu {
    &-desktop {
      display: none !important;
    }

    &-col {
      flex-direction: column;
      row-gap: 8px;
    }

    &-item {
      &.button {
        justify-content: center;
      }
    }
  }

  .toggle-button {
    ${getStyle({ maxHeight, height, minHeight })}
  }
`;
const desktopCss = ({ alignment }) => `
  .menu {
    &-desktop {
      flex: 1;
    }

    &-col {
      &.left {
        justify-content: ${MAPPING_ALIGNMENT_FLEX[alignment]};
      }
    }
  }

  .dropdown-menu,
  .toggle-button {
    display: none !important;
  }
`;
const Wrapper = styled.div((props) => {
  const { isMobile, commonStyle, positionType, direction, headerHeight } = props;
  return [
    `
      ${getStyle(commonStyle)}
      display: flex;
      justify-content: center;
      margin-left: auto;
      margin-right: auto;
      z-index: 100;
      transition: opacity .5s;
      ${positionType === PositionHeader.DYNAMIC ? direction === "scrolldown" ? "opacity: 0;" : "opacity: 1;" : ""}
      
      
      &.sticky {
        position: fixed;
        top: 0;
        width: 100%;
      }
      
      &.sticky + .placeholder{
        padding-bottom: ${headerHeight}px;
      }
    `,
    isMobile && mobileCss,
    isMobile === false && desktopCss,
    isMobile === void 0 && `
        @media (max-width: 767px) {
          ${mobileCss(props)}
        }
        @media (min-width: 767px) {
          ${desktopCss(props)}
        }
      `
  ];
});
const ContentRow = styled.div`
  background: inherit;
  width: 100%;
  display: flex;
  align-items: center;
  column-gap: 16px;
`;

export { Header };
