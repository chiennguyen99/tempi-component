import { jsx } from 'react/jsx-runtime';
import { useProp, useNode, useEditor, crafting, AdvanceAttributes, getEditorName } from '@tempi/core-editor';
import { useEffect } from 'react';
import { DEFAULT_CONTENT_SLIDER } from '../../constant.es.js';
import { ContentSliderQuickSetting } from './ContentSliderQuickSetting.es.js';
import { ContentSliderSetting } from './ContentSliderSetting.es.js';
import { ContentSlider } from '../../ui/ContentSlider/ContentSlider.es.js';
import { RowEditor } from '../../../section/selector.es.js';
import { RootEditor } from '../../../root/selector.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const ContentSliderEditor = (_a) => {
  var _b = _a, {
    children
  } = _b, props = __objRest(_b, [
    "children"
  ]);
  const [, setChildrenIds] = useProp("childrenIds");
  const {
    connectors: { connect, drag },
    defaultChildIds
  } = useNode((node) => {
    return {
      defaultChildIds: node.data.nodes
    };
  });
  const { enabled } = useEditor((state) => ({
    enabled: state.options.enabled
  }));
  useEffect(() => {
    if (enabled && !props.childrenIds) {
      setChildrenIds(defaultChildIds);
    }
  }, []);
  const renderChildren = () => {
    const childNodes = children.props.children;
    if (!props.childrenIds) {
      return childNodes;
    }
    return props.childrenIds.map((id) => childNodes.find((e) => e.key === id));
  };
  if (!enabled)
    return /* @__PURE__ */ jsx(ContentSlider, __spreadProps(__spreadValues({}, props), {
      children: children.props.children
    }));
  return /* @__PURE__ */ jsx("div", {
    ref: (ref) => connect(drag(ref)),
    children: /* @__PURE__ */ jsx(ContentSlider, __spreadProps(__spreadValues(__spreadValues({}, props), enabled ? { drag: false, allowTouchMove: false } : {}), {
      children: renderChildren()
    }))
  });
};
ContentSliderEditor.craft = crafting({
  displayName: "Thanh tr\u01B0\u1EE3t n\u1ED9i dung",
  tag: ContentSlider.displayName.toLowerCase(),
  customAttributes: ContentSliderSetting,
  advanceAttributes: AdvanceAttributes,
  quickSetting: ContentSliderQuickSetting,
  props: DEFAULT_CONTENT_SLIDER.slider,
  rules: {
    canDrop: (targetNode) => {
      const ignoreTargets = [
        getEditorName({ RowEditor }),
        getEditorName({ RootEditor })
      ];
      return !ignoreTargets.includes(targetNode.data.name);
    }
  }
});

export { ContentSliderEditor };
