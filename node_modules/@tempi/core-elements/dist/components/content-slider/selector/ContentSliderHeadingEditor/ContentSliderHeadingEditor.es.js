import { jsx } from 'react/jsx-runtime';
import { withSelector, useNode, useEditor, useProp, AdvanceAttributes } from '@tempi/core-editor';
import { useEffect } from 'react';
import { EditorQuickSetting } from '../../../heading/editor-quick-setting.es.js';
import { HeadingQuickSetting } from '../../../heading/quick-setting.es.js';
import { DEFAULT_CONTENT_SLIDER } from '../../constant.es.js';
import { PROP_KEY } from '../../../../constants/propKey.es.js';
import { Heading } from '../../../heading/ui.es.js';
import { TipTapEditorV2 } from '../../../../configs/TipTapEditor/TipTapEditorV2.es.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const ContentSliderHeadingEditor = withSelector(
  (_a) => {
    var _b = _a, { id } = _b, props = __objRest(_b, ["id"]);
    const { parentId } = useNode((node) => ({
      parentId: node.data.parent
    }));
    const {
      enabled,
      actions: { history }
    } = useEditor((state) => ({
      enabled: state.options.enabled
    }));
    const [text] = useProp(PROP_KEY.Text);
    useEffect(() => {
      history.throttle().setProp(parentId, (props2) => {
        const htmlRegex = /(<([^>]+)>)/gi;
        props2.headingText = text.replace(htmlRegex, "");
      });
    }, [text, history, parentId]);
    if (!enabled)
      return /* @__PURE__ */ jsx(Heading, __spreadValues({
        id
      }, props));
    return /* @__PURE__ */ jsx(TipTapEditorV2, {
      propKey: PROP_KEY.Text,
      quickSetting: HeadingQuickSetting,
      editorQuickSetting: EditorQuickSetting,
      children: /* @__PURE__ */ jsx(Heading, {
        commonStyle: props == null ? void 0 : props.commonStyle
      })
    });
  },
  {
    displayName: "Ti\xEAu \u0111\u1EC1",
    tag: Heading.displayName.toLowerCase(),
    advanceAttributes: AdvanceAttributes,
    props: DEFAULT_CONTENT_SLIDER.heading,
    rules: {
      canDrag: () => false
    }
  }
);

export { ContentSliderHeadingEditor };
