export declare const DEFAULT_CONTENT_SLIDER: {
    slider: {
        paginationColor: string;
        paginationPosition: string;
        arrows: boolean;
        arrowStyle: number;
        slidesPerView: number;
    };
    sliderItem: {
        commonStyle: {
            padding: {
                top: number;
                right: number;
                bottom: number;
                left: number;
            };
        };
    };
    heading: {
        commonStyle: {
            margin: {
                bottom: number;
            };
            textAlign: string;
        };
        text: string;
        link?: import("..").LinkInterface;
        id?: string;
        event?: import("@tempi/core-renderer").EventInterface;
        responsive?: import("@tempi/core-renderer").Responsive;
        timeVisibility?: import("@tempi/core-renderer").TimeVisibility;
        syncDeviceStyle?: boolean;
        dataUniqId?: string;
    };
    paragraph: {
        commonStyle: {
            textAlign: string;
            margin: {
                bottom: number;
            };
        };
        text: string;
    };
    button: {
        text?: string;
        buttonStyle?: import("@tempi/core-renderer").Style;
        iconConfig?: {
            icon?: import("..").IconInterface;
            position?: "left" | "right";
            spacing?: string | number;
            show?: boolean;
        };
        id?: string;
        commonStyle: Partial<Pick<import("react").CSSProperties, "alignItems" | "backgroundRepeat" | "backgroundSize" | "borderBottomLeftRadius" | "borderBottomRightRadius" | "borderTopLeftRadius" | "borderTopRightRadius" | "bottom" | "columnGap" | "display" | "flexDirection" | "flexWrap" | "fontSize" | "fontStyle" | "fontVariant" | "height" | "justifyContent" | "left" | "letterSpacing" | "lineHeight" | "marginLeft" | "marginRight" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "objectFit" | "objectPosition" | "position" | "right" | "rowGap" | "textAlign" | "textTransform" | "top" | "width" | "zIndex" | "background" | "backgroundPosition" | "borderColor" | "borderRadius" | "borderStyle" | "borderWidth" | "flex" | "gap" | "textDecoration">> & {
            color?: string;
            fontFamily?: string;
            fontWeight?: string;
            margin?: import("@tempi/core-renderer").Spacing;
            padding?: import("@tempi/core-renderer").Spacing;
            border?: import("@tempi/core-renderer").Border;
            shadow?: import("@tempi/core-renderer").Shadow;
            textShadow?: import("@tempi/core-renderer").TextShadow;
            bgImageWidth?: number;
            bgImagePercent?: number;
            backgroundColor?: string;
            backgroundImage?: string;
            backgroundOverlay?: string;
            backgroundOverlayType?: import("@tempi/core-renderer").OverlayType;
            backgroundMarqueeDirection?: "horizontal" | "vertical";
            backgroundMarqueeSpeed?: number;
            hover?: import("@tempi/core-renderer").Hover;
            animation?: import("@tempi/core-renderer").AnimationProps;
            gap?: number;
            widthUnit?: import("@tempi/core-renderer").UnitEnum;
            heightUnit?: import("@tempi/core-renderer").UnitEnum;
            defaultOverlay?: string;
            backgroundVideo?: import("@tempi/core-renderer").BackgroundVideoInterface;
            cornerType?: import("@tempi/core-renderer").CornerType;
        } & {
            desktop?: import("@tempi/core-renderer").Style;
            mobile?: import("@tempi/core-renderer").Style;
        };
        event?: import("@tempi/core-renderer").EventInterface;
        responsive?: import("@tempi/core-renderer").Responsive;
        timeVisibility?: import("@tempi/core-renderer").TimeVisibility;
        syncDeviceStyle?: boolean;
        dataUniqId?: string;
        desktop?: import("..").ButtonV2BaseInterface;
        mobile?: import("..").ButtonV2BaseInterface;
    };
};
//# sourceMappingURL=constant.d.ts.map