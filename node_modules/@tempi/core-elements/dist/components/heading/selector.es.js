import { jsx } from 'react/jsx-runtime';
import { withSelector, useBuilder, AdvanceAttributes, getEditorName } from '@tempi/core-editor';
import { DEFAULT_HEADING } from './constants.es.js';
import { EditorQuickSetting } from './editor-quick-setting.es.js';
import { HeadingQuickSetting } from './quick-setting.es.js';
import { Heading } from './ui.es.js';
import { TipTapEditorV2 } from '../../configs/TipTapEditor/TipTapEditorV2.es.js';
import { PROP_KEY } from '../../constants/propKey.es.js';
import { RowEditor } from '../section/selector.es.js';
import { RootEditor } from '../root/selector.es.js';

var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const HeadingEditor = withSelector(
  (_a) => {
    var _b = _a, props = __objRest(_b, ["id"]);
    const { track } = useBuilder();
    return /* @__PURE__ */ jsx(TipTapEditorV2, {
      track: () => track == null ? void 0 : track({
        regionName: "HeadingEditorSetting",
        contentName: "quickSettingBtn"
      }),
      propKey: PROP_KEY.Text,
      quickSetting: HeadingQuickSetting,
      editorQuickSetting: EditorQuickSetting,
      children: /* @__PURE__ */ jsx(Heading, {
        commonStyle: props == null ? void 0 : props.commonStyle
      })
    });
  },
  {
    displayName: "Ti\xEAu \u0111\u1EC1",
    tag: Heading.displayName.toLowerCase(),
    advanceAttributes: AdvanceAttributes,
    props: DEFAULT_HEADING,
    rules: {
      canDrop: (targetNode) => {
        const ignoreTargets = [
          getEditorName({ RowEditor }),
          getEditorName({ RootEditor })
        ];
        return !ignoreTargets.includes(targetNode.data.name);
      }
    }
  }
);

export { HeadingEditor };
