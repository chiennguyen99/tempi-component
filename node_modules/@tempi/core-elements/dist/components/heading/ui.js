'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var coreRenderer = require('@tempi/core-renderer');
var styled = require('@emotion/styled');
var index = require('../../core/Link/index.js');
var fonts = require('../../constants/fonts.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const Heading = (_a) => {
  var _b = _a, {
    text,
    enabled,
    link,
    children
  } = _b, rest = __objRest(_b, [
    "text",
    "enabled",
    "link",
    "children"
  ]);
  const { text: formattedText } = coreRenderer.useInjectDynamicLinks(text);
  const renderHeading = () => {
    if (children)
      return /* @__PURE__ */ jsxRuntime.jsx(StyledHeading, __spreadProps(__spreadValues({}, rest), {
        children
      }));
    return /* @__PURE__ */ jsxRuntime.jsx(StyledHeading, __spreadProps(__spreadValues({}, rest), {
      dangerouslySetInnerHTML: {
        __html: formattedText
      }
    }));
  };
  const heading = renderHeading();
  if (!enabled)
    return /* @__PURE__ */ jsxRuntime.jsx(index.Link, __spreadProps(__spreadValues({}, link), {
      children: heading
    }));
  return heading;
};
const StyledHeading = styled__default["default"].div(
  ({ commonStyle }) => `
    ${coreRenderer.getStyle(commonStyle)}
    ${fonts.getCommonTextCss(true)}
  `,
  `a {
    color: inherit;
  }`
);
Heading.displayName = "Heading";

exports.Heading = Heading;
exports.StyledHeading = StyledHeading;
