'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var coreEditor = require('@tempi/core-editor');
var constants = require('./constants.js');
var editorQuickSetting = require('./editor-quick-setting.js');
var quickSetting = require('./quick-setting.js');
var ui = require('./ui.js');
var TipTapEditorV2 = require('../../configs/TipTapEditor/TipTapEditorV2.js');
var propKey = require('../../constants/propKey.js');
var selector = require('../section/selector.js');
var selector$1 = require('../root/selector.js');

var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const HeadingEditor = coreEditor.withSelector(
  (_a) => {
    var _b = _a, props = __objRest(_b, ["id"]);
    const { track } = coreEditor.useBuilder();
    return /* @__PURE__ */ jsxRuntime.jsx(TipTapEditorV2.TipTapEditorV2, {
      track: () => track == null ? void 0 : track({
        regionName: "HeadingEditorSetting",
        contentName: "quickSettingBtn"
      }),
      propKey: propKey.PROP_KEY.Text,
      quickSetting: quickSetting.HeadingQuickSetting,
      editorQuickSetting: editorQuickSetting.EditorQuickSetting,
      children: /* @__PURE__ */ jsxRuntime.jsx(ui.Heading, {
        commonStyle: props == null ? void 0 : props.commonStyle
      })
    });
  },
  {
    displayName: "Ti\xEAu \u0111\u1EC1",
    tag: ui.Heading.displayName.toLowerCase(),
    advanceAttributes: coreEditor.AdvanceAttributes,
    props: constants.DEFAULT_HEADING,
    rules: {
      canDrop: (targetNode) => {
        const ignoreTargets = [
          coreEditor.getEditorName({ RowEditor: selector.RowEditor }),
          coreEditor.getEditorName({ RootEditor: selector$1.RootEditor })
        ];
        return !ignoreTargets.includes(targetNode.data.name);
      }
    }
  }
);

exports.HeadingEditor = HeadingEditor;
