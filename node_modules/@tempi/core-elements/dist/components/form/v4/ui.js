'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var styled = require('@emotion/styled');
var coreRenderer = require('@tempi/core-renderer');
var clsx = require('clsx');
var React = require('react');
var ReCAPTCHA = require('react-google-recaptcha');
var reactGoogleRecaptchaV3 = require('react-google-recaptcha-v3');
var reactHookForm = require('react-hook-form');
var hooks = require('./hooks.js');
var i18n = require('../../../i18n.js');
var Input = require('./components/Input.js');
var Textarea = require('./components/Textarea.js');
var SelectBox = require('./components/SelectBox.js');
var RadioGroup = require('./components/RadioGroup.js');
var CheckboxGroup = require('./components/CheckboxGroup.js');
var InputGroupImage = require('./components/InputGroupImage.js');
var UploadFile = require('./components/UploadFile.js');
var LocationSelect = require('./components/LocationSelect.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
var clsx__default = /*#__PURE__*/_interopDefaultLegacy(clsx);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var ReCAPTCHA__default = /*#__PURE__*/_interopDefaultLegacy(ReCAPTCHA);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const getErrorMessage = (type) => {
  let error = "";
  if (type === "required")
    error = i18n.t("\u0110\xE2y l\xE0 th\xF4ng tin b\u1EAFt bu\u1ED9c");
  if (type === "pattern")
    error = i18n.t("Vui l\xF2ng nh\u1EADp \u0111\xFAng \u0111\u1ECBnh d\u1EA1ng");
  return error;
};
const InnerFormV4 = React__default["default"].forwardRef(
  (props, ref) => {
    const _a = props, {
      commonStyle,
      children,
      isEditingMode = false,
      submits = [],
      hiddenFields = [],
      inputs,
      formStyle,
      inputStyle,
      optionStyle,
      labelStyle,
      errorStyle,
      showLabel,
      mainConnection,
      response,
      captcha,
      event,
      configStorage,
      onFinish,
      customLoading
    } = _a, rest = __objRest(_a, [
      "commonStyle",
      "children",
      "isEditingMode",
      "submits",
      "hiddenFields",
      "inputs",
      "formStyle",
      "inputStyle",
      "optionStyle",
      "labelStyle",
      "errorStyle",
      "showLabel",
      "mainConnection",
      "response",
      "captcha",
      "event",
      "configStorage",
      "onFinish",
      "customLoading"
    ]);
    const {
      handleSubmit,
      register,
      formState: { errors, isSubmitting },
      reset,
      setValue,
      trigger
    } = reactHookForm.useForm();
    const wrapperRef = React.useRef();
    const { handleMultiSubmit, loading, handleSubmitFormData } = hooks.useForm({
      wrapperRef,
      response
    });
    const recaptchaRef = React.useRef();
    const { executeRecaptcha } = reactGoogleRecaptchaV3.useGoogleReCaptcha();
    const formCaptchaKey = (captcha == null ? void 0 : captcha.requestKey) || "g-captcha-response";
    const captchaCheckboxV2 = (captcha == null ? void 0 : captcha.version) === "checkboxv2" && !!(captcha == null ? void 0 : captcha.siteKey);
    const captchaInvisibleV2 = (captcha == null ? void 0 : captcha.version) === "invisiblev2" && !!(captcha == null ? void 0 : captcha.siteKey);
    const captchaInvisibleV3 = (captcha == null ? void 0 : captcha.version) === "invisiblev3" && !!(captcha == null ? void 0 : captcha.siteKey);
    const [inc, setInc] = React.useState(0);
    const {
      trackingEventName,
      conversionGGAdsId,
      conversionGGAdsLabel,
      scriptCustom,
      conversionValue
    } = event || {};
    React.useEffect(() => {
      if (!isEditingMode && captchaCheckboxV2) {
        register(formCaptchaKey, {
          required: true
        });
      }
    }, [inc]);
    const onSubmit = async (values, e) => {
      e.preventDefault();
      if (isEditingMode || isSubmitting)
        return false;
      trackEventForm();
      const newValues = __spreadValues({}, values);
      try {
        if (captchaCheckboxV2) {
          if (!captcha.requestKey)
            delete newValues[formCaptchaKey];
        }
        if (captchaInvisibleV2) {
          const token = await recaptchaRef.current.executeAsync();
          if (captcha == null ? void 0 : captcha.requestKey) {
            newValues[captcha.requestKey] = token;
          }
        }
        if (captchaInvisibleV3) {
          const token = await executeRecaptcha((captcha == null ? void 0 : captcha.action) || void 0);
          if (captcha == null ? void 0 : captcha.requestKey) {
            newValues[captcha.requestKey] = token;
          }
        }
      } catch (e2) {
        alert(i18n.t("X\xE1c minh danh t\xEDnh kh\xF4ng th\xE0nh c\xF4ng"));
        return;
      }
      try {
        if (typeof onFinish !== "function") {
          if (!!(configStorage == null ? void 0 : configStorage.formConfigId)) {
            await handleSubmitFormData(configStorage, newValues, inputs);
          } else {
            await handleMultiSubmit(submits, newValues, inputs, mainConnection);
          }
        } else {
          await onFinish(newValues);
        }
      } finally {
        if (captchaCheckboxV2 || captchaInvisibleV2)
          recaptchaRef.current.reset();
        reset();
        setInc((i) => i + 1);
      }
    };
    const renderCaptchaCheckboxV2 = () => {
      var _a2;
      const error = errors[formCaptchaKey];
      return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, {
        children: captchaCheckboxV2 && /* @__PURE__ */ jsxRuntime.jsxs("div", {
          style: { width: (_a2 = captcha == null ? void 0 : captcha.commonStyle) == null ? void 0 : _a2.width },
          children: [
            /* @__PURE__ */ jsxRuntime.jsx(ReCAPTCHA__default["default"], {
              ref: recaptchaRef,
              sitekey: captcha.siteKey,
              onChange: (token) => setValue(formCaptchaKey, token, { shouldValidate: true }),
              onExpired: () => setValue(formCaptchaKey, "", { shouldValidate: true }),
              onErrored: () => setValue(formCaptchaKey, "", { shouldValidate: true })
            }),
            error && /* @__PURE__ */ jsxRuntime.jsx(ErrorMessage, {
              errorStyle,
              children: getErrorMessage(error.type)
            })
          ]
        })
      });
    };
    const renderCaptchaInvisible = () => {
      if (captchaInvisibleV2) {
        return /* @__PURE__ */ jsxRuntime.jsx(ReCAPTCHA__default["default"], {
          ref: recaptchaRef,
          sitekey: captcha.siteKey,
          size: "invisible"
        });
      }
      return null;
    };
    const trackEventForm = () => {
      var _a2, _b, _c, _d, _e;
      if (trackingEventName) {
        (_a2 = window == null ? void 0 : window.gtag) == null ? void 0 : _a2.call(window, "event", trackingEventName);
        !!conversionValue && ((_b = window == null ? void 0 : window.fbq) == null ? void 0 : _b.call(window, "track", trackingEventName, {
          value: conversionValue,
          currency: "VND"
        }));
        !conversionValue && ((_c = window == null ? void 0 : window.fbq) == null ? void 0 : _c.call(window, "track", trackingEventName));
        (_d = window == null ? void 0 : window.track) == null ? void 0 : _d.call(window, "customEvent", trackingEventName);
      }
      if (conversionGGAdsId && conversionGGAdsLabel) {
        (_e = window == null ? void 0 : window.gtag) == null ? void 0 : _e.call(window, "event", "conversion", {
          send_to: `AW-${conversionGGAdsId}/${conversionGGAdsLabel}`
        });
      }
      runStringFunc(scriptCustom);
    };
    const runStringFunc = (script) => {
      if (script == null ? void 0 : script.trim()) {
        try {
          const excuteScript = new Function(coreRenderer.unescapeString(script));
          excuteScript();
        } catch (err) {
          console.error(err);
        }
      }
    };
    return /* @__PURE__ */ jsxRuntime.jsxs(Wrapper, {
      ref: wrapperRef,
      commonStyle,
      children: [
        /* @__PURE__ */ jsxRuntime.jsxs(Form, __spreadProps(__spreadValues({
          formStyle,
          ref,
          onSubmit: handleSubmit(onSubmit)
        }, rest), {
          children: [
            (inputs || []).map((input) => {
              const commonStyle2 = __spreadValues({}, input.commonStyle || {});
              const width = commonStyle2 == null ? void 0 : commonStyle2.width;
              const error = errors[input == null ? void 0 : input.name];
              commonStyle2 == null ? true : delete commonStyle2.width;
              const renderedLabel = /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, {
                children: showLabel && /* @__PURE__ */ jsxRuntime.jsx(StyledLabel, {
                  labelStyle,
                  className: clsx__default["default"]({ required: input.required }),
                  children: (input == null ? void 0 : input.label) || ""
                })
              });
              const renderedError = /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, {
                children: error && /* @__PURE__ */ jsxRuntime.jsx(ErrorMessage, {
                  errorStyle,
                  children: getErrorMessage(error.type)
                })
              });
              if ([
                "text",
                "tel",
                "email",
                "number",
                "date",
                "time",
                "datetime-local",
                "address"
              ].includes(input.type))
                return /* @__PURE__ */ jsxRuntime.jsxs("div", {
                  style: { width },
                  children: [
                    renderedLabel,
                    /* @__PURE__ */ jsxRuntime.jsx(Input.InputText, __spreadProps(__spreadValues({
                      type: input.type,
                      register: !isEditingMode && !!input.name && register
                    }, input), {
                      commonStyle: commonStyle2,
                      inputStyle: __spreadValues(__spreadValues({}, inputStyle || {}), input.inputStyle || {})
                    })),
                    renderedError
                  ]
                }, input.name);
              if (input.type === "textarea")
                return /* @__PURE__ */ jsxRuntime.jsxs("div", {
                  style: { width },
                  children: [
                    renderedLabel,
                    /* @__PURE__ */ jsxRuntime.jsx(Textarea.InputTextarea, __spreadProps(__spreadValues({
                      register: !isEditingMode && !!input.name && register
                    }, input), {
                      commonStyle: commonStyle2,
                      inputStyle: __spreadValues(__spreadValues({}, inputStyle || {}), input.inputStyle || {})
                    })),
                    renderedError
                  ]
                }, input.name);
              if (input.type === "select-box")
                return /* @__PURE__ */ jsxRuntime.jsxs("div", {
                  style: { width },
                  children: [
                    renderedLabel,
                    /* @__PURE__ */ jsxRuntime.jsx(SelectBox.SelectBox, __spreadProps(__spreadValues({
                      register: !isEditingMode && !!input.name && register
                    }, input), {
                      commonStyle: commonStyle2,
                      inputStyle: __spreadValues(__spreadValues({}, inputStyle || {}), input.inputStyle || {})
                    })),
                    renderedError
                  ]
                }, input.name);
              if (input.type === "radio-group")
                return /* @__PURE__ */ jsxRuntime.jsxs("div", {
                  style: { width },
                  children: [
                    renderedLabel,
                    /* @__PURE__ */ jsxRuntime.jsx(RadioGroup.RadioGroup, __spreadProps(__spreadValues({
                      register: !isEditingMode && !!input.name && register
                    }, input), {
                      commonStyle: commonStyle2,
                      labelStyle,
                      optionStyle: __spreadValues(__spreadValues({}, optionStyle || {}), input.optionStyle || {}),
                      inputStyle: __spreadValues(__spreadValues({}, inputStyle || {}), input.inputStyle || {})
                    })),
                    renderedError
                  ]
                }, input.name);
              if (input.type === "checkbox-group")
                return /* @__PURE__ */ jsxRuntime.jsxs("div", {
                  style: { width },
                  children: [
                    renderedLabel,
                    /* @__PURE__ */ jsxRuntime.jsx(CheckboxGroup.CheckboxGroup, __spreadProps(__spreadValues({
                      register: !isEditingMode && !!input.name && register
                    }, input), {
                      commonStyle: commonStyle2,
                      labelStyle,
                      optionStyle: __spreadValues(__spreadValues({}, optionStyle || {}), input.optionStyle || {}),
                      inputStyle: __spreadValues(__spreadValues({}, inputStyle || {}), input.inputStyle || {})
                    })),
                    renderedError
                  ]
                }, input.name);
              if (input.type === "checkbox-group-image")
                return /* @__PURE__ */ jsxRuntime.jsxs("div", {
                  style: { width },
                  children: [
                    renderedLabel,
                    /* @__PURE__ */ jsxRuntime.jsx(InputGroupImage.InputGroupImage, __spreadProps(__spreadValues({
                      inputType: "checkbox",
                      register: !isEditingMode && !!input.name && register
                    }, input), {
                      commonStyle: commonStyle2,
                      labelStyle,
                      optionStyle: __spreadValues(__spreadValues({}, optionStyle || {}), input.optionStyle || {}),
                      inputStyle: __spreadValues(__spreadValues({}, inputStyle || {}), input.inputStyle || {})
                    })),
                    renderedError
                  ]
                }, input.name);
              if (input.type === "radio-group-image")
                return /* @__PURE__ */ jsxRuntime.jsxs("div", {
                  style: { width },
                  children: [
                    renderedLabel,
                    /* @__PURE__ */ jsxRuntime.jsx(InputGroupImage.InputGroupImage, __spreadProps(__spreadValues({
                      inputType: "radio",
                      register: !isEditingMode && !!input.name && register
                    }, input), {
                      commonStyle: commonStyle2,
                      labelStyle,
                      optionStyle: __spreadValues(__spreadValues({}, optionStyle || {}), input.optionStyle || {}),
                      inputStyle: __spreadValues(__spreadValues({}, inputStyle || {}), input.inputStyle || {})
                    })),
                    renderedError
                  ]
                }, input.name);
              if (input.type === "file")
                return /* @__PURE__ */ jsxRuntime.jsxs("div", {
                  style: { width },
                  children: [
                    renderedLabel,
                    /* @__PURE__ */ jsxRuntime.jsx(UploadFile.UploadFile, __spreadProps(__spreadValues({
                      type: input.type,
                      register: !isEditingMode && !!input.name && register
                    }, input), {
                      commonStyle: commonStyle2,
                      inputStyle: __spreadValues(__spreadValues({}, inputStyle || {}), input.inputStyle || {}),
                      setValue,
                      errorStyle
                    })),
                    renderedError
                  ]
                }, input.name);
              if (input.type === "location")
                return /* @__PURE__ */ jsxRuntime.jsxs("div", {
                  style: { width },
                  children: [
                    renderedLabel,
                    /* @__PURE__ */ jsxRuntime.jsx(LocationSelect.LocationSelect, __spreadProps(__spreadValues({
                      register: !isEditingMode && !!input.name && register
                    }, input), {
                      commonStyle: commonStyle2,
                      inputStyle: __spreadValues(__spreadValues({}, inputStyle || {}), input.inputStyle || {}),
                      setValue,
                      trigger,
                      wrapperRef
                    })),
                    renderedError
                  ]
                }, input.name);
              return null;
            }),
            renderCaptchaCheckboxV2(),
            renderCaptchaInvisible(),
            !!hiddenFields.length && hiddenFields.map((field) => {
              if (!field.name)
                return null;
              return /* @__PURE__ */ jsxRuntime.jsx("input", __spreadProps(__spreadValues({
                type: "hidden"
              }, register(field.name)), {
                value: field.value
              }), field.name);
            }),
            React__default["default"].Children.map(
              children,
              (child, index) => {
                if (index === 0)
                  return child ? React__default["default"].cloneElement(child, {
                    loading: loading || customLoading
                  }) : null;
              }
            )
          ]
        })),
        React__default["default"].Children.map(
          children,
          (child, index) => {
            if (index !== 0)
              return React__default["default"].cloneElement(child);
          }
        )
      ]
    });
  }
);
const FormV4 = React__default["default"].forwardRef(
  (props, ref) => {
    const { captcha } = props;
    const captchav3 = (captcha == null ? void 0 : captcha.siteKey) && (captcha == null ? void 0 : captcha.version) === "invisiblev3";
    if (captchav3) {
      return /* @__PURE__ */ jsxRuntime.jsx(reactGoogleRecaptchaV3.GoogleReCaptchaProvider, {
        reCaptchaKey: captcha.siteKey,
        children: /* @__PURE__ */ jsxRuntime.jsx(InnerFormV4, __spreadValues({
          ref
        }, props))
      });
    }
    return /* @__PURE__ */ jsxRuntime.jsx(InnerFormV4, __spreadValues({
      ref
    }, props));
  }
);
const ErrorMessage = styled__default["default"].span(
  ({ errorStyle }) => `
  color: rgb(255, 77, 79);
  font-size: 0.9em;
  ${coreRenderer.getStyle(errorStyle)}
`
);
const Wrapper = styled__default["default"].div(
  ({ commonStyle }) => `
  display: flex;
  width: 100%;
  ${coreRenderer.getStyle(commonStyle)}
`
);
const Form = styled__default["default"].form(
  ({ formStyle }) => `
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  width: 100%;
  ${coreRenderer.getStyle(formStyle)}
`
);
const StyledLabel = styled__default["default"].label(
  ({ labelStyle }) => `
  position: relative;
  margin-bottom: 4px;
  display: inline-flex;
  align-items: center;
  font-size: 14px;
  &.required {
    &:before {
      display: inline-block;
      margin-right: 4px;
      color: #ff4d4f;
      font-size: 14px;
      font-family: SimSun, sans-serif;
      line-height: 1;
      content: '*';
    }
  }
  ${coreRenderer.getStyle(labelStyle)}
`
);
FormV4.displayName = "FormV4";

exports.FormV4 = FormV4;
exports.InnerFormV4 = InnerFormV4;
