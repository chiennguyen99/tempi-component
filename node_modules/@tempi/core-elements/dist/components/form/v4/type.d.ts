import { CommonAttributesInterface, Style } from '@tempi/core-renderer';
import { ImageInterface } from '../../image';
export type Type = 'text' | 'number' | 'tel' | 'email' | 'date' | 'time' | 'datetime-local' | 'select-box' | 'radio-group' | 'checkbox-group' | 'textarea' | 'checkbox-group-image' | 'radio-group-image' | 'file' | 'location' | 'address';
export interface InputInterface extends CommonAttributesInterface {
    inputStyle?: Style;
    optionStyle?: Style;
    name?: string;
    placeholder?: string;
    required?: boolean;
    label?: string;
    disabledFormFieldSetting?: string[];
    typeSelectable?: Type[];
    type: Type;
    multiple?: boolean;
    options?: {
        value: string;
        label: string;
        image?: ImageInterface;
    }[];
    imageConfig?: {
        width?: number;
        radius?: number;
        backgroundSize?: 'auto' | 'cover' | 'contain';
    };
}
type SubmitType = 'api' | 'googleSheet' | 'googleForm';
export declare enum ContentType {
    'json' = "application/json",
    'formData' = "multipart/form-data",
    'urlEncoded' = "application/x-www-form-urlencoded"
}
export interface CustomResponse {
    key?: string;
    value?: number | string;
    popup?: string;
}
export interface FormSubmitResponse {
    success?: string;
    failed?: string;
    successPage?: string;
    failedPage?: string;
    custom?: CustomResponse[];
}
export interface ApiConfig {
    formAccountId?: number;
    url: string;
    method: 'GET' | 'POST' | 'PATCH';
    headers?: string;
    contentType?: ContentType;
    autoPassParams?: boolean;
}
export interface GGSheetConfig {
    formAccountId?: number;
    merchantId?: number;
    spreadSheetId?: string;
    sheetId?: number;
    valid?: boolean;
    url?: string;
    submitTime?: boolean;
    autoPassParams?: boolean;
}
export interface FormSubmit {
    type: SubmitType;
    config?: ApiConfig | GGSheetConfig;
    url?: string;
    response?: FormSubmitResponse;
    method?: 'GET' | 'POST' | 'PATCH';
    headers?: string;
    contentType?: ContentType;
    submitTime?: boolean;
    autoPassParams?: boolean;
}
export interface CaptchaInterface extends CommonAttributesInterface {
    version?: 'checkboxv2' | 'invisiblev2' | 'invisiblev3';
    siteKey?: string;
    requestKey?: string;
    action?: string;
}
export interface ConfigStorageInterface {
    formConfigId?: number;
    submitTime?: boolean;
    autoPassParams?: boolean;
}
export interface FormV4Interface extends CommonAttributesInterface {
    submits: FormSubmit[];
    response?: FormSubmitResponse & {
        responseType?: 'default' | 'custom';
    };
    hiddenFields: {
        name: string;
        value: string;
    }[];
    formStyle?: Style;
    showLabel?: boolean;
    labelStyle?: Style;
    errorStyle?: Style;
    inputStyle?: Style;
    optionStyle?: Style;
    inputs?: InputInterface[];
    mainConnection?: number;
    captcha?: CaptchaInterface;
    configStorage?: ConfigStorageInterface;
}
export {};
//# sourceMappingURL=type.d.ts.map