import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { t } from '../../../../i18n.es.js';
import { PlusOutlined, DeleteOutlined, HolderOutlined } from '@ant-design/icons';
import { DndContext } from '@dnd-kit/core';
import { restrictToVerticalAxis, restrictToWindowEdges, restrictToFirstScrollableAncestor } from '@dnd-kit/modifiers';
import { SortableContext, verticalListSortingStrategy, useSortable, arrayMove } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import styled from '@emotion/styled';
import { useProp, FormItem, InputConfig, ImageConfig } from '@tempi/core-editor';
import { useState } from 'react';
import { PROP_KEY } from '../../../../constants/propKey.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const OptionImageSetting = ({
  index: inputIndex
}) => {
  const [options, setOptions] = useProp(
    PROP_KEY.joinKey(PROP_KEY.Inputs, inputIndex.toString(), PROP_KEY.Options)
  );
  const [activeOption, setActiveOption] = useState();
  const addOption = () => {
    const opts = options || [];
    const defaultText = t("L\u1EF1a ch\u1ECDn {{var0}}", { var0: opts.length + 1 });
    setOptions([
      ...opts,
      {
        label: "",
        value: defaultText
      }
    ]);
  };
  const removeOption = (index) => {
    const cloneOptions = [...options || []];
    cloneOptions.splice(index, 1);
    setOptions(cloneOptions);
  };
  const handleDragEnd = ({ active, over }) => {
    if (active.id !== (over == null ? void 0 : over.id)) {
      const _options = [...options || []];
      const oldIndex = _options.findIndex((el) => el.value === active.id);
      const newIndex = _options.findIndex((el) => el.value === (over == null ? void 0 : over.id));
      setOptions(arrayMove(_options, oldIndex, newIndex));
    }
  };
  return Array.isArray(options) ? /* @__PURE__ */ jsx(FormItem, {
    label: t("Danh s\xE1ch l\u1EF1a ch\u1ECDn"),
    layout: "vertical",
    children: /* @__PURE__ */ jsxs("div", {
      style: { marginTop: 8, marginBottom: 16 },
      children: [
        /* @__PURE__ */ jsx(DndContext, {
          modifiers: [
            restrictToVerticalAxis,
            restrictToWindowEdges,
            restrictToFirstScrollableAncestor
          ],
          onDragEnd: handleDragEnd,
          children: /* @__PURE__ */ jsx(SortableContext, {
            items: options.map((el) => el.value),
            strategy: verticalListSortingStrategy,
            children: options.map((el, idx) => /* @__PURE__ */ jsx(OptionImageConfig, {
              inputIndex,
              activeOption: activeOption || 0,
              setActiveOption,
              option: el,
              index: idx,
              onRemove: () => removeOption(idx)
            }, idx))
          })
        }),
        /* @__PURE__ */ jsxs(StyledTextLink, {
          style: {
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            marginBottom: 8
          },
          onClick: addOption,
          children: [
            /* @__PURE__ */ jsx(PlusOutlined, {
              style: { marginRight: 4 }
            }),
            t("Th\xEAm l\u1EF1a ch\u1ECDn")
          ]
        })
      ]
    })
  }) : null;
};
const OptionImageConfig = ({
  inputIndex,
  index,
  option,
  onRemove,
  activeOption,
  setActiveOption
}) => {
  const { setNodeRef, attributes, listeners, transform } = useSortable({
    id: option.value
  });
  return /* @__PURE__ */ jsx(Fragment, {
    children: /* @__PURE__ */ jsxs(StyledTagField, {
      ref: setNodeRef,
      style: { transform: CSS.Transform.toString(transform) },
      children: [
        /* @__PURE__ */ jsxs(StyledTagHeader, {
          onClick: () => {
            if (activeOption === index)
              setActiveOption(void 0);
            else
              setActiveOption(index);
          },
          children: [
            /* @__PURE__ */ jsxs("div", {
              className: "flex",
              children: [
                /* @__PURE__ */ jsx(StyledAction, __spreadProps(__spreadValues(__spreadValues({}, listeners), attributes), {
                  style: { cursor: "move", marginRight: 8 },
                  children: /* @__PURE__ */ jsx(HolderOutlined, {
                    style: {
                      fontSize: 20
                    }
                  })
                })),
                /* @__PURE__ */ jsx("div", {
                  children: option.value || option.label
                })
              ]
            }),
            /* @__PURE__ */ jsx("div", {
              className: "flex",
              children: /* @__PURE__ */ jsx(StyledAction, {
                onClick: (e) => {
                  e.stopPropagation();
                  onRemove();
                },
                children: /* @__PURE__ */ jsx(DeleteOutlined, {
                  style: {
                    fontSize: 20
                  }
                })
              })
            })
          ]
        }),
        activeOption === index && /* @__PURE__ */ jsxs(StyledTagContent, {
          children: [
            /* @__PURE__ */ jsx(InputConfig, {
              formItemProps: {
                label: t("Nh\xE3n")
              },
              propKey: PROP_KEY.joinKey(
                PROP_KEY.Inputs,
                inputIndex.toString(),
                PROP_KEY.Options,
                index.toString(),
                PROP_KEY.Label
              )
            }),
            /* @__PURE__ */ jsx(InputConfig, {
              formItemProps: {
                label: t("Gi\xE1 tr\u1ECB")
              },
              propKey: PROP_KEY.joinKey(
                PROP_KEY.Inputs,
                inputIndex.toString(),
                PROP_KEY.Options,
                index.toString(),
                PROP_KEY.Value
              )
            }),
            /* @__PURE__ */ jsx(ImageConfig, {
              propKey: PROP_KEY.joinKey(
                PROP_KEY.Inputs,
                inputIndex.toString(),
                PROP_KEY.Options,
                index.toString(),
                PROP_KEY.Image,
                PROP_KEY.Src
              ),
              widthPropKey: PROP_KEY.joinKey(
                PROP_KEY.Inputs,
                inputIndex.toString(),
                PROP_KEY.Options,
                index.toString(),
                PROP_KEY.Image,
                PROP_KEY.GoogleImageParams,
                PROP_KEY.Width
              )
            })
          ]
        })
      ]
    }, index)
  });
};
const StyledTagField = styled.div`
  justify-content: space-between;
  padding: 0.5rem;
  border-radius: 4px;
  border: 1px solid var(--border-color);
  margin-bottom: 8px;
`;
const StyledTagHeader = styled.div`
  display: flex;
  flex-grow: 1;
  align-items: center;
  justify-content: space-between;
  cursor: pointer;
`;
const StyledTagContent = styled.div`
  padding: 0.5rem;
`;
const StyledAction = styled.div`
  background-color: transparent;
  cursor: pointer;
`;
const StyledTextLink = styled.div(
  ({ theme }) => `
  cursor: pointer;
  color: ${theme.colorPrimary} !important;
`
);

export { OptionImageSetting };
