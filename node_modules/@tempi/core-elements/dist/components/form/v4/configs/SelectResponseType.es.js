import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t, getOptionsI18n } from '../../../../i18n.es.js';
import styled from '@emotion/styled';
import { useEditor, useNode, deserializePB } from '@tempi/core-editor';
import { Select, Row, Input, Button } from 'antd';
import { useState, useMemo, useEffect } from 'react';
import { v4 } from 'uuid';
import { DEFAULT_POPUP_SUCCESS } from '../constants.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const defaultResponseTypeSuccessOpt = [
  {
    label: "form_config.response.popup_success",
    value: "popupResponse"
  },
  {
    label: "form_config.response.page_success",
    value: "pageResponse"
  }
];
const defaultResponseTypeFailOpt = [
  {
    label: "form_config.response.popup_failed",
    value: "popupResponse"
  },
  {
    label: "form_config.response.page_failed",
    value: "pageResponse"
  }
];
const SelectResponseType = ({
  value,
  onChange,
  type = "success",
  disabled = false
}) => {
  const [response, setResponse] = useState(value);
  const { actions, addBlock, nodes } = useEditor((state) => ({
    nodes: state.nodes
  }));
  const { id: currentNodeId, childNodes } = useNode((node) => {
    return {
      childNodes: node.data.nodes
    };
  });
  const onChangeResponseType = async (defaultResponseType) => {
    if (defaultResponseType === "popupResponse") {
      const node = deserializePB(
        DEFAULT_POPUP_SUCCESS(`popup_${type}_${v4()}`)
      );
      const newNode = await addBlock(
        node,
        childNodes.length,
        currentNodeId
      );
      onChangeResponse({
        defaultResponseType,
        popupId: newNode.rootNodeId,
        urlPage: ""
      });
    } else {
      if (response == null ? void 0 : response.popupId)
        actions.delete(response.popupId);
      onChangeResponse(__spreadProps(__spreadValues({}, response), {
        defaultResponseType,
        popupId: ""
      }));
    }
  };
  const showPopup = useMemo(() => {
    return (response == null ? void 0 : response.popupId) && (nodes == null ? void 0 : nodes[response.popupId]);
  }, [response == null ? void 0 : response.popupId, nodes]);
  useEffect(() => {
    if ((response == null ? void 0 : response.popupId) && !(nodes == null ? void 0 : nodes[response.popupId])) {
      onChangeResponse(__spreadProps(__spreadValues({}, response), {
        popupId: void 0
      }));
    }
  }, [response == null ? void 0 : response.popupId, nodes]);
  const onChangeResponse = (value2) => {
    onChange(value2);
    setResponse(value2);
  };
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(Select, {
        placeholder: t("Ch\u1ECDn ki\u1EC3u ph\u1EA3n h\u1ED3i"),
        value: response == null ? void 0 : response.defaultResponseType,
        onChange: onChangeResponseType,
        allowClear: true,
        options: type === "success" ? getOptionsI18n(t, defaultResponseTypeSuccessOpt, "label") : getOptionsI18n(t, defaultResponseTypeFailOpt, "label"),
        disabled,
        dropdownStyle: { zIndex: 1080 },
        style: { width: "100%" }
      }),
      /* @__PURE__ */ jsxs(Fragment, {
        children: [
          showPopup && /* @__PURE__ */ jsxs(Row, {
            align: "middle",
            justify: "space-between",
            children: [
              /* @__PURE__ */ jsx(StyledLabel, {
                children: type === "success" ? t("Popup th\xE0nh c\xF4ng") : t("Popup th\u1EA5t b\u1EA1i")
              }),
              /* @__PURE__ */ jsx(StyledButton, {
                type: "link",
                onClick: () => actions.selectNode(response == null ? void 0 : response.popupId),
                disabled,
                children: type === "success" ? t("S\u1EEDa popup th\xE0nh c\xF4ng") : t("S\u1EEDa popup th\u1EA5t b\u1EA1i")
              })
            ]
          }),
          (response == null ? void 0 : response.defaultResponseType) === "pageResponse" && /* @__PURE__ */ jsxs("div", {
            children: [
              /* @__PURE__ */ jsx(StyledLabel, {
                children: type === "success" ? t("URL trang c\u1EA3m \u01A1n") : t("URL trang th\u1EA5t b\u1EA1i")
              }),
              /* @__PURE__ */ jsx(Input, {
                disabled,
                placeholder: t("Nh\u1EADp url trang"),
                value: response == null ? void 0 : response.urlPage,
                onChange: (e) => onChangeResponse(__spreadProps(__spreadValues({}, response), { urlPage: e.target.value }))
              })
            ]
          })
        ]
      })
    ]
  });
};
const StyledLabel = styled.div`
  padding: 8px 0 8px 0;
  line-height: 1.5715;
  white-space: normal;
  text-align: left;
`;
const StyledButton = styled(Button)`
  padding-right: 0;
`;

export { SelectResponseType };
