'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../../../i18n.js');
var core = require('@dnd-kit/core');
var modifiers = require('@dnd-kit/modifiers');
var sortable = require('@dnd-kit/sortable');
var utilities = require('@dnd-kit/utilities');
var styled = require('@emotion/styled');
var reactIcons = require('@fluentui/react-icons');
var coreEditor = require('@tempi/core-editor');
var coreRenderer = require('@tempi/core-renderer');
var antd = require('antd');
var React = require('react');
var constants = require('../constants.js');
var OptionImageSetting = require('./OptionImageSetting.js');
var propKey = require('../../../../constants/propKey.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const FieldConfig = ({
  index,
  input,
  onDuplicate,
  onRemove,
  activeField,
  setActiveField,
  labelStyle
}) => {
  var _a;
  const { setNodeRef, attributes, listeners, transform } = sortable.useSortable({
    id: input.name
  });
  const defaultInputTypeOptions = [
    { value: "text", label: i18n.t("form_config.field.text") },
    { value: "tel", label: i18n.t("form_config.field.tel") },
    { value: "email", label: i18n.t("form_config.field.mail") },
    { value: "number", label: i18n.t("form_config.field.number") },
    { value: "textarea", label: i18n.t("form_config.field.paragraph") },
    { value: "select-box", label: i18n.t("form_config.field.select_box") },
    { value: "radio-group", label: i18n.t("form_config.field.radio_group") },
    {
      value: "radio-group-image",
      label: i18n.t("form_config.field.radio_image_group")
    },
    { value: "checkbox-group", label: i18n.t("form_config.field.checkbox_group") },
    {
      value: "checkbox-group-image",
      label: i18n.t("form_config.field.radio_image_group")
    },
    { value: "date", label: i18n.t("form_config.field.date") },
    { value: "time", label: i18n.t("form_config.field.time") },
    { value: "datetime-local", label: i18n.t("form_config.field.datetime-local") },
    { value: "file", label: i18n.t("form_config.field.file") },
    {
      value: "location",
      label: i18n.t("form_config.field.location")
    },
    { value: "address", label: i18n.t("form_config.field.address") }
  ];
  const inputTypeOptions = ((_a = input == null ? void 0 : input.typeSelectable) == null ? void 0 : _a.length) ? defaultInputTypeOptions.filter(
    (type2) => input.typeSelectable.includes(type2.value)
  ) : defaultInputTypeOptions;
  const flexDirectionOptions = [
    {
      label: i18n.t("common.horizontal"),
      value: "row"
    },
    {
      label: i18n.t("common.vertical"),
      value: "column"
    }
  ];
  const [type, setType] = coreEditor.useProp(
    propKey.PROP_KEY.joinKey(propKey.PROP_KEY.Inputs, index.toString(), propKey.PROP_KEY.Type)
  );
  const [multiple] = coreEditor.useProp(
    propKey.PROP_KEY.joinKey(propKey.PROP_KEY.Inputs, index.toString(), propKey.PROP_KEY.Multiple)
  );
  const [options, setOptions] = coreEditor.useProp(
    propKey.PROP_KEY.joinKey(propKey.PROP_KEY.Inputs, index.toString(), propKey.PROP_KEY.Options)
  );
  const [gap, setGap] = coreEditor.useProp(
    propKey.PROP_KEY.joinKey(
      propKey.PROP_KEY.Inputs,
      index.toString(),
      propKey.PROP_KEY.CommonStyle,
      propKey.PROP_KEY.Gap
    )
  );
  const [imageConfig, setImageConfig] = coreEditor.useProp(
    propKey.PROP_KEY.joinKey(propKey.PROP_KEY.Inputs, index.toString(), propKey.PROP_KEY.ImageConfig)
  );
  const [, setFlexDirectionWrap] = coreEditor.useProp(
    propKey.PROP_KEY.joinKey(
      propKey.PROP_KEY.Inputs,
      index.toString(),
      propKey.PROP_KEY.CommonStyle,
      propKey.PROP_KEY.FlexDirection
    )
  );
  const [, setHeightWrap] = coreEditor.useProp(
    propKey.PROP_KEY.joinKey(
      propKey.PROP_KEY.Inputs,
      index.toString(),
      propKey.PROP_KEY.CommonStyle,
      propKey.PROP_KEY.Height
    )
  );
  const [placeholder, setPlaceholder] = coreEditor.useProp(
    propKey.PROP_KEY.joinKey(propKey.PROP_KEY.Inputs, index.toString(), propKey.PROP_KEY.Placeholder)
  );
  React.useEffect(() => {
    if (["checkbox-group", "radio-group"].includes(type)) {
      setFlexDirectionWrap("column");
      setHeightWrap(void 0);
    }
    if (type === "select-box" && multiple) {
      setHeightWrap(void 0);
    }
    if (["checkbox-group-image", "radio-group-image"].includes(type)) {
      if (!(options == null ? void 0 : options.length)) {
        setOptions([
          {
            label: "",
            value: i18n.t("L\u1EF1a ch\u1ECDn 1")
          },
          {
            label: "",
            value: i18n.t("L\u1EF1a ch\u1ECDn 2")
          }
        ]);
      }
      if (!imageConfig) {
        setImageConfig(constants.DEFAULT_IMAGE_CONFIG);
      }
      setFlexDirectionWrap("row");
      setHeightWrap(void 0);
      if (!gap) {
        setGap(20);
      }
    }
  }, [type, multiple]);
  const generateDefaultPlaceHolder = (inputType) => {
    switch (inputType) {
      case "date":
        setPlaceholder("mm/dd/yyyy");
        break;
      case "time":
        setPlaceholder("--:-- --");
        break;
      case "datetime-local":
        setPlaceholder("mm/dd/yyyy --:-- --");
        break;
      default:
        setPlaceholder("");
        break;
    }
  };
  const isDisableSetting = (propKey) => {
    return ((input == null ? void 0 : input.disabledFormFieldSetting) || []).includes(propKey);
  };
  React.useEffect(() => {
    if (!placeholder) {
      generateDefaultPlaceHolder(type);
    }
  }, []);
  return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: /* @__PURE__ */ jsxRuntime.jsxs(StyledTagField, {
      ref: setNodeRef,
      style: { transform: utilities.CSS.Transform.toString(transform) },
      children: [
        /* @__PURE__ */ jsxRuntime.jsxs(StyledTagHeader, {
          onClick: () => {
            if (activeField === index)
              setActiveField(void 0);
            else
              setActiveField(index);
          },
          children: [
            /* @__PURE__ */ jsxRuntime.jsxs("div", {
              className: "flex",
              children: [
                /* @__PURE__ */ jsxRuntime.jsx(StyledAction, __spreadProps(__spreadValues(__spreadValues({}, listeners), attributes), {
                  style: { cursor: "move", marginRight: 8 },
                  children: /* @__PURE__ */ jsxRuntime.jsx(reactIcons.ReOrderDotsVerticalRegular, {
                    style: {
                      fontSize: 20
                    }
                  })
                })),
                /* @__PURE__ */ jsxRuntime.jsx("div", {
                  style: labelStyle,
                  children: input.name || input.label
                })
              ]
            }),
            /* @__PURE__ */ jsxRuntime.jsxs("div", {
              className: "flex",
              children: [
                onDuplicate && /* @__PURE__ */ jsxRuntime.jsx(StyledAction, {
                  style: { marginRight: 8 },
                  onClick: (e) => {
                    e.stopPropagation();
                    onDuplicate();
                  },
                  children: /* @__PURE__ */ jsxRuntime.jsx(reactIcons.CopyRegular, {
                    style: {
                      fontSize: 16
                    }
                  })
                }),
                /* @__PURE__ */ jsxRuntime.jsx(StyledAction, {
                  onClick: (e) => {
                    e.stopPropagation();
                    onRemove();
                  },
                  children: /* @__PURE__ */ jsxRuntime.jsx(reactIcons.DeleteRegular, {
                    style: {
                      fontSize: 16
                    }
                  })
                })
              ]
            })
          ]
        }),
        activeField === index && /* @__PURE__ */ jsxRuntime.jsxs(StyledTagContent, {
          children: [
            /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
              formItemProps: {
                label: i18n.t("Lo\u1EA1i"),
                layout: "vertical"
              },
              selectProps: {
                style: {
                  width: "100%"
                },
                value: type,
                onChange: (value) => {
                  setType(value);
                  generateDefaultPlaceHolder(value);
                },
                disabled: isDisableSetting(propKey.PROP_KEY.Type)
              },
              options: inputTypeOptions
            }),
            /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputConfig, {
              showTooltip: true,
              tooltipProps: {
                zIndex: 2001,
                title: i18n.t("data_name_tooltip")
              },
              formItemProps: {
                label: i18n.t("T\xEAn l\u1EA5y d\u1EEF li\u1EC7u")
              },
              propKey: propKey.PROP_KEY.joinKey(
                propKey.PROP_KEY.Inputs,
                index.toString(),
                propKey.PROP_KEY.Name
              ),
              inputProps: {
                disabled: isDisableSetting(propKey.PROP_KEY.Name)
              }
            }),
            /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputConfig, {
              formItemProps: {
                label: i18n.t("Nh\xE3n")
              },
              propKey: propKey.PROP_KEY.joinKey(
                propKey.PROP_KEY.Inputs,
                index.toString(),
                propKey.PROP_KEY.Label
              )
            }),
            /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputConfig, {
              formItemProps: {
                label: i18n.t("Ch\u1EEF g\u1EE3i nh\u1EAFc")
              },
              propKey: propKey.PROP_KEY.joinKey(
                propKey.PROP_KEY.Inputs,
                index.toString(),
                propKey.PROP_KEY.Placeholder
              )
            }),
            /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SwitchConfig, {
              formItemProps: {
                label: i18n.t("B\u1EAFt bu\u1ED9c nh\u1EADp")
              },
              switchProps: {
                disabled: isDisableSetting(propKey.PROP_KEY.Required)
              },
              propKey: propKey.PROP_KEY.joinKey(
                propKey.PROP_KEY.Inputs,
                index.toString(),
                propKey.PROP_KEY.Required
              )
            }),
            type === "select-box" && /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SwitchConfig, {
              formItemProps: {
                label: i18n.t("Ch\u1ECDn nhi\u1EC1u")
              },
              propKey: propKey.PROP_KEY.joinKey(
                propKey.PROP_KEY.Inputs,
                index.toString(),
                propKey.PROP_KEY.Multiple
              )
            }),
            [
              "radio-group",
              "checkbox-group",
              "radio-group-image",
              "checkbox-group-image"
            ].includes(type) && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
              children: [
                /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
                  formItemProps: {
                    label: i18n.t("Ki\u1EC3u hi\u1EC3n th\u1ECB")
                  },
                  options: flexDirectionOptions,
                  propKey: propKey.PROP_KEY.joinKey(
                    propKey.PROP_KEY.Inputs,
                    index.toString(),
                    propKey.PROP_KEY.CommonStyle,
                    propKey.PROP_KEY.FlexDirection
                  )
                }),
                /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
                  formItemProps: {
                    label: i18n.t("Kho\u1EA3ng c\xE1ch")
                  },
                  unitProps: { defaultValue: coreRenderer.UnitEnum.pixel },
                  propKey: propKey.PROP_KEY.joinKey(
                    propKey.PROP_KEY.Inputs,
                    index.toString(),
                    propKey.PROP_KEY.CommonStyle,
                    propKey.PROP_KEY.Gap
                  )
                })
              ]
            }),
            ["radio-group", "checkbox-group", "select-box"].includes(type) && /* @__PURE__ */ jsxRuntime.jsx(coreEditor.TextareaToOptionConfig, {
              textareaProps: {
                rows: 4
              },
              formItemProps: {
                label: i18n.t("Danh s\xE1ch ch\u1ECDn"),
                tip: /* @__PURE__ */ jsxRuntime.jsx(antd.Typography.Text, {
                  type: "secondary",
                  style: { marginTop: 4 },
                  children: i18n.t(
                    'Nh\u1EADp m\u1ED7i option tr\xEAn 1 d\xF2ng \u0111\u01A1n. \u0110\u1EC3 ph\xE2n bi\u1EC7t gi\u1EEFa label v\xE0 value, s\u1EED d\u1EE5ng k\xFD t\u1EF1 "|"'
                  )
                }),
                layout: "vertical"
              },
              propKey: propKey.PROP_KEY.joinKey(
                propKey.PROP_KEY.Inputs,
                index.toString(),
                propKey.PROP_KEY.Options
              )
            }),
            ["radio-group-image", "checkbox-group-image"].includes(type) && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
              children: [
                /* @__PURE__ */ jsxRuntime.jsx(OptionImageSetting.OptionImageSetting, {
                  index
                }),
                /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
                  formItemProps: {
                    label: i18n.t("Chi\u1EC1u r\u1ED9ng h\xECnh \u1EA3nh")
                  },
                  unitProps: { defaultValue: coreRenderer.UnitEnum.pixel },
                  propKey: propKey.PROP_KEY.joinKey(
                    propKey.PROP_KEY.Inputs,
                    index.toString(),
                    propKey.PROP_KEY.ImageConfig,
                    propKey.PROP_KEY.Width
                  )
                }),
                /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
                  formItemProps: {
                    label: i18n.t("Bo vi\u1EC1n h\xECnh \u1EA3nh")
                  },
                  unitProps: { defaultValue: coreRenderer.UnitEnum.pixel },
                  propKey: propKey.PROP_KEY.joinKey(
                    propKey.PROP_KEY.Inputs,
                    index.toString(),
                    propKey.PROP_KEY.ImageConfig,
                    propKey.PROP_KEY.Radius
                  )
                }),
                /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
                  propKey: propKey.PROP_KEY.joinKey(
                    propKey.PROP_KEY.Inputs,
                    index.toString(),
                    propKey.PROP_KEY.ImageConfig,
                    propKey.PROP_KEY.BackgroundSize
                  ),
                  options: [
                    { label: i18n.t("T\u1EF1 \u0111\u1ED9ng"), value: "auto" },
                    { label: i18n.t("L\xE0m \u0111\u1EA7y"), value: "cover" },
                    { label: i18n.t("V\u1EEBa m\xE0n h\xECnh"), value: "contain" }
                  ],
                  formItemProps: {
                    label: i18n.t("T\u1EC9 l\u1EC7")
                  },
                  selectProps: {
                    defaultValue: "cover"
                  }
                })
              ]
            }),
            /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
              formItemProps: {
                label: i18n.t("Chi\u1EC1u r\u1ED9ng")
              },
              unitProps: { defaultValue: coreRenderer.UnitEnum.percent },
              usePropOptions: coreEditor.usePropOptionsUnitPercent,
              propKey: propKey.PROP_KEY.joinKey(
                propKey.PROP_KEY.Inputs,
                index.toString(),
                propKey.PROP_KEY.CommonStyle,
                propKey.PROP_KEY.Width
              )
            }),
            /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
              formItemProps: {
                label: i18n.t("Chi\u1EC1u cao")
              },
              unitProps: { defaultValue: coreRenderer.UnitEnum.pixel },
              propKey: propKey.PROP_KEY.joinKey(
                propKey.PROP_KEY.Inputs,
                index.toString(),
                propKey.PROP_KEY.CommonStyle,
                propKey.PROP_KEY.Height
              )
            })
          ]
        })
      ]
    }, index)
  });
};
const FormFieldSetting = () => {
  const [inputs, setInputs] = coreEditor.useProp(propKey.PROP_KEY.Inputs);
  const [activeField, setActiveField] = React.useState();
  const addField = () => {
    setInputs([
      ...inputs,
      {
        type: "text",
        name: "form_item" + (inputs.length + 1),
        label: "form_item" + (inputs.length + 1),
        commonStyle: { height: 32, width: "100%" }
      }
    ]);
  };
  const removeField = (index) => {
    const cloneInputs = [...inputs];
    cloneInputs.splice(index, 1);
    setInputs(cloneInputs);
  };
  const duplicateField = (index) => {
    const newInput = __spreadProps(__spreadValues({}, inputs[index]), {
      name: inputs[index].name + new Date().getTime().toString()
    });
    const cloneInputs = [...inputs];
    cloneInputs.splice(index + 1, 0, newInput);
    setInputs(cloneInputs);
  };
  const handleDragEnd = ({ active, over }) => {
    if (active.id !== over.id) {
      const _inputs = [...inputs];
      const oldIndex = _inputs.findIndex((el) => el.name === active.id);
      const newIndex = _inputs.findIndex((el) => el.name === over.id);
      setInputs(sortable.arrayMove(_inputs, oldIndex, newIndex));
    }
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(core.DndContext, {
        modifiers: [
          modifiers.restrictToVerticalAxis,
          modifiers.restrictToWindowEdges,
          modifiers.restrictToFirstScrollableAncestor
        ],
        onDragEnd: handleDragEnd,
        children: /* @__PURE__ */ jsxRuntime.jsx(sortable.SortableContext, {
          items: inputs.map((el) => el.name),
          strategy: sortable.verticalListSortingStrategy,
          children: inputs.map((el, index) => /* @__PURE__ */ jsxRuntime.jsx(FieldConfig, {
            activeField,
            setActiveField,
            input: el,
            index,
            onDuplicate: () => duplicateField(index),
            onRemove: () => removeField(index)
          }, index))
        })
      }),
      /* @__PURE__ */ jsxRuntime.jsx(antd.Button, {
        style: {
          marginTop: 8,
          marginBottom: 8
        },
        type: "primary",
        block: true,
        onClick: addField,
        shape: "round",
        children: i18n.t("Th\xEAm tr\u01B0\u1EDDng")
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SwitchConfig, {
        propKey: propKey.PROP_KEY.ShowLabel,
        formItemProps: { label: i18n.t("Hi\u1EC3n th\u1ECB nh\xE3n") }
      })
    ]
  });
};
const StyledTagField = styled__default["default"].div`
  justify-content: space-between;
  padding: 0.5rem;
  border-radius: 4px;
  border: 1px solid var(--border-color);
  margin-bottom: 8px;
`;
const StyledTagHeader = styled__default["default"].div`
  display: flex;
  flex-grow: 1;
  align-items: center;
  justify-content: space-between;
  cursor: pointer;
`;
const StyledTagContent = styled__default["default"].div`
  padding: 0.5rem;
`;
const StyledAction = styled__default["default"].div`
  background-color: transparent;
  cursor: pointer;
`;

exports.FieldConfig = FieldConfig;
exports.FormFieldSetting = FormFieldSetting;
