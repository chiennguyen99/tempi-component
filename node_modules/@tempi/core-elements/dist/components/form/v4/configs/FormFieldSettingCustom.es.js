import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../../../i18n.es.js';
import { useState } from 'react';
import { useProp, SwitchConfig } from '@tempi/core-editor';
import { DndContext } from '@dnd-kit/core';
import { restrictToVerticalAxis, restrictToWindowEdges, restrictToFirstScrollableAncestor } from '@dnd-kit/modifiers';
import { SortableContext, verticalListSortingStrategy, arrayMove } from '@dnd-kit/sortable';
import { FieldConfig } from './FormFieldSetting.es.js';
import { Typography, Select, Button, Modal } from 'antd';
import { PROP_KEY } from '../../../../constants/propKey.es.js';

const FormFieldSettingCustom = ({
  formFieldOptions,
  requiredInputs = ["phone", "email", "externalId"],
  noticeRequiredFieldText = t("C\u1EA7n c\xF3 \xEDt nh\u1EA5t 1 trong c\xE1c tr\u01B0\u1EDDng {{var0}}", {
    var0: requiredInputs.join("/")
  })
}) => {
  const [inputs, setInputs] = useProp(PROP_KEY.Inputs);
  const [activeField, setActiveField] = useState();
  const [selectedAdditionalOption, setSelectedAdditionalOption] = useState();
  const additionalOptions = formFieldOptions.filter(
    (option) => !inputs.find((input) => input.name === option.name)
  );
  const addField = () => {
    setInputs([...inputs, selectedAdditionalOption]);
    setSelectedAdditionalOption(void 0);
  };
  const removeField = (index) => {
    const cloneInputs = [...inputs];
    const removedInput = cloneInputs.splice(index, 1);
    if (requiredInputs.includes(removedInput[0].name)) {
      const canRemoveRequiredField = cloneInputs.some(
        (item) => requiredInputs.includes(item.name)
      );
      if (!canRemoveRequiredField) {
        Modal.info({
          title: t("Th\xF4ng b\xE1o"),
          content: noticeRequiredFieldText,
          centered: true,
          width: 500,
          zIndex: 9999
        });
        return;
      }
    }
    setInputs(cloneInputs);
  };
  const onChange = (value, option) => {
    setSelectedAdditionalOption(option);
  };
  const handleDragEnd = ({ active, over }) => {
    if (active.id !== over.id) {
      const _inputs = [...inputs];
      const oldIndex = _inputs.findIndex((el) => el.name === active.id);
      const newIndex = _inputs.findIndex((el) => el.name === over.id);
      setInputs(arrayMove(_inputs, oldIndex, newIndex));
    }
  };
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      requiredInputs.length && /* @__PURE__ */ jsx("div", {
        style: { marginBottom: 8 },
        children: /* @__PURE__ */ jsxs(Typography.Text, {
          type: "secondary",
          children: [
            t("*L\u01B0u \xFD:"),
            noticeRequiredFieldText
          ]
        })
      }),
      /* @__PURE__ */ jsx(DndContext, {
        modifiers: [
          restrictToVerticalAxis,
          restrictToWindowEdges,
          restrictToFirstScrollableAncestor
        ],
        onDragEnd: handleDragEnd,
        children: /* @__PURE__ */ jsx(SortableContext, {
          items: inputs.map((el) => el.name),
          strategy: verticalListSortingStrategy,
          children: inputs.map((el, index) => /* @__PURE__ */ jsx(FieldConfig, {
            activeField,
            setActiveField,
            input: el,
            index,
            onRemove: () => removeField(index),
            labelStyle: requiredInputs.includes(el.name) ? { color: "#e10202" } : void 0
          }, index))
        })
      }),
      /* @__PURE__ */ jsxs("div", {
        children: [
          /* @__PURE__ */ jsx("h4", {
            children: t("Th\xEAm tr\u01B0\u1EDDng")
          }),
          /* @__PURE__ */ jsx(Select, {
            options: additionalOptions,
            style: { width: "100%" },
            dropdownStyle: { zIndex: 9999 },
            placeholder: t("Ch\u1ECDn tr\u01B0\u1EDDng c\u1EA7n th\xEAm"),
            onChange,
            allowClear: true,
            value: selectedAdditionalOption,
            disabled: !additionalOptions.length,
            fieldNames: { label: "name", value: "name" }
          }),
          /* @__PURE__ */ jsx(Button, {
            style: {
              marginTop: 8,
              marginBottom: 8
            },
            type: "primary",
            block: true,
            onClick: addField,
            shape: "round",
            disabled: !selectedAdditionalOption,
            children: t("Th\xEAm tr\u01B0\u1EDDng")
          })
        ]
      }),
      /* @__PURE__ */ jsx(SwitchConfig, {
        propKey: PROP_KEY.ShowLabel,
        formItemProps: { label: t("Hi\u1EC3n th\u1ECB nh\xE3n") }
      })
    ]
  });
};

export { FormFieldSettingCustom };
