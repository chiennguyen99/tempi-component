'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var i18n = require('../../../i18n.js');
var coreRenderer = require('@tempi/core-renderer');
var React = require('react');
var type = require('./type.js');
var utils = require('./utils.js');
var get = require('lodash.get');
var queryStringToObject = require('../../../utils/queryStringToObject.js');
var getPartialDateTimeTimeZone7 = require('../../../utils/getPartialDateTimeTimeZone7.js');
var transformValueGGSheet = require('../../../utils/transformValueGGSheet.js');
var form = require('../../../utils/form.js');
var isUrlValid = require('../../../utils/isUrlValid.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var get__default = /*#__PURE__*/_interopDefaultLegacy(get);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const api = new coreRenderer.Api("");
const useForm = ({
  wrapperRef,
  response
}) => {
  const [loading, setLoading] = React.useState(false);
  const { env } = coreRenderer.useStore();
  const popupContentTemplates = React.useRef({});
  const handleCallAPI = async (submit, oldValues, inputs) => {
    const { type: submitType, config } = submit;
    let newValues = __spreadValues({}, oldValues);
    if (config == null ? void 0 : config.autoPassParams) {
      newValues = __spreadValues(__spreadValues({}, queryStringToObject.queryStringToObject(window.location.search)), newValues);
    }
    if (submitType === "api") {
      const values = transformValues(newValues, inputs);
      const apiConfig = config;
      let headers;
      try {
        headers = JSON.parse((apiConfig == null ? void 0 : apiConfig.headers) || "{}");
      } catch (error) {
        headers = {};
      }
      if (["PATCH", "POST"].includes(apiConfig == null ? void 0 : apiConfig.method)) {
        const contentType = headers["Content-Type"] || (apiConfig == null ? void 0 : apiConfig.contentType) || type.ContentType.urlEncoded;
        return api.post(apiConfig == null ? void 0 : apiConfig.url, utils.formatData(contentType, values), {
          headers: __spreadValues(__spreadValues({}, !/^multipart\//.test(contentType) && {
            "Content-Type": contentType
          }), headers)
        }).catch((err) => {
          console.error(err);
          return Promise.reject(err);
        });
      }
      if ((apiConfig == null ? void 0 : apiConfig.method) === "GET") {
        return api.get(apiConfig == null ? void 0 : apiConfig.url, { params: values, headers }).catch((err) => {
          console.error(err);
          return Promise.reject(err);
        });
      }
    }
    if (submitType === "googleSheet") {
      const values = transformValueGGSheet.transformValuesGGSheet(newValues, inputs);
      const ggSheetConfig = config;
      if (!ggSheetConfig.valid || ggSheetConfig.formAccountId <= 0) {
        const err = i18n.t("M\u1ED9t k\u1EBFt n\u1ED1i Google Sheet ch\u01B0a s\u1EB5n s\xE0ng, ki\u1EC3m tra l\u1EA1i!");
        console.error(err);
        return Promise.reject(err);
      }
      const date = new Date();
      const { year, month, day, hour, minute, second } = getPartialDateTimeTimeZone7.getPartialDateTimeTimeZone7(date);
      const dateString = `${year}-${month}-${day} ${hour}:${minute}:${second}`;
      const objSubmitTime = (ggSheetConfig == null ? void 0 : ggSheetConfig.submitTime) ? [
        {
          name: i18n.t("Th\u1EDDi gian g\u1EEDi"),
          type: "string",
          value: dateString
        }
      ] : [];
      return form.formUtils.insertDataToGoogleSheetV2(
        ggSheetConfig,
        [...objSubmitTime, ...values],
        `${coreRenderer.publicBffUrl[env]}/v1/submit-form`
      );
    }
  };
  const handleOpenPopup = (popupId, apiResponse, templateContent) => {
    if (!popupId || !templateContent)
      return;
    const popupEle = wrapperRef.current.ownerDocument.querySelector(
      `[data-uniq-id="${popupId}"]`
    );
    const popupContent = popupEle == null ? void 0 : popupEle.querySelector(".popup-content");
    popupContent.querySelectorAll("p, h1, h2, h3, h4, h5, h6").forEach((el, index) => {
      const data = apiResponse == null ? void 0 : apiResponse.data;
      const searchRegExp = /{{([\w,.]*)}}/g;
      el.innerHTML = templateContent[index].replaceAll(searchRegExp, (i) => {
        return get__default["default"](data, i.replace(/{{/, "").replace(/}}/, ""));
      });
    });
    popupEle == null ? void 0 : popupEle.click();
  };
  const handleSuccess = (apiResponse) => {
    if (!!(response == null ? void 0 : response.successPage) && isUrlValid.isUrlValid(response.successPage))
      window.location.href = response == null ? void 0 : response.successPage;
    if (!!(response == null ? void 0 : response.success))
      handleOpenPopup(
        response.success,
        apiResponse,
        getTemplatePopupContent(response.success)
      );
  };
  const handleFailed = (apiResponse) => {
    if (!!(response == null ? void 0 : response.failedPage) && isUrlValid.isUrlValid(response.failedPage))
      window.location.href = response == null ? void 0 : response.failedPage;
    if (!!(response == null ? void 0 : response.failed))
      handleOpenPopup(
        response.failed,
        apiResponse,
        getTemplatePopupContent(response.failed)
      );
  };
  const handleCustomResponse = (apiResponse) => {
    var _a;
    if (!((_a = response == null ? void 0 : response.custom) == null ? void 0 : _a.length))
      return;
    response.custom.forEach((item) => {
      var _a2, _b, _c;
      if (((_b = (_a2 = get__default["default"](apiResponse == null ? void 0 : apiResponse.data, item.key)) == null ? void 0 : _a2.toString) == null ? void 0 : _b.call(_a2)) === ((_c = item.value) == null ? void 0 : _c.toString())) {
        handleOpenPopup(
          item.popup,
          apiResponse,
          getTemplatePopupContent(item.popup)
        );
        return;
      }
    });
  };
  const getTemplatePopupContent = (popupId) => {
    if (!popupContentTemplates.current[popupId]) {
      const popupEle = wrapperRef.current.ownerDocument.querySelector(
        `[data-uniq-id="${popupId}"]`
      );
      if (popupEle) {
        const list = [
          ...popupEle.querySelectorAll(
            ".popup-content p, h1, h2, h3, h4, h5, h6"
          )
        ].map((el) => el.innerHTML);
        popupContentTemplates.current[popupId] = list;
      }
    }
    return popupContentTemplates.current[popupId];
  };
  const handleMultiSubmit = async (submits, newValues, inputs, mainConnection) => {
    let allSubmits = [...submits];
    const mainSubmit = allSubmits == null ? void 0 : allSubmits[mainConnection];
    setLoading(true);
    try {
      if (!mainSubmit) {
        await Promise.all(
          submits.map((submit) => handleCallAPI(submit, newValues, inputs))
        );
      } else {
        allSubmits.splice(mainConnection, 0);
        allSubmits = [mainSubmit, ...allSubmits];
        await Promise.all(
          allSubmits.map(async (submit, index) => {
            if (index === 0)
              return handleCallAPI(submit, newValues, inputs);
            return handleCallAPI(submit, newValues, inputs).catch(() => {
            });
          })
        ).then(([result]) => {
          if ((response == null ? void 0 : response.responseType) === "default") {
            handleSuccess(result);
          }
          if ((response == null ? void 0 : response.responseType) === "custom") {
            handleCustomResponse(result);
          }
        }).catch((err) => {
          if ((response == null ? void 0 : response.responseType) === "default") {
            handleFailed({ data: (err == null ? void 0 : err.response) || {} });
          }
          if ((response == null ? void 0 : response.responseType) === "custom") {
            handleCustomResponse({ data: (err == null ? void 0 : err.response) || {} });
          }
        });
      }
    } finally {
      setLoading(false);
    }
  };
  const handleSubmitFormData = async (configStorage, values, inputs) => {
    var _b;
    try {
      setLoading(true);
      const _a = queryStringToObject.queryStringToObject(window.location.search) || {}, {
        utm_source,
        utm_medium,
        utm_campaign,
        utm_term,
        utm_content
      } = _a, rest = __objRest(_a, [
        "utm_source",
        "utm_medium",
        "utm_campaign",
        "utm_term",
        "utm_content"
      ]);
      const newValues = __spreadValues(__spreadValues({
        utm_source,
        utm_medium,
        utm_campaign,
        utm_term,
        utm_content
      }, (configStorage == null ? void 0 : configStorage.autoPassParams) && rest), values);
      const date = new Date();
      const { year, month, day, hour, minute, second } = getPartialDateTimeTimeZone7.getPartialDateTimeTimeZone7(date);
      const dateString = `${year}-${month}-${day} ${hour}:${minute}:${second}`;
      let valuesSubmit = transformValueGGSheet.transformValuesGGSheet(newValues, inputs);
      valuesSubmit = [
        ...valuesSubmit,
        {
          name: "Sending time",
          type: "string",
          value: dateString
        },
        {
          name: "Url page",
          type: "string",
          value: (_b = window == null ? void 0 : window.location) == null ? void 0 : _b.href
        }
      ];
      await form.formUtils.submitFormData(
        configStorage == null ? void 0 : configStorage.formConfigId,
        valuesSubmit,
        `${coreRenderer.publicBffUrl[env]}/v1/submit-form`
      ).then((result) => {
        if ((response == null ? void 0 : response.responseType) === "default") {
          handleSuccess(result);
        }
        if ((response == null ? void 0 : response.responseType) === "custom") {
          handleCustomResponse(result);
        }
      }).catch((err) => {
        if ((response == null ? void 0 : response.responseType) === "default") {
          handleFailed({ data: (err == null ? void 0 : err.response) || {} });
        }
        if ((response == null ? void 0 : response.responseType) === "custom") {
          handleCustomResponse({ data: (err == null ? void 0 : err.response) || {} });
        }
      });
    } finally {
      setLoading(false);
    }
  };
  const transformValues = (values, inputs) => {
    const dateFields = inputs.filter((el) => el.type === "date").map((el) => el.name);
    const timeFields = inputs.filter((el) => el.type === "time").map((el) => el.name);
    const dateTimeFields = inputs.filter((el) => el.type === "datetime-local").map((el) => el.name);
    return Object.entries(values).map(([k, v]) => {
      if (dateFields.includes(k) && !!v) {
        const { year, month, day } = getPartialDateTimeTimeZone7.getPartialDateTimeTimeZone7(
          new Date(v)
        );
        return [k, `${day}-${month}-${year}`];
      }
      if (timeFields.includes(k) && !!v) {
        const { hour, minute, second } = getPartialDateTimeTimeZone7.getPartialDateTimeTimeZone7(
          new Date(v)
        );
        return [k, `${hour}:${minute}:${second}`];
      }
      if (dateTimeFields.includes(k) && !!v) {
        const { year, month, day, hour, minute, second } = getPartialDateTimeTimeZone7.getPartialDateTimeTimeZone7(new Date(v));
        return [k, `${day}-${month}-${year} ${hour}:${minute}:${second}`];
      }
      return [k, v];
    }).reduce((acc, curr) => __spreadProps(__spreadValues({}, acc), { [curr[0]]: curr[1] }), {});
  };
  return {
    handleMultiSubmit,
    loading,
    handleSubmitFormData
  };
};

exports.useForm = useForm;
