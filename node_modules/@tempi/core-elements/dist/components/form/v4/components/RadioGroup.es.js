import { jsx, jsxs } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { getStyle } from '@tempi/core-renderer';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const RadioGroup = (props) => {
  const _a = props, {
    commonStyle,
    inputStyle,
    labelStyle,
    optionStyle,
    register,
    name,
    id,
    options = []
  } = _a, rest = __objRest(_a, [
    "commonStyle",
    "inputStyle",
    "labelStyle",
    "optionStyle",
    "register",
    "name",
    "id",
    "options"
  ]);
  return /* @__PURE__ */ jsx(Wrapper, {
    commonStyle,
    id,
    children: options.map((el) => /* @__PURE__ */ jsxs(StyledLabelWrapper, {
      style: { display: "flex", alignItems: "center" },
      children: [
        /* @__PURE__ */ jsx(StyledInput, __spreadProps(__spreadValues({
          inputStyle,
          value: el.value
        }, register ? register(name, rest) : __spreadValues({ name }, rest)), {
          type: "radio"
        })),
        /* @__PURE__ */ jsx(StyledLabel, {
          labelStyle: optionStyle,
          children: el.label
        })
      ]
    }, el.value))
  });
};
const Wrapper = styled.div(
  ({ commonStyle }) => `
  display: flex;
  flex-wrap: wrap;
  overflow: hidden;
  ${getStyle(commonStyle)}
`
);
const StyledLabel = styled.div(
  ({ labelStyle }) => `
  vertical-align: middle;
  margin-left: 0.25rem;
  width: -webkit-fill-available;
  ${getStyle(labelStyle)}
  `
);
const StyledLabelWrapper = styled.label`
  vertical-align: middle;
  margin-bottom: 0;
`;
const StyledInput = styled.input(
  ({ inputStyle }) => `
  ${getStyle(inputStyle)}
`
);

export { RadioGroup };
