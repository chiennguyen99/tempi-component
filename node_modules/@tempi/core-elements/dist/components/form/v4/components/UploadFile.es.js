import { jsxs, jsx } from 'react/jsx-runtime';
import { t } from '../../../../i18n.es.js';
import styled from '@emotion/styled';
import { Icon } from '@tempi/icons';
import { useStore, getStyle, Api, publicBffUrl } from '@tempi/core-renderer';
import { useState, useRef } from 'react';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const MAX_FILE_BYTE_SIZE = 10485760;
const MAX_FILE_MB_SIZE = Math.round(MAX_FILE_BYTE_SIZE / (1024 * 1024));
const UploadFile = (props) => {
  var _b, _c;
  const _a = props, {
    commonStyle,
    inputStyle,
    register,
    name,
    id,
    setValue,
    errorStyle
  } = _a, rest = __objRest(_a, [
    "commonStyle",
    "inputStyle",
    "register",
    "name",
    "id",
    "setValue",
    "errorStyle"
  ]);
  const { env = "local" } = useStore();
  const [isUploading, setUploading] = useState(false);
  const [error, setError] = useState("");
  const ref = useRef(null);
  const handleChange = async (event) => {
    var _a2, _b2;
    setError("");
    const selectedFile = event.target.files[0];
    if (selectedFile.size > MAX_FILE_BYTE_SIZE) {
      setError(
        t(
          "Dung l\u01B0\u1EE3ng t\u1EC7p kh\xF4ng \u0111\u01B0\u1EE3c v\u01B0\u1EE3t qu\xE1 {{MAX_FILE_MB_SIZE}}MB. Vui l\xF2ng ch\u1ECDn l\u1EA1i",
          { MAX_FILE_MB_SIZE }
        )
      );
      return;
    }
    const formData = new FormData();
    formData.append("file", selectedFile);
    const isImage = !!((_a2 = selectedFile == null ? void 0 : selectedFile.type) == null ? void 0 : _a2.match("image"));
    formData.append("type", isImage ? "image" : "doc");
    setUploading(true);
    const API = new Api(publicBffUrl[env]);
    try {
      const res = await API.post("/v1/upload", formData);
      register(name).onChange(event);
      const url = (_b2 = res == null ? void 0 : res.data) == null ? void 0 : _b2.url;
      setValue(name, url);
    } catch (error2) {
      setError(t("\u0110\xE3 x\u1EA3y ra l\u1ED7i khi upload file. Vui l\xF2ng th\u1EED l\u1EA1i."));
    } finally {
      setUploading(false);
    }
  };
  const preventSubmit = () => !isUploading;
  return /* @__PURE__ */ jsxs(Wrapper, {
    commonStyle,
    id,
    children: [
      /* @__PURE__ */ jsxs("div", {
        children: [
          /* @__PURE__ */ jsxs(StyledButton, {
            disabled: isUploading,
            onClick: (e) => {
              var _a2;
              e.preventDefault();
              (_a2 = ref == null ? void 0 : ref.current) == null ? void 0 : _a2.click();
            },
            children: [
              /* @__PURE__ */ jsx(Icon, {
                name: "UploadOutlined",
                style: { marginRight: "0.25em", fontSize: "16px" }
              }),
              isUploading ? t("\u0110ang t\u1EA3i l\xEAn") : t("Ch\u1ECDn t\u1EC7p tin (t\u1ED1i \u0111a {{MAX_FILE_MB_SIZE}}MB)", {
                MAX_FILE_MB_SIZE
              })
            ]
          }),
          ((_b = ref == null ? void 0 : ref.current) == null ? void 0 : _b.files.length) > 0 ? `(${(_c = ref == null ? void 0 : ref.current) == null ? void 0 : _c.files[0].name})` : ""
        ]
      }),
      error && /* @__PURE__ */ jsx(ErrorMessage, {
        errorStyle,
        children: error
      }),
      /* @__PURE__ */ jsx("input", __spreadProps(__spreadValues({}, register ? register(name, __spreadProps(__spreadValues({}, rest), { validate: { preventSubmit } })) : __spreadValues({ name }, rest)), {
        ref,
        onChange: handleChange,
        type: "file",
        accept: ".jpg, .jpeg, .png, .gif, .docx, .docs, .doc, .xls, .xlsx, .zip, .pdf",
        style: { display: "none" }
      }))
    ]
  });
};
const Wrapper = styled.div(
  ({ commonStyle }) => `
  ${getStyle(commonStyle)}
    margin-bottom: 0.5em;
    height: unset!important;
  `
);
const StyledButton = styled.button`
  border-radius: 4px;
  margin-right: 4px;
  padding: 0.5em 0.75em;
`;
const ErrorMessage = styled.span(
  ({ errorStyle }) => `
  color: rgb(255, 77, 79);
  font-size: 0.9em;
  ${getStyle(errorStyle)}
`
);

export { UploadFile };
