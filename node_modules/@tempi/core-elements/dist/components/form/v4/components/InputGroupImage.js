'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var styled = require('@emotion/styled');
var coreRenderer = require('@tempi/core-renderer');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const { defaultImage, checkedInputGroupImageBkg } = coreRenderer.mappingAssets;
const InputGroupImage = (props) => {
  const _a = props, {
    commonStyle,
    inputStyle,
    optionStyle,
    register,
    name,
    id,
    options = [],
    imageConfig,
    inputType
  } = _a, rest = __objRest(_a, [
    "commonStyle",
    "inputStyle",
    "optionStyle",
    "register",
    "name",
    "id",
    "options",
    "imageConfig",
    "inputType"
  ]);
  return /* @__PURE__ */ jsxRuntime.jsx(Wrapper, {
    inputType,
    imageConfig,
    commonStyle,
    id,
    children: options.map((item) => {
      var _a2, _b, _c, _d;
      const { image } = item;
      const width = ((_a2 = image == null ? void 0 : image.googleImageParams) == null ? void 0 : _a2.percent) ? Math.round(
        ((_b = image.googleImageParams) == null ? void 0 : _b.width) * ((_c = image.googleImageParams) == null ? void 0 : _c.percent) / 100
      ) : (_d = image == null ? void 0 : image.googleImageParams) == null ? void 0 : _d.width;
      const newSrc = coreRenderer.getImageUrlFromGoogleUserContent(image == null ? void 0 : image.src, {
        format: "webp",
        width
      });
      return /* @__PURE__ */ jsxRuntime.jsxs("label", {
        className: "form-item",
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(StyledInput, __spreadProps(__spreadValues({
            inputStyle,
            value: item.value
          }, register ? register(name, rest) : __spreadValues({ name }, rest)), {
            type: inputType
          })),
          /* @__PURE__ */ jsxRuntime.jsxs("div", {
            className: "form-item__label",
            children: [
              /* @__PURE__ */ jsxRuntime.jsx("div", {
                className: "form-item__label__img",
                children: /* @__PURE__ */ jsxRuntime.jsx("img", __spreadValues({
                  src: newSrc || defaultImage,
                  loading: "lazy",
                  alt: "form selection"
                }, newSrc && {
                  srcSet: coreRenderer.buildSrcsetDPR(newSrc, width)
                }))
              }),
              /* @__PURE__ */ jsxRuntime.jsx(StyledLabel, {
                labelStyle: optionStyle,
                imageWidth: imageConfig == null ? void 0 : imageConfig.width,
                className: "form-item__label__text",
                children: item.label
              })
            ]
          })
        ]
      });
    })
  });
};
const Wrapper = styled__default["default"].div(
  ({
    commonStyle,
    imageConfig,
    inputType
  }) => {
    const imageWidth = (imageConfig == null ? void 0 : imageConfig.width) || 60;
    let imageRadius = (imageConfig == null ? void 0 : imageConfig.radius) !== void 0 ? imageConfig.radius : 8;
    imageRadius = imageRadius > imageWidth / 2 ? imageWidth / 2 : imageRadius;
    return `
    margin-top: 4px;
    display: flex;
    flex-wrap: wrap;
    ${coreRenderer.getStyle(commonStyle)}

    .form-item {
      width: ${imageWidth}px;
      cursor: pointer;
      display: flex;
      align-items: flex-start;
    }
    .form-item__label {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }
    [type='${inputType}'] {
      position: absolute;
      opacity: 0;
      width: 0;
      height: 0;
    }
  
    .form-item__label__img {
      border-radius: ${imageRadius}px;
      width: ${imageWidth}px;
      height: ${imageWidth}px;
      position: relative;
      background-size: ${(imageConfig == null ? void 0 : imageConfig.backgroundSize) || "contain"};
      background-position: center;
      background-repeat: no-repeat;
    }

    .form-item__label__img img{
      width: inherit;
      height: inherit;
      border-radius: inherit;
      object-fit: cover;
    }
  
    [type='${inputType}']:checked + .form-item__label > .form-item__label__img {
      &::after {
        position: absolute;
        content: ' ';
        width: 24px;
        height: 24px;
        background-image: url(${checkedInputGroupImageBkg});
        background-size: contain;
        background-position: center;
        background-repeat: no-repeat;
        top: calc(-12px + 0.2939 * ${imageRadius}px);
        right: calc(-12px + 0.2939 * ${imageRadius}px);
      }
      outline: 2px solid #5ba1e3;
    }
  `;
  }
);
const StyledLabel = styled__default["default"].div(
  ({
    labelStyle,
    imageWidth = 100
  }) => `
  text-align: center;
  margin-top: 4px;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  word-wrap: break-word;
  max-width: ${imageWidth}px;
  ${coreRenderer.getStyle(labelStyle)}
`
);
const StyledInput = styled__default["default"].input(
  ({ inputStyle }) => `
  ${coreRenderer.getStyle(inputStyle)}
`
);

exports.InputGroupImage = InputGroupImage;
