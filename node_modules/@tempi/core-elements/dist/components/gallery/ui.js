'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var styled = require('@emotion/styled');
var coreRenderer = require('@tempi/core-renderer');
var MasonryGallery = require('./components/MasonryGallery.js');
var GridGallery = require('./components/GridGallery.js');
var ui = require('../image/ui.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const DEFAULT_COLUMN_COUNT = 4;
const MAX_COLUMN_COUNT = 16;
const getColumnCount = (n) => {
  if (!Number.isInteger(n) || n < 1) {
    return DEFAULT_COLUMN_COUNT;
  }
  if (n > 16) {
    return MAX_COLUMN_COUNT;
  }
  return n;
};
const Gallery = (props) => {
  const { device } = coreRenderer.useStore();
  const _a = coreRenderer.getPropsByDevice(props, device), {
    columnCount: columnCountProp = DEFAULT_COLUMN_COUNT,
    gap = 20,
    layout = "masonry",
    images = [],
    zoomPreview
  } = _a, rest = __objRest(_a, [
    "columnCount",
    "gap",
    "layout",
    "images",
    "zoomPreview"
  ]);
  const columnCount = getColumnCount(columnCountProp);
  const { displayItems } = coreRenderer.useTimeVisibility(images, props == null ? void 0 : props.isEditor);
  const renderGallery = () => {
    switch (layout) {
      case "grid":
      default:
        return /* @__PURE__ */ jsxRuntime.jsx(GridGallery.Grid, {
          columnCount,
          gap,
          children: displayItems.map((image, index) => /* @__PURE__ */ jsxRuntime.jsx(GridGallery.Block, {
            children: /* @__PURE__ */ jsxRuntime.jsx(GridGallery.ImageWrapper, {
              children: /* @__PURE__ */ jsxRuntime.jsx(coreRenderer.BreakpointWidthProvider, {
                sWidth: { value: 100 / columnCount, unit: "%" },
                mWidth: { value: 100 / columnCount, unit: "%" },
                children: /* @__PURE__ */ jsxRuntime.jsx(ui.Image, __spreadProps(__spreadValues({}, image), {
                  zoomPreview,
                  commonStyle: {
                    display: "block"
                  }
                }))
              })
            })
          }, index))
        });
      case "masonry":
        const masonryImages = getMasonryImages(displayItems, columnCount);
        return /* @__PURE__ */ jsxRuntime.jsx(MasonryGallery.Masonry, {
          columnCount,
          gap,
          children: masonryImages.map((column, index) => /* @__PURE__ */ jsxRuntime.jsx("div", {
            children: column.map((image, row) => /* @__PURE__ */ jsxRuntime.jsx(MasonryGallery.MasonryImageWrapper, {
              gap,
              children: /* @__PURE__ */ jsxRuntime.jsx(coreRenderer.BreakpointWidthProvider, {
                sWidth: { value: 100 / columnCount, unit: "%" },
                mWidth: { value: 100 / columnCount, unit: "%" },
                children: /* @__PURE__ */ jsxRuntime.jsx(ui.Image, __spreadProps(__spreadValues({}, image), {
                  zoomPreview,
                  commonStyle: {
                    display: "block"
                  }
                }))
              })
            }, row))
          }, index))
        });
    }
  };
  return /* @__PURE__ */ jsxRuntime.jsx(Wrapper, __spreadProps(__spreadValues({}, rest), {
    isEditor: props == null ? void 0 : props.isEditor,
    children: /* @__PURE__ */ jsxRuntime.jsx(coreRenderer.PreviewGroupProvider, {
      images,
      children: renderGallery()
    })
  }));
};
const Wrapper = styled__default["default"].div(
  ({ commonStyle, isEditor }) => `${coreRenderer.getStyle(commonStyle)}
  ${isEditor ? "pointer-events: none;" : ""}
  `
);
const getMasonryImages = (images, columnCount) => {
  const arr = Array.from(Array(columnCount), () => []);
  for (let i = 0; i < images.length; i++) {
    arr[i % columnCount][Math.floor(i / columnCount)] = images[i];
  }
  return arr;
};
Gallery.displayName = "Gallery";

exports.Gallery = Gallery;
