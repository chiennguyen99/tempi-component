'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../../../../i18n.js');
var reactIcons = require('@fluentui/react-icons');
var coreEditor = require('@tempi/core-editor');
var index = require('../../../../../types/index.js');
var propKey = require('../../../../../constants/propKey.js');

const AlignmentIconQuickSetting = () => {
  const { id, parentId } = coreEditor.useNode((node) => ({
    dom: node.dom,
    parentId: node.data.parent,
    name: node.data.name || "",
    isActive: node.events.selected,
    isHover: node.events.hovered
  }));
  const { actions, getSiblings } = coreEditor.useEditor();
  const index$1 = getSiblings(id).indexOf(id);
  const [position, setPosition] = coreEditor.useProp(propKey.PROP_KEY.Position);
  const renderIcon = () => {
    switch (position) {
      case index.Position.front:
        return /* @__PURE__ */ jsxRuntime.jsx(reactIcons.TextAlignLeftRegular, {});
      case index.Position.behind:
        return /* @__PURE__ */ jsxRuntime.jsx(reactIcons.TextAlignRightRegular, {});
      default:
        return /* @__PURE__ */ jsxRuntime.jsx(reactIcons.TextAlignJustifyRegular, {});
    }
  };
  const handleClickIcon = () => {
    if (index$1 === 0 && getSiblings(id).length > 0) {
      actions.move(id, parentId, index$1 + 2);
      setPosition(index.Position.behind);
      return;
    }
    if (index$1 > 0) {
      actions.move(id, parentId, index$1 - 1);
      setPosition(index.Position.front);
    }
  };
  return /* @__PURE__ */ jsxRuntime.jsx(coreEditor.QuickSettingButton, {
    tooltip: i18n.t("C\u0103n ch\u1EC9nh"),
    onClick: handleClickIcon,
    children: renderIcon()
  });
};

exports.AlignmentIconQuickSetting = AlignmentIconQuickSetting;
