import { jsx } from 'react/jsx-runtime';
import React__default from 'react';
import { youtubeParser, getStyle } from '@tempi/core-renderer';
import Ytb from 'react-youtube';
import styled from '@emotion/styled';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const Youtube = React__default.forwardRef(
  (props, ref) => {
    const _a = props, { link, isEditorMode = false, autoplay = false } = _a, rest = __objRest(_a, ["link", "isEditorMode", "autoplay"]);
    return /* @__PURE__ */ jsx(StyledWrapper, __spreadProps(__spreadValues({}, rest), {
      ref,
      children: /* @__PURE__ */ jsx(StyledRatio, {
        children: /* @__PURE__ */ jsx(StyledYtb, {
          className: isEditorMode ? "editor-mode" : "",
          containerClassName: "container",
          videoId: youtubeParser(link),
          opts: !isEditorMode ? {
            playerVars: {
              autoplay: autoplay ? 1 : 0,
              mute: autoplay ? 1 : 0
            }
          } : {}
        })
      })
    }));
  }
);
const StyledWrapper = styled.div(
  ({ commonStyle }) => `
  ${getStyle(commonStyle)}
  width: 100%
`
);
const StyledRatio = styled.div`
  position: relative;
  padding-bottom: 56.25%; /* 16:9 */
  height: 0;
  .container {
    height: 100%;
  }
`;
const StyledYtb = styled(Ytb)`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  &.editor-mode {
    pointer-events: none;
  }
`;
Youtube.displayName = "Youtube";

export { Youtube };
