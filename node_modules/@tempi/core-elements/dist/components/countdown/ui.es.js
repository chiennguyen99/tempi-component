import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { calculateTimeDelta, getStyle } from '@tempi/core-renderer';
import { useState, useEffect } from 'react';
import { addPaddingNumber } from '../../utils/addPaddingNumber.es.js';
import { MAPPING_VERTICAL_ALIGNMENT_FLEX } from '../../constants/grid.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const getISODateBackward = (dateString) => {
  if (/^\d{2}\/\d{2}\/\d{4} \d{2}:\d{2}$/.test(dateString)) {
    const day = parseInt(dateString.substring(0, 2));
    const month = parseInt(dateString.substring(3, 5));
    const year = parseInt(dateString.substring(6, 10));
    const hour = parseInt(dateString.substring(11, 13));
    const minute = parseInt(dateString.substring(14, 16));
    return new Date(year, month - 1, day, hour, minute).toISOString();
  }
  return dateString;
};
const Countdown = ({
  countdownType: _countdownType = "due",
  due,
  showDays = true,
  showHours = true,
  showMinutes = true,
  showSeconds = true,
  showLabel = false,
  labelDays,
  labelHours,
  labelMinutes,
  labelSeconds,
  countdownStyle,
  commonStyle,
  splitTimeUnit
}) => {
  const {
    elementGap,
    labelGap,
    digitStyle,
    labelStyle,
    timeUnitStyle,
    layout,
    labelPosition,
    align
  } = countdownStyle || {};
  const finalDue = getISODateBackward(due);
  const dueDate = new Date(finalDue);
  const [duration, setDuration] = useState(
    calculateTimeDelta(new Date(), dueDate)
  );
  useEffect(() => {
    const intervalId = setInterval(() => {
      setDuration(calculateTimeDelta(new Date(), dueDate));
    }, 1e3);
    return () => {
      clearInterval(intervalId);
    };
  }, [finalDue]);
  if (dueDate.toString() === "Invalid Date")
    return null;
  return /* @__PURE__ */ jsx(Wrapper, {
    align,
    children: /* @__PURE__ */ jsxs(TimeWrapper, {
      commonStyle: __spreadProps(__spreadValues({}, commonStyle), { gap: elementGap }),
      children: [
        showDays && /* @__PURE__ */ jsxs(Fragment, {
          children: [
            /* @__PURE__ */ jsxs(TimeUnit, {
              layout,
              labelPosition,
              labelGap,
              timeUnitStyle,
              children: [
                /* @__PURE__ */ jsx(Digit, {
                  digitStyle,
                  children: addPaddingNumber(duration.days)
                }),
                showLabel && /* @__PURE__ */ jsx(Label, {
                  labelStyle,
                  children: labelDays
                })
              ]
            }),
            !!splitTimeUnit && splitTimeUnit
          ]
        }),
        showHours && /* @__PURE__ */ jsxs(Fragment, {
          children: [
            /* @__PURE__ */ jsxs(TimeUnit, {
              layout,
              labelPosition,
              labelGap,
              timeUnitStyle,
              children: [
                /* @__PURE__ */ jsx(Digit, {
                  digitStyle,
                  children: addPaddingNumber(duration.hours)
                }),
                showLabel && /* @__PURE__ */ jsx(Label, {
                  labelStyle,
                  children: labelHours
                })
              ]
            }),
            !!splitTimeUnit && splitTimeUnit
          ]
        }),
        showMinutes && /* @__PURE__ */ jsxs(Fragment, {
          children: [
            /* @__PURE__ */ jsxs(TimeUnit, {
              layout,
              labelPosition,
              labelGap,
              timeUnitStyle,
              children: [
                /* @__PURE__ */ jsx(Digit, {
                  digitStyle,
                  children: addPaddingNumber(duration.minutes)
                }),
                showLabel && /* @__PURE__ */ jsx(Label, {
                  labelStyle,
                  children: labelMinutes
                })
              ]
            }),
            !!splitTimeUnit && splitTimeUnit
          ]
        }),
        showSeconds && /* @__PURE__ */ jsxs(TimeUnit, {
          layout,
          labelPosition,
          labelGap,
          timeUnitStyle,
          children: [
            /* @__PURE__ */ jsx(Digit, {
              digitStyle,
              children: addPaddingNumber(duration.seconds)
            }),
            showLabel && /* @__PURE__ */ jsx(Label, {
              labelStyle,
              children: labelSeconds
            })
          ]
        })
      ]
    })
  });
};
const Wrapper = styled.div(
  ({ align }) => `
  display: flex;
  justify-content: ${MAPPING_VERTICAL_ALIGNMENT_FLEX[align]};
`
);
const TimeWrapper = styled.div(
  ({ commonStyle }) => `
  ${getStyle(commonStyle)};
  display: flex;
`
);
const Digit = styled.div(
  ({ digitStyle }) => `
  ${getStyle(digitStyle)}
  @media only screen and (max-width: 480px){
    font-size: min(${digitStyle == null ? void 0 : digitStyle.fontSize}px, 30px);
  }
`
);
const Label = styled.div(
  ({ labelStyle }) => `
  ${getStyle(labelStyle)}
  @media only screen and (max-width: 480px){
    font-size: min(${labelStyle == null ? void 0 : labelStyle.fontSize}px, 30px);
  }
`
);
const TimeUnit = styled.div(
  ({ layout, labelPosition, labelGap, timeUnitStyle }) => `
  ${getStyle(timeUnitStyle)}
  display: flex;
  ${labelGap ? `gap: ${labelGap}px;` : ""}
  ${layout === "horizontal" ? `align-items: ${labelPosition};` : `flex-direction: column;`};
`
);
Countdown.displayName = "Countdown";

export { Countdown, getISODateBackward };
