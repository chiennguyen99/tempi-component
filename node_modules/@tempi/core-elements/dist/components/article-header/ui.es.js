import { jsx, jsxs } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { useStore, getStyle, generate } from '@tempi/core-renderer';
import dayjs from 'dayjs';
import { DEFAULT_ARTICLE_HEADER } from './constants.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const ArticleHeader = (props) => {
  const { globalData = {} } = useStore();
  const { page } = globalData || {};
  const { articleInfo, categories = [] } = page || {};
  const { authorName, publishedAt } = articleInfo || {};
  const fontSize = props.commonStyle.fontSize;
  const backgroundColor = props.commonStyle.backgroundColor;
  return /* @__PURE__ */ jsx(Wrapper, {
    backgroundColor,
    children: /* @__PURE__ */ jsxs(Container, __spreadProps(__spreadValues({}, props), {
      children: [
        /* @__PURE__ */ jsx(Title, {
          fontSize,
          children: page == null ? void 0 : page.name
        }),
        /* @__PURE__ */ jsxs(Meta, {
          children: [
            authorName && /* @__PURE__ */ jsx("span", {
              children: authorName
            }),
            /* @__PURE__ */ jsx("span", {
              children: dayjs.unix(publishedAt).format("DD/MM/YYYY")
            }),
            (categories == null ? void 0 : categories.length) > 0 && /* @__PURE__ */ jsx(CategoryWrapper, {
              children: categories.map((category) => /* @__PURE__ */ jsx(Category, {
                $color: "#7367f0",
                children: category.name
              }, category.id))
            })
          ]
        })
      ]
    }))
  });
};
ArticleHeader.displayName = "ArticleHeader";
const Wrapper = styled.div(
  ({ backgroundColor }) => `
  ${getStyle({ backgroundColor })}`
);
const Container = styled.div(
  ({ commonStyle }) => `
  margin: 0 auto;
  padding-left: 15px;
  padding-top: 40px;
  padding-bottom: 40px;
  padding-right: 15px;
  ${getStyle(commonStyle)};
`
);
const Title = styled.h1(
  ({ fontSize = DEFAULT_ARTICLE_HEADER.commonStyle.fontSize }) => `${getStyle({ fontSize })}`
);
const Meta = styled.div`
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  font-size: 14px;
  color: '#4B4B4B';
  margin-top: 12px;

  & > span {
    &:after {
      content: 'â€¢';
      display: inline-block;
      vertical-align: middle;
      margin: 0 8px;
    }

    &:last-child:after {
      content: none;
    }

    vertical-align: middle;
  }
`;
const CategoryWrapper = styled.div`
  display: flex;
  gap: 8px;
  flex-wrap: wrap;
  margin: 0.5em 0;
  font-weight: 500;
`;
const Category = styled.span`
  color: ${({ $color }) => $color};
  background-color: ${({ $color }) => generate($color)["100"]};
  padding: 2px 8px;
  border-radius: 1em;
`;

export { ArticleHeader };
