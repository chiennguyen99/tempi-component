import { jsx, Fragment } from 'react/jsx-runtime';
import { t } from '../../../../i18n.es.js';
import styled from '@emotion/styled';
import { useEditor, useNode, FormItem, ItemListConfig, useProp, InputConfig, Element } from '@tempi/core-editor';
import { TabItemEditor } from '../TabItemEditor/TabItemEditor.es.js';
import { PROP_KEY } from '../../../../constants/propKey.es.js';

const TabSetting = () => {
  const {
    actions,
    query: { parseReactElement, node },
    duplicateNode
  } = useEditor();
  const { id, childNodes } = useNode((currentNode) => ({
    childNodes: currentNode.data.nodes.map(
      (childNodeId) => node(childNodeId).get()
    )
  }));
  const tabs = childNodes.map((node2) => {
    const nodeProps = node2.data.props;
    return {
      id: node2.id,
      title: nodeProps.title
    };
  });
  const deleteTab = (index) => {
    actions.delete(tabs.length === 1 ? id : tabs[index].id);
  };
  const duplicateTab = (index) => {
    duplicateNode(node(tabs[index].id).get(), id);
  };
  const addNewTab = () => {
    const newNodeTree = parseReactElement(
      /* @__PURE__ */ jsx(Element, {
        canvas: true,
        is: TabItemEditor,
        title: "New Tab"
      })
    ).toNodeTree();
    actions.history.throttle().addNodeTree(newNodeTree, id);
  };
  return /* @__PURE__ */ jsx(Fragment, {
    children: /* @__PURE__ */ jsx(FormItem, {
      label: t("Danh s\xE1ch Tab"),
      layout: "vertical",
      children: /* @__PURE__ */ jsx(ItemListConfig, {
        activeItemConfig: TabTitleConfig,
        propKey: PROP_KEY.Tabs,
        customRemove: deleteTab,
        customDuplicate: duplicateTab,
        customInsert: addNewTab,
        allowDrag: node(id).isCanvas(),
        addItemText: t("Th\xEAm tab m\u1EDBi")
      })
    })
  });
};
const TabTitleConfig = ({ index }) => {
  const {
    actions: { setProp }
  } = useEditor();
  const [tab] = useProp(PROP_KEY.joinKey(PROP_KEY.Tabs, index.toString()));
  const onChangeTitle = (title) => {
    setProp(tab.id, (props) => props.title = title);
  };
  return /* @__PURE__ */ jsx(StyledTagContent, {
    children: /* @__PURE__ */ jsx(InputConfig, {
      formItemProps: {
        label: t("Ti\xEAu \u0111\u1EC1"),
        layout: "vertical"
      },
      inputProps: {
        placeholder: t("Nh\u1EADp ti\xEAu \u0111\u1EC1"),
        style: { width: "100%" },
        value: tab.title,
        onChange: (e) => onChangeTitle(e.target.value)
      }
    })
  });
};
const StyledTagContent = styled.div`
  padding: 0.5rem;
`;

export { TabSetting };
