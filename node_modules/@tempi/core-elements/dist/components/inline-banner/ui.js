'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var styled = require('@emotion/styled');
var coreRenderer = require('@tempi/core-renderer');
var React = require('react');
var reactDom = require('react-dom');
var constants = require('./constants.js');
var type = require('./type.js');
var index = require('../../core/Link/index.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const InlineBanner = React.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      commonStyle,
      children,
      isEditorMode,
      cssSelector,
      customCss,
      relativePosition = type.InlineBannerRelativePosition.BEFORE,
      event,
      pollingInterval = constants.DEFAULT_POLLING_INLINE_INTERVAL
    } = _b, rest = __objRest(_b, [
      "commonStyle",
      "children",
      "isEditorMode",
      "cssSelector",
      "customCss",
      "relativePosition",
      "event",
      "pollingInterval"
    ]);
    const [mountedDomElement, setMountedDomElement] = React.useState();
    const mountElementIdRef = React.useRef();
    const defaultCommonStyle = React.useMemo(
      () => __spreadValues(__spreadValues({}, constants.DEFAULT_INLINE_BANNER.commonStyle), commonStyle),
      [commonStyle]
    );
    const renderInlineBanner = () => {
      return /* @__PURE__ */ jsxRuntime.jsx(Wrapper, __spreadProps(__spreadValues({
        commonStyle: defaultCommonStyle,
        customCss,
        ref
      }, rest), {
        children
      }));
    };
    React.useEffect(() => {
      const baseElementPollingInterval = setInterval(() => {
        if (cssSelector) {
          try {
            const baseElement = document.querySelector(cssSelector);
            if (baseElement && !mountElementIdRef.current) {
              clearInterval(baseElementPollingInterval);
              const mountElement = document.createElement("div");
              const mountElementUniqueId = coreRenderer.generateRandomId(10);
              mountElement.id = mountElementUniqueId;
              mountElementIdRef.current = mountElementUniqueId;
              switch (relativePosition) {
                case type.InlineBannerRelativePosition.BEFORE:
                  baseElement.before(mountElement);
                  break;
                case type.InlineBannerRelativePosition.AFTER:
                  baseElement.after(mountElement);
                  break;
                case type.InlineBannerRelativePosition.IN:
                  baseElement.appendChild(mountElement);
                  break;
              }
              setMountedDomElement(mountElement);
            }
          } catch (e) {
            console.warn("Invalid css selector provided for InlineBanner", e);
          }
        }
      }, pollingInterval);
      return () => {
        clearInterval(baseElementPollingInterval);
      };
    }, [cssSelector, relativePosition, pollingInterval]);
    if (isEditorMode) {
      return renderInlineBanner();
    }
    if (mountedDomElement) {
      return reactDom.createPortal(
        /* @__PURE__ */ jsxRuntime.jsx(index.Link, __spreadProps(__spreadValues({}, event), {
          children: renderInlineBanner()
        })),
        mountedDomElement
      );
    }
    return null;
  }
);
const Wrapper = styled__default["default"].div(
  ({ commonStyle, customCss }) => `
  ${coreRenderer.getStyle(commonStyle)}
  ${customCss != null ? customCss : ""}
`
);
InlineBanner.displayName = "InlineBanner";

exports.InlineBanner = InlineBanner;
