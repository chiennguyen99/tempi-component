import { jsx } from 'react/jsx-runtime';
import { useNode, useProp, crafting, AdvanceAttributes, getEditorName } from '@tempi/core-editor';
import { DEFAULT_INLINE_BANNER } from './constants.es.js';
import { InlineBannerQuickSetting } from './quick-setting.es.js';
import { InlineBanner } from './ui.es.js';
import { InlineBannerSetting } from './setting.es.js';
import { useEffect } from 'react';
import { RenderFloatingQuickSetting } from '../../core/RenderFloatingQuickSetting/RenderFloatingQuickSetting.es.js';
import { RootEditor } from '../root/selector.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const InlineBannerEditor = (_a) => {
  var _b = _a, {
    children,
    quickSetting
  } = _b, rest = __objRest(_b, [
    "children",
    "quickSetting"
  ]);
  const {
    connectors: { connect, drag },
    node
  } = useNode((node2) => ({
    node: node2
  }));
  const [name, setName] = useProp("name");
  const [id, setId] = useProp("id");
  useEffect(() => {
    if (!id)
      setId(node.id);
    if (!name)
      setName(node.id);
  }, []);
  return /* @__PURE__ */ jsx("div", {
    ref: (ref) => connect(drag(ref)),
    children: /* @__PURE__ */ jsx(InlineBanner, __spreadProps(__spreadValues({
      isEditorMode: true
    }, rest), {
      children: /* @__PURE__ */ jsx(RenderFloatingQuickSetting, {
        quickSetting: quickSetting || /* @__PURE__ */ jsx(InlineBannerQuickSetting, {}),
        children
      })
    }))
  });
};
InlineBannerEditor.craft = crafting({
  displayName: "Inline banner",
  tag: InlineBanner.displayName.toLowerCase(),
  isCanvas: true,
  advanceAttributes: AdvanceAttributes,
  customAttributes: InlineBannerSetting,
  props: DEFAULT_INLINE_BANNER,
  rules: {
    canDrop: () => false,
    canDrag: () => false,
    canMoveIn: (incomingNodes) => {
      const ignoreSources = [getEditorName({ RootEditor })];
      return incomingNodes.every(
        (incomingNode) => !ignoreSources.includes(incomingNode.data.name)
      );
    }
  }
});

export { InlineBannerEditor };
