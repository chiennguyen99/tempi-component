'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var coreEditor = require('@tempi/core-editor');
var set = require('lodash.set');
var antd = require('antd');
var coreRenderer = require('@tempi/core-renderer');
var propKey = require('../../constants/propKey.js');
var fonts = require('../../constants/fonts.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var set__default = /*#__PURE__*/_interopDefaultLegacy(set);

const Setting = () => {
  const {
    query,
    actions: { history }
  } = coreEditor.useEditor((query2) => ({
    rootNode: query2.nodes[coreRenderer.ROOT]
  }));
  const { token } = antd.theme.useToken();
  const { realDevice: device } = coreEditor.useBuilder();
  coreEditor.usePropSeparateDevice(propKey.PROP_KEY.PageMaxWidth, true);
  coreEditor.usePropSeparateDevice(propKey.PROP_KEY.PageWidthType, true);
  propKey.PROP_KEY.joinKey(
    propKey.PROP_KEY.CommonStyle,
    propKey.PROP_KEY.MaxWidth
  );
  const fontFamilyPropKey = propKey.PROP_KEY.joinKey(
    propKey.PROP_KEY.CommonStyle,
    propKey.PROP_KEY.FontFamily
  );
  const [fontFamily] = coreEditor.usePropSeparateDevice(fontFamilyPropKey, true);
  const onChangeProps = (value, key) => {
    history.ignore().setProp(coreRenderer.ROOT, (props) => {
      set__default["default"](props, propKey.PROP_KEY.joinKey(device, key), value);
    });
  };
  const generalConfigs = /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      false,
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.BackgroundConfig, {
        title: i18n.t("N\u1EC1n to\xE0n trang"),
        propKey: propKey.PROP_KEY.CommonStyle,
        separateDevice: true
      })
    ]
  });
  const textConfigs = /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: /* @__PURE__ */ jsxRuntime.jsx(antd.Space, {
      direction: "vertical",
      style: {
        width: "100%"
      },
      children: fonts.fontFamilyOptions.map((font) => /* @__PURE__ */ jsxRuntime.jsx(antd.Card, {
        onClick: () => {
          if (fontFamily === font.value) {
            onChangeProps(void 0, fontFamilyPropKey);
          } else {
            onChangeProps(font.value, fontFamilyPropKey);
          }
        },
        style: {
          cursor: "pointer",
          borderColor: fontFamily === font.value ? token.colorPrimary : "#e5e7eb"
        },
        children: /* @__PURE__ */ jsxRuntime.jsx(antd.Typography.Text, {
          style: { fontSize: 24, fontFamily: font.value },
          children: font.label
        })
      }, font.value))
    })
  });
  const tabs = [
    { label: i18n.t("C\xE0i \u0111\u1EB7t chung"), key: "item-1", children: generalConfigs },
    { label: i18n.t("V\u0103n b\u1EA3n"), key: "item-2", children: textConfigs }
  ];
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(antd.Typography.Text, {
        children: i18n.t("C\xE1c c\xE0i \u0111\u1EB7t d\u01B0\u1EDBi \u0111\xE2y s\u1EBD \u0111\u01B0\u1EE3c \xE1p d\u1EE5ng cho trang hi\u1EC7n t\u1EA1i")
      }),
      /* @__PURE__ */ jsxRuntime.jsx(antd.Tabs, {
        items: tabs
      })
    ]
  });
};

exports.Setting = Setting;
