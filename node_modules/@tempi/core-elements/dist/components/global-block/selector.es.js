import { jsx, jsxs } from 'react/jsx-runtime';
import { useBuilder, useNode, crafting } from '@tempi/core-editor';
import { SectionQuickSetting } from '../section/quick-setting.es.js';
import { GlobalBlockAdvancedSetting } from './advanced-setting.es.js';
import { GlobalBlockSetting } from './setting.es.js';
import { GlobalBlockStyleSetting } from './style-setting.es.js';
import { BLOCK_TYPES } from './type.es.js';
import { GlobalBlock } from './ui.es.js';
import { RenderFloatingQuickSetting } from '../../core/RenderFloatingQuickSetting/RenderFloatingQuickSetting.es.js';
import { HeaderV2QuickSetting } from './header-v2/quick-setting.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const GlobalBlockEditor = (_a) => {
  var _b = _a, {
    addBlockButton
  } = _b, restProps = __objRest(_b, [
    "addBlockButton"
  ]);
  const { blockType } = restProps;
  const { menu } = useBuilder();
  const {
    connectors: { connect }
  } = useNode();
  return blockType === BLOCK_TYPES.HEADER ? /* @__PURE__ */ jsx("div", {
    ref: connect,
    children: /* @__PURE__ */ jsxs(RenderFloatingQuickSetting, {
      quickSetting: /* @__PURE__ */ jsx(HeaderV2QuickSetting, {}),
      children: [
        /* @__PURE__ */ jsx(GlobalBlock, __spreadProps(__spreadValues({}, restProps), {
          isEditingMode: true,
          menu
        })),
        addBlockButton
      ]
    })
  }) : /* @__PURE__ */ jsx("div", {
    ref: connect,
    style: {
      width: "100%",
      position: "relative"
    },
    children: /* @__PURE__ */ jsx(RenderFloatingQuickSetting, {
      quickSetting: /* @__PURE__ */ jsx(SectionQuickSetting, {}),
      children: /* @__PURE__ */ jsx(GlobalBlock, __spreadProps(__spreadValues({}, restProps), {
        isEditingMode: true
      }))
    })
  });
};
GlobalBlockEditor.craft = crafting({
  displayName: GlobalBlock.displayName,
  tag: GlobalBlock.displayName.toLowerCase(),
  advanceAttributes: GlobalBlockAdvancedSetting,
  customAttributes: GlobalBlockSetting,
  commonAttributes: GlobalBlockStyleSetting,
  rules: {
    canDrag: () => false,
    canMoveIn: (_incomingNodes, currentNode) => {
      return currentNode.data.props.type !== BLOCK_TYPES.HEADER;
    }
  }
});

export { GlobalBlockEditor };
