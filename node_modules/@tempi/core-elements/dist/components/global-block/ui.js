'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var coreRenderer = require('@tempi/core-renderer');
var type = require('./type.js');
var GlobalHeader = require('./header-v2/ui/GlobalHeader.js');
var ui = require('../section/ui.js');

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const GlobalBlock = (props) => {
  const { device } = coreRenderer.useStore();
  const newProps = coreRenderer.getPropsByDevice(props, device);
  const _a = newProps, { blockId, blockType, content } = _a, rest = __objRest(_a, ["blockId", "blockType", "content"]);
  if (blockType === type.BLOCK_TYPES.HEADER) {
    return /* @__PURE__ */ jsxRuntime.jsx(GlobalHeader.GlobalHeader, __spreadValues({}, rest));
  }
  return /* @__PURE__ */ jsxRuntime.jsx(ui.PbSection, __spreadProps(__spreadValues({}, rest), {
    children: props.children
  }));
};
GlobalBlock.displayName = "GlobalBlock";

exports.GlobalBlock = GlobalBlock;
