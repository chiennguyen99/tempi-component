export const calculateGrid = (props) => {
    const { padding, menuPosition, width } = props.layout || {};
    const { paddingTop, paddingRight, paddingBottom, paddingLeft } = splitPaddingString(padding);
    const { logoShow, logoWidth, spaceBetweenMenu, logoPosition } = props.logo || {};
    const gridArea = '1/1/-1/-1';
    const backgroundOverlayOpacity = 0;
    const { menuItemSpacing } = props.layout || {};
    const { menuHoverColor, menuColor, backgroundColor } = props.theme || {};
    const mobilePaddingTop = 24;
    const mobilePadding = '24px 16px 24px 16px';
    const mobilePaddingRight = 16;
    const mobilePaddingBottom = 24;
    const mobilePaddingLeft = 16;
    const mobileLogoWidth = 70;
    const mobileMenuItemSpacing = 20;
    const mobileLogoGridRow = '1/2';
    const mobileLogoGridColumn = '1/2';
    const mobileLogoJustifySelf = 'flex-start';
    const mobileLogoImageObjectPosition = 'left center';
    const mobileLinksGridRow = '1/2';
    const mobileLinksGridColumn = '2/3';
    const mobileLogoSpacing = `0 ${spaceBetweenMenu}px 0 0`;
    const mobileDropdownBackgroundColor = '#dcdcdc';
    const mobileBackground = backgroundColor;
    let navigationGridTemplateColumns;
    let mobileNavigationGridTemplateColumns;
    navigationGridTemplateColumns = getNavigationGridTemplateColumns(logoPosition, menuPosition, logoWidth, spaceBetweenMenu, undefined);
    mobileNavigationGridTemplateColumns = getNavigationGridTemplateColumns(logoPosition, menuPosition, logoWidth, spaceBetweenMenu, 'mobile', mobileLogoWidth);
    if (!logoShow) {
        navigationGridTemplateColumns = '1fr';
        mobileNavigationGridTemplateColumns = '1fr';
    }
    const logoGridColumn = getLogoGridColumn(logoPosition, menuPosition);
    let logoGridRow = '1/2';
    let logoSpacing = `0 ${spaceBetweenMenu}px 0 0`;
    let logoJustifySelf;
    switch (logoPosition) {
        case 'left':
            logoJustifySelf = 'flex-start';
            logoSpacing = `0 ${spaceBetweenMenu}px 0 0`;
            break;
        case 'center':
            logoJustifySelf = 'center';
            if (menuPosition === 'center') {
                logoSpacing = `0 0 ${spaceBetweenMenu}px 0`;
                logoGridRow = '0/2';
            }
            else {
                logoSpacing = `0 ${spaceBetweenMenu}px`;
            }
            break;
        case 'right':
            logoJustifySelf = 'flex-end';
            logoSpacing = `0 0 0 ${spaceBetweenMenu}px`;
            break;
        default:
            break;
    }
    const { logo } = props;
    const logoImageObjectPosition = `${logo.logoPosition} center`;
    let linksGridRow = '1/2';
    let linksGridColumn = '2/3';
    let navigationJustifySelf = 'flex-end';
    const navigationTextAlign = menuPosition || 'right';
    const mobileNavigationTextAlign = menuPosition || 'right';
    let mobileNavigationJustifySelf = 'flex-end';
    switch (menuPosition) {
        case 'left':
            navigationJustifySelf = 'flex-start';
            mobileNavigationJustifySelf = 'flex-start';
            break;
        case 'center':
            navigationJustifySelf = 'center';
            mobileNavigationJustifySelf = 'center';
            break;
        case 'right':
            navigationJustifySelf = 'flex-end';
            mobileNavigationJustifySelf = 'flex-end';
            break;
        default:
            break;
    }
    linksGridColumn = getLinksGridColumn(logoPosition, menuPosition);
    if (logoPosition === 'center' && menuPosition === 'center') {
        linksGridRow = '2/2';
    }
    if (!logoShow) {
        linksGridColumn = '1/2';
    }
    return {
        gridArea,
        navigationGridTemplateColumns,
        padding,
        paddingTop,
        paddingRight,
        paddingBottom,
        paddingLeft,
        width,
        logoGridRow,
        logoGridColumn,
        logoJustifySelf,
        logoSpacing,
        logoWidth,
        logoImageObjectPosition,
        linksGridRow,
        linksGridColumn,
        navigationJustifySelf,
        menuItemSpacing,
        navigationTextAlign,
        menuColor,
        menuHoverColor,
        mobilePadding,
        mobilePaddingTop,
        mobilePaddingRight,
        mobilePaddingBottom,
        mobilePaddingLeft,
        mobileLogoWidth,
        mobileMenuItemSpacing,
        mobileNavigationGridTemplateColumns,
        mobileLogoGridRow,
        mobileLogoGridColumn,
        mobileLogoJustifySelf,
        mobileLogoImageObjectPosition,
        mobileLinksGridRow,
        mobileLinksGridColumn,
        mobileLogoSpacing,
        mobileNavigationTextAlign,
        mobileNavigationJustifySelf,
        mobileDropdownBackgroundColor,
        mobileBackground,
        backgroundOverlayOpacity,
    };
};
export const splitPaddingString = (paddingString) => {
    const paddingValues = paddingString.split(' ');
    const result = {};
    if (paddingValues[0]) {
        result.paddingTop = parseInt(paddingValues[0].replace('px', ''));
    }
    if (paddingValues[1]) {
        result.paddingRight = parseInt(paddingValues[1].replace('px', ''));
    }
    if (paddingValues[2]) {
        result.paddingBottom = parseInt(paddingValues[2].replace('px', ''));
    }
    if (paddingValues[3]) {
        result.paddingLeft = parseInt(paddingValues[3].replace('px', ''));
    }
    return result;
};
const getNavigationGridTemplateColumns = (logoPosition, menuPosition, logoWidth, spaceBetweenMenu, device, mobileLogoWidth) => {
    const logoWidthWithSpace = (device === 'desktop' ? logoWidth : mobileLogoWidth || logoWidth) +
        spaceBetweenMenu;
    const logoWidthWithSpaceAuto = `minmax(${logoWidthWithSpace}px, auto)`;
    switch (logoPosition) {
        case 'left':
            switch (menuPosition) {
                case 'left':
                    return `${logoWidthWithSpaceAuto} 1fr`;
                case 'center':
                    return `minmax(${logoWidthWithSpace}px, 1fr) auto 1fr`;
                case 'right':
                    return `${logoWidthWithSpaceAuto} 1fr`;
            }
        case 'center':
            switch (menuPosition) {
                case 'left':
                    return `1fr ${logoWidthWithSpaceAuto} 1fr`;
                case 'center':
                    return `1fr minmax(${logoWidth}px, auto) 1fr`;
                case 'right':
                    return `1fr ${logoWidthWithSpaceAuto} 1fr`;
            }
        case 'right':
            switch (menuPosition) {
                case 'left':
                    return `1fr ${logoWidthWithSpaceAuto}`;
                case 'center':
                    return `1fr auto minmax(${logoWidthWithSpace}px, 1fr)`;
                case 'right':
                    return `1fr ${logoWidthWithSpaceAuto}`;
            }
    }
};
const getLinksGridColumn = (logoPosition, menuPosition) => {
    switch (logoPosition) {
        case 'left':
            return '2/3';
        case 'center':
            switch (menuPosition) {
                case 'left':
                    return `1/2`;
                case 'center':
                    return `1/4`;
                case 'right':
                    return `3/4`;
            }
        case 'right':
            switch (menuPosition) {
                case 'left':
                case 'right':
                    return `1/2`;
                case 'center':
                    return `2/3`;
            }
    }
};
const getLogoGridColumn = (logoPosition, menuPosition) => {
    switch (logoPosition) {
        case 'left':
            return '1/2';
        case 'center':
            return '2/3';
        case 'right':
            switch (menuPosition) {
                case 'left':
                case 'right':
                    return `2/3`;
                case 'center':
                    return `3/4`;
            }
    }
};
