'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreRenderer = require('@tempi/core-renderer');

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const calculateGrid = (props) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
  const padding = "30px 16px 30px 16px";
  const width = 1240;
  const menuPosition = (_a = props == null ? void 0 : props.menuConfig) == null ? void 0 : _a.align;
  const { paddingTop, paddingRight, paddingBottom, paddingLeft } = splitPaddingString(padding);
  const logoShow = (_b = props == null ? void 0 : props.logoConfig) == null ? void 0 : _b.show;
  const logoWidth = (_d = (_c = props == null ? void 0 : props.logoConfig) == null ? void 0 : _c.commonStyle) == null ? void 0 : _d.width;
  const spaceBetweenMenu = (_e = props == null ? void 0 : props.logoConfig) == null ? void 0 : _e.spacingWithMenu;
  const logoPosition = (_f = props == null ? void 0 : props.logoConfig) == null ? void 0 : _f.align;
  const gridArea = "1/1/-1/-1";
  const backgroundOverlayOpacity = 0;
  const menuItemSpacing = (_h = (_g = props == null ? void 0 : props.menuConfig) == null ? void 0 : _g.commonStyle) == null ? void 0 : _h.columnGap;
  const backgroundColor = (_i = props == null ? void 0 : props.commonStyle) == null ? void 0 : _i.backgroundColor;
  const menuColor = (_k = (_j = props == null ? void 0 : props.menuItemConfig) == null ? void 0 : _j.commonStyle) == null ? void 0 : _k.color;
  const menuHoverColor = (_n = (_m = (_l = props == null ? void 0 : props.menuItemConfig) == null ? void 0 : _l.commonStyle) == null ? void 0 : _m.hover) == null ? void 0 : _n.color;
  const mobilePaddingTop = 24;
  const mobilePadding = "24px 16px 24px 16px";
  const mobilePaddingRight = 16;
  const mobilePaddingBottom = 24;
  const mobilePaddingLeft = 16;
  const mobileLogoWidth = 70;
  const mobileMenuItemSpacing = 20;
  const mobileLogoGridRow = "1/2";
  const mobileLogoGridColumn = "1/2";
  const mobileLogoJustifySelf = "flex-start";
  const mobileLogoImageObjectPosition = "left center";
  const mobileLinksGridRow = "1/2";
  const mobileLinksGridColumn = "2/3";
  const mobileLogoSpacing = `0 ${spaceBetweenMenu}px 0 0`;
  const mobileDropdownBackgroundColor = "#dcdcdc";
  const mobileBackground = backgroundColor;
  let navigationGridTemplateColumns;
  let mobileNavigationGridTemplateColumns;
  navigationGridTemplateColumns = getNavigationGridTemplateColumns(
    logoPosition,
    menuPosition,
    logoWidth,
    spaceBetweenMenu,
    void 0
  );
  mobileNavigationGridTemplateColumns = getNavigationGridTemplateColumns(
    logoPosition,
    menuPosition,
    logoWidth,
    spaceBetweenMenu,
    "mobile",
    mobileLogoWidth
  );
  if (!logoShow) {
    navigationGridTemplateColumns = "1fr";
    mobileNavigationGridTemplateColumns = "1fr";
  }
  const logoGridColumn = getLogoGridColumn(logoPosition, menuPosition);
  let logoGridRow = "1/2";
  let logoSpacing = `0 ${spaceBetweenMenu}px 0 0`;
  let logoJustifySelf;
  switch (logoPosition) {
    case "left":
      logoJustifySelf = "flex-start";
      logoSpacing = `0 ${spaceBetweenMenu}px 0 0`;
      break;
    case "center":
      logoJustifySelf = "center";
      if (menuPosition === "center") {
        logoSpacing = `0 0 ${spaceBetweenMenu}px 0`;
        logoGridRow = "0/2";
      } else {
        logoSpacing = `0 ${spaceBetweenMenu}px`;
      }
      break;
    case "right":
      logoJustifySelf = "flex-end";
      logoSpacing = `0 0 0 ${spaceBetweenMenu}px`;
      break;
  }
  const logoImageObjectPosition = `${logoPosition} center`;
  let linksGridRow = "1/2";
  let linksGridColumn = "2/3";
  let navigationJustifySelf = "flex-end";
  const navigationTextAlign = menuPosition || "right";
  const mobileNavigationTextAlign = menuPosition || "right";
  let mobileNavigationJustifySelf = "flex-end";
  switch (menuPosition) {
    case "left":
      navigationJustifySelf = "flex-start";
      mobileNavigationJustifySelf = "flex-start";
      break;
    case "center":
      navigationJustifySelf = "center";
      mobileNavigationJustifySelf = "center";
      break;
    case "right":
      navigationJustifySelf = "flex-end";
      mobileNavigationJustifySelf = "flex-end";
      break;
  }
  linksGridColumn = getLinksGridColumn(logoPosition, menuPosition);
  if (logoPosition === "center" && menuPosition === "center") {
    linksGridRow = "2/2";
  }
  if (!logoShow) {
    linksGridColumn = "1/2";
  }
  return {
    gridArea,
    navigationGridTemplateColumns,
    padding,
    paddingTop,
    paddingRight,
    paddingBottom,
    paddingLeft,
    width,
    logoGridRow,
    logoGridColumn,
    logoJustifySelf,
    logoSpacing,
    logoWidth,
    logoImageObjectPosition,
    linksGridRow,
    linksGridColumn,
    navigationJustifySelf,
    menuItemSpacing,
    navigationTextAlign,
    menuColor,
    menuHoverColor,
    mobilePadding,
    mobilePaddingTop,
    mobilePaddingRight,
    mobilePaddingBottom,
    mobilePaddingLeft,
    mobileLogoWidth,
    mobileMenuItemSpacing,
    mobileNavigationGridTemplateColumns,
    mobileLogoGridRow,
    mobileLogoGridColumn,
    mobileLogoJustifySelf,
    mobileLogoImageObjectPosition,
    mobileLinksGridRow,
    mobileLinksGridColumn,
    mobileLogoSpacing,
    mobileNavigationTextAlign,
    mobileNavigationJustifySelf,
    mobileDropdownBackgroundColor,
    mobileBackground,
    backgroundOverlayOpacity
  };
};
const splitPaddingString = (paddingString) => {
  const paddingValues = paddingString.split(" ");
  const result = {};
  if (paddingValues[0]) {
    result.paddingTop = parseInt(paddingValues[0].replace("px", ""));
  }
  if (paddingValues[1]) {
    result.paddingRight = parseInt(paddingValues[1].replace("px", ""));
  }
  if (paddingValues[2]) {
    result.paddingBottom = parseInt(paddingValues[2].replace("px", ""));
  }
  if (paddingValues[3]) {
    result.paddingLeft = parseInt(paddingValues[3].replace("px", ""));
  }
  return result;
};
const getNavigationGridTemplateColumns = (logoPosition, menuPosition, logoWidth, spaceBetweenMenu, device, mobileLogoWidth) => {
  const logoWidthWithSpace = (device === "desktop" ? logoWidth : mobileLogoWidth || logoWidth) + spaceBetweenMenu;
  const logoWidthWithSpaceAuto = `minmax(${logoWidthWithSpace}px, auto)`;
  switch (logoPosition) {
    case coreRenderer.Alignment.left:
      switch (menuPosition) {
        case coreRenderer.Alignment.left:
          return `${logoWidthWithSpaceAuto} 1fr`;
        case coreRenderer.Alignment.center:
          return `minmax(${logoWidthWithSpace}px, 1fr) auto 1fr`;
        case coreRenderer.Alignment.right:
          return `${logoWidthWithSpaceAuto} 1fr`;
      }
    case coreRenderer.Alignment.center:
      switch (menuPosition) {
        case coreRenderer.Alignment.left:
          return `1fr ${logoWidthWithSpaceAuto} 1fr`;
        case coreRenderer.Alignment.center:
          return `1fr minmax(${logoWidth}px, auto) 1fr`;
        case coreRenderer.Alignment.right:
          return `1fr ${logoWidthWithSpaceAuto} 1fr`;
      }
    case coreRenderer.Alignment.right:
      switch (menuPosition) {
        case coreRenderer.Alignment.left:
          return `1fr ${logoWidthWithSpaceAuto}`;
        case coreRenderer.Alignment.center:
          return `1fr auto minmax(${logoWidthWithSpace}px, 1fr)`;
        case coreRenderer.Alignment.right:
          return `1fr ${logoWidthWithSpaceAuto}`;
      }
  }
};
const getLinksGridColumn = (logoPosition, menuPosition) => {
  switch (logoPosition) {
    case coreRenderer.Alignment.left:
      return "2/3";
    case coreRenderer.Alignment.center:
      switch (menuPosition) {
        case coreRenderer.Alignment.left:
          return `1/2`;
        case coreRenderer.Alignment.center:
          return `1/4`;
        case coreRenderer.Alignment.right:
          return `3/4`;
      }
    case coreRenderer.Alignment.right:
      switch (menuPosition) {
        case coreRenderer.Alignment.left:
        case coreRenderer.Alignment.right:
          return `1/2`;
        case coreRenderer.Alignment.center:
          return `2/3`;
      }
  }
};
const getLogoGridColumn = (logoPosition, menuPosition) => {
  switch (logoPosition) {
    case coreRenderer.Alignment.left:
      return "1/2";
    case coreRenderer.Alignment.center:
      return "2/3";
    case coreRenderer.Alignment.right:
      switch (menuPosition) {
        case coreRenderer.Alignment.left:
        case coreRenderer.Alignment.right:
          return `2/3`;
        case coreRenderer.Alignment.center:
          return `3/4`;
      }
  }
};
const flattenToTreeMax2Level = (originMenu) => {
  const level1 = originMenu.filter((el) => !el.parentId);
  return level1.map((item) => {
    const children = originMenu.filter((m) => m.parentId === item.id);
    return __spreadProps(__spreadValues({}, item), {
      children
    });
  });
};
const getUrlOfMenuItem = (item) => {
  var _a, _b;
  if ((item == null ? void 0 : item.linkType) === "LINK")
    return item.href;
  if ((_a = item == null ? void 0 : item.page) == null ? void 0 : _a.isHomepage)
    return "/";
  return (_b = item == null ? void 0 : item.page) == null ? void 0 : _b.slug;
};
const getTargetUrl = (target) => {
  if (target === "BLANK")
    return "_blank";
  return "_self";
};

exports.calculateGrid = calculateGrid;
exports.flattenToTreeMax2Level = flattenToTreeMax2Level;
exports.getTargetUrl = getTargetUrl;
exports.getUrlOfMenuItem = getUrlOfMenuItem;
exports.splitPaddingString = splitPaddingString;
