import { jsx, jsxs } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { Icon } from '@tempi/icons';
import { getStyle, unitParse } from '@tempi/core-renderer';
import { DividerTypeEnum } from './type.es.js';
import { Divider } from '../../core/Divider/Divider.es.js';
import { getSizeWithUnit } from '../../utils/getSizeWithUnit.es.js';
import { getCommonTextCss } from '../../constants/fonts.es.js';
import { getPropsIcon } from '../../utils/getPropsIcon.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const PbDivider = (_a) => {
  var _b = _a, {
    commonStyle,
    gap,
    weight,
    style,
    align,
    type,
    textConfig,
    iconConfig,
    customText
  } = _b, rest = __objRest(_b, [
    "commonStyle",
    "gap",
    "weight",
    "style",
    "align",
    "type",
    "textConfig",
    "iconConfig",
    "customText"
  ]);
  const _a2 = commonStyle || {}, { width, color } = _a2, restCommonStyle = __objRest(_a2, ["width", "color"]);
  const renderText = () => {
    if (customText)
      return customText;
    return /* @__PURE__ */ jsx("span", {
      dangerouslySetInnerHTML: { __html: textConfig == null ? void 0 : textConfig.text }
    });
  };
  const renderDivider = () => {
    var _a3, _b2, _c;
    if (!type)
      return /* @__PURE__ */ jsx(Divider, {
        width: unitParse(width),
        height: getSizeWithUnit(weight),
        color,
        dividerStyle: style,
        align,
        gap: getSizeWithUnit(gap)
      });
    return /* @__PURE__ */ jsxs(Divider, __spreadProps(__spreadValues({}, rest), {
      width: unitParse(width),
      height: getSizeWithUnit(weight),
      color,
      dividerStyle: style,
      align,
      gap: getSizeWithUnit(gap),
      alignContent: type === DividerTypeEnum.text ? textConfig == null ? void 0 : textConfig.align : iconConfig == null ? void 0 : iconConfig.align,
      spacingContent: type === DividerTypeEnum.text ? getSizeWithUnit(textConfig == null ? void 0 : textConfig.spacing) : getSizeWithUnit(iconConfig == null ? void 0 : iconConfig.spacing),
      children: [
        type === DividerTypeEnum.text && renderText(),
        type === DividerTypeEnum.icon && /* @__PURE__ */ jsx(Icon, __spreadValues({}, __spreadValues({
          name: (_a3 = iconConfig == null ? void 0 : iconConfig.icon) == null ? void 0 : _a3.name
        }, getPropsIcon({
          color: (_b2 = iconConfig.icon) == null ? void 0 : _b2.color,
          size: (_c = iconConfig.icon) == null ? void 0 : _c.size
        }))))
      ]
    }));
  };
  return /* @__PURE__ */ jsx(StyledDivider, __spreadProps(__spreadValues({}, rest), {
    commonStyle: restCommonStyle,
    children: renderDivider()
  }));
};
const StyledDivider = styled.div(
  ({ commonStyle }) => `
  ${getStyle(commonStyle)}
  ${getCommonTextCss()}
`
);
PbDivider.displayName = "Divider";

export { PbDivider };
