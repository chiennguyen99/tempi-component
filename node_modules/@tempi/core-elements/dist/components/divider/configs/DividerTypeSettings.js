'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../../i18n.js');
var icons = require('@ant-design/icons');
var reactIcons = require('@fluentui/react-icons');
var coreEditor = require('@tempi/core-editor');
var type = require('../type.js');
var IconTabSetting = require('./IconTabSetting.js');
var TextTabSetting = require('./TextTabSetting.js');
var propKey = require('../../../constants/propKey.js');

const DividerTypeSetting = ({
  propKey: propKey$1,
  hasContent = true
}) => {
  const [type$1, setType] = coreEditor.useProp(propKey.PROP_KEY.joinKey(propKey$1, propKey.PROP_KEY.Type));
  const handleClickDividerType = (value) => {
    if (value === type$1)
      setType(void 0);
    else
      setType(value);
  };
  return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: hasContent && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(coreEditor.FormItem, {
          label: i18n.t("Th\xEAm th\xE0nh ph\u1EA7n trang"),
          children: /* @__PURE__ */ jsxRuntime.jsxs(coreEditor.ButtonGroup, {
            children: [
              /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ButtonGroupItem, {
                isActive: type$1 === type.DividerTypeEnum.text,
                onClick: () => handleClickDividerType(type.DividerTypeEnum.text),
                children: /* @__PURE__ */ jsxRuntime.jsx(reactIcons.TextTRegular, {
                  fontSize: 16
                })
              }),
              /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ButtonGroupItem, {
                isActive: type$1 === type.DividerTypeEnum.icon,
                onClick: () => handleClickDividerType(type.DividerTypeEnum.icon),
                children: /* @__PURE__ */ jsxRuntime.jsx(icons.StarOutlined, {})
              })
            ]
          })
        }),
        type$1 === type.DividerTypeEnum.text && /* @__PURE__ */ jsxRuntime.jsx(TextTabSetting.TextTabSetting, {
          propKey: propKey$1
        }),
        type$1 === type.DividerTypeEnum.icon && /* @__PURE__ */ jsxRuntime.jsx(IconTabSetting.IconTabSetting, {
          propKey: propKey$1
        })
      ]
    })
  });
};

exports.DividerTypeSetting = DividerTypeSetting;
