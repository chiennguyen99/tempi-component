import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import { t } from '../../../i18n.es.js';
import { StarOutlined } from '@ant-design/icons';
import { TextTRegular } from '@fluentui/react-icons';
import { useProp, FormItem, ButtonGroup, ButtonGroupItem } from '@tempi/core-editor';
import { DividerTypeEnum } from '../type.es.js';
import { IconTabSetting } from './IconTabSetting.es.js';
import { TextTabSetting } from './TextTabSetting.es.js';
import { PROP_KEY } from '../../../constants/propKey.es.js';

const DividerTypeSetting = ({
  propKey,
  hasContent = true
}) => {
  const [type, setType] = useProp(PROP_KEY.joinKey(propKey, PROP_KEY.Type));
  const handleClickDividerType = (value) => {
    if (value === type)
      setType(void 0);
    else
      setType(value);
  };
  return /* @__PURE__ */ jsx(Fragment, {
    children: hasContent && /* @__PURE__ */ jsxs(Fragment, {
      children: [
        /* @__PURE__ */ jsx(FormItem, {
          label: t("Th\xEAm th\xE0nh ph\u1EA7n trang"),
          children: /* @__PURE__ */ jsxs(ButtonGroup, {
            children: [
              /* @__PURE__ */ jsx(ButtonGroupItem, {
                isActive: type === DividerTypeEnum.text,
                onClick: () => handleClickDividerType(DividerTypeEnum.text),
                children: /* @__PURE__ */ jsx(TextTRegular, {
                  fontSize: 16
                })
              }),
              /* @__PURE__ */ jsx(ButtonGroupItem, {
                isActive: type === DividerTypeEnum.icon,
                onClick: () => handleClickDividerType(DividerTypeEnum.icon),
                children: /* @__PURE__ */ jsx(StarOutlined, {})
              })
            ]
          })
        }),
        type === DividerTypeEnum.text && /* @__PURE__ */ jsx(TextTabSetting, {
          propKey
        }),
        type === DividerTypeEnum.icon && /* @__PURE__ */ jsx(IconTabSetting, {
          propKey
        })
      ]
    })
  });
};

export { DividerTypeSetting };
