import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../../i18n.es.js';
import { useProp, extractSize, SelectConfig, FormItem, combineSize, ColorPickerConfig } from '@tempi/core-editor';
import { UnitEnum } from '@tempi/core-renderer';
import { InputNumber } from 'antd';
import { DividerStyleEnum } from '../type.es.js';
import { PROP_KEY } from '../../../constants/propKey.es.js';

const styleDividerOptions = [
  { label: "Solid", value: DividerStyleEnum.solid },
  { label: "Double", value: DividerStyleEnum.double },
  { label: "Dotted", value: DividerStyleEnum.dotted },
  { label: "Dashed", value: DividerStyleEnum.dashed }
];
const DividerLineSetting = ({
  propKey
}) => {
  const [width, setWidth] = useProp(
    PROP_KEY.joinKey(PROP_KEY.CommonStyle, PROP_KEY.Width)
  );
  const [weight, setWeight] = useProp(
    PROP_KEY.joinKey(propKey, PROP_KEY.Weight)
  );
  const [gap, setGap] = useProp(PROP_KEY.joinKey(propKey, PROP_KEY.Gap));
  const [widthValue] = extractSize(width, UnitEnum.percent);
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(SelectConfig, {
        propKey: PROP_KEY.joinKey(propKey, PROP_KEY.Style),
        options: styleDividerOptions,
        formItemProps: {
          label: t("Ki\u1EC3u")
        }
      }),
      /* @__PURE__ */ jsx(FormItem, {
        label: t("Chi\u1EC1u r\u1ED9ng"),
        children: /* @__PURE__ */ jsx(InputNumber, {
          style: { width: 140 },
          value: widthValue,
          onChange: (val) => {
            setWidth(combineSize(val, UnitEnum.percent));
          },
          max: 100,
          min: 0,
          addonAfter: "%"
        })
      }),
      /* @__PURE__ */ jsx(FormItem, {
        label: t("\u0110\u1ED9 d\xE0y"),
        children: /* @__PURE__ */ jsx(InputNumber, {
          value: weight == null ? void 0 : weight.size,
          onChange: (val) => {
            setWeight({
              unit: UnitEnum.pixel,
              size: val
            });
          },
          addonAfter: "px",
          min: 0,
          style: { width: 140 }
        })
      }),
      /* @__PURE__ */ jsx(FormItem, {
        label: t("Kho\u1EA3ng c\xE1ch"),
        children: /* @__PURE__ */ jsx(InputNumber, {
          value: gap == null ? void 0 : gap.size,
          onChange: (val) => {
            setGap({
              unit: UnitEnum.pixel,
              size: val
            });
          },
          addonAfter: "px",
          min: 0,
          style: { width: 140 }
        })
      }),
      /* @__PURE__ */ jsx(ColorPickerConfig, {
        formItemProps: {
          label: t("M\xE0u \u0111\u01B0\u1EDDng ph\xE2n chia")
        },
        propKey: PROP_KEY.joinKey(PROP_KEY.CommonStyle, PROP_KEY.Color)
      })
    ]
  });
};

export { DividerLineSetting };
