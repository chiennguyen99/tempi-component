'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../../i18n.js');
var coreEditor = require('@tempi/core-editor');
var coreRenderer = require('@tempi/core-renderer');
var antd = require('antd');
var type = require('../type.js');
var propKey = require('../../../constants/propKey.js');

const styleDividerOptions = [
  { label: "Solid", value: type.DividerStyleEnum.solid },
  { label: "Double", value: type.DividerStyleEnum.double },
  { label: "Dotted", value: type.DividerStyleEnum.dotted },
  { label: "Dashed", value: type.DividerStyleEnum.dashed }
];
const DividerLineSetting = ({
  propKey: propKey$1
}) => {
  const [width, setWidth] = coreEditor.useProp(
    propKey.PROP_KEY.joinKey(propKey.PROP_KEY.CommonStyle, propKey.PROP_KEY.Width)
  );
  const [weight, setWeight] = coreEditor.useProp(
    propKey.PROP_KEY.joinKey(propKey$1, propKey.PROP_KEY.Weight)
  );
  const [gap, setGap] = coreEditor.useProp(propKey.PROP_KEY.joinKey(propKey$1, propKey.PROP_KEY.Gap));
  const [widthValue] = coreEditor.extractSize(width, coreRenderer.UnitEnum.percent);
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
        propKey: propKey.PROP_KEY.joinKey(propKey$1, propKey.PROP_KEY.Style),
        options: styleDividerOptions,
        formItemProps: {
          label: i18n.t("Ki\u1EC3u")
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.FormItem, {
        label: i18n.t("Chi\u1EC1u r\u1ED9ng"),
        children: /* @__PURE__ */ jsxRuntime.jsx(antd.InputNumber, {
          style: { width: 140 },
          value: widthValue,
          onChange: (val) => {
            setWidth(coreEditor.combineSize(val, coreRenderer.UnitEnum.percent));
          },
          max: 100,
          min: 0,
          addonAfter: "%"
        })
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.FormItem, {
        label: i18n.t("\u0110\u1ED9 d\xE0y"),
        children: /* @__PURE__ */ jsxRuntime.jsx(antd.InputNumber, {
          value: weight == null ? void 0 : weight.size,
          onChange: (val) => {
            setWeight({
              unit: coreRenderer.UnitEnum.pixel,
              size: val
            });
          },
          addonAfter: "px",
          min: 0,
          style: { width: 140 }
        })
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.FormItem, {
        label: i18n.t("Kho\u1EA3ng c\xE1ch"),
        children: /* @__PURE__ */ jsxRuntime.jsx(antd.InputNumber, {
          value: gap == null ? void 0 : gap.size,
          onChange: (val) => {
            setGap({
              unit: coreRenderer.UnitEnum.pixel,
              size: val
            });
          },
          addonAfter: "px",
          min: 0,
          style: { width: 140 }
        })
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ColorPickerConfig, {
        formItemProps: {
          label: i18n.t("M\xE0u \u0111\u01B0\u1EDDng ph\xE2n chia")
        },
        propKey: propKey.PROP_KEY.joinKey(propKey.PROP_KEY.CommonStyle, propKey.PROP_KEY.Color)
      })
    ]
  });
};

exports.DividerLineSetting = DividerLineSetting;
