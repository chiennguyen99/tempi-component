import { jsx } from 'react/jsx-runtime';
import { withSelector, AdvanceAttributes, getEditorName } from '@tempi/core-editor';
import { DEFAULT_DIVIDER } from './constants.es.js';
import { DividerQuickSetting } from './quick-setting.es.js';
import { PbDivider } from './ui.es.js';
import { TiptapEditorSimple } from '../../configs/TipTapEditor/TiptapEditorSimple.es.js';
import { RowEditor } from '../section/selector.es.js';
import { RootEditor } from '../root/selector.es.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const DividerEditor = withSelector(
  (props) => {
    return /* @__PURE__ */ jsx(PbDivider, __spreadValues({
      customText: /* @__PURE__ */ jsx(TiptapEditorSimple, {
        propKey: "textConfig.text"
      })
    }, props));
  },
  {
    displayName: "\u0110\u01B0\u1EDDng ph\xE2n chia",
    tag: PbDivider.displayName.toLowerCase(),
    quickSetting: DividerQuickSetting,
    advanceAttributes: AdvanceAttributes,
    props: DEFAULT_DIVIDER,
    rules: {
      canDrop: (targetNode) => {
        const ignoreTargets = [
          getEditorName({ RowEditor }),
          getEditorName({ RootEditor })
        ];
        return !ignoreTargets.includes(targetNode.data.name);
      }
    }
  },
  {
    style: {
      cursor: "pointer"
    }
  }
);

export { DividerEditor };
