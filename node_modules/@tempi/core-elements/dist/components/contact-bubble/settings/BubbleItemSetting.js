'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../../i18n.js');
var styled = require('@emotion/styled');
var coreEditor = require('@tempi/core-editor');
var coreRenderer = require('@tempi/core-renderer');
var React = require('react');
var type = require('../type.js');
var antd = require('antd');
var TrackingSettingModal = require('./TrackingSettingModal.js');
var selector = require('../../popup/v1/selector.js');
var propKey = require('../../../constants/propKey.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

const eventOptions = [
  { value: type.EventType.HREF, label: i18n.t("\u0110\u01B0\u1EDDng d\u1EABn URL/S\u1ED1 \u0111i\u1EC7n tho\u1EA1i") },
  { value: type.EventType.POPUP, label: i18n.t("M\u1EDF popup") }
];
const BubbleItemSetting = ({
  index,
  device
}) => {
  var _a;
  const { token } = antd.theme.useToken();
  const [showTrackingSetting, setShowTrackingSetting] = React.useState(false);
  const { nodes } = coreEditor.useEditor((state) => {
    return { nodes: state.nodes };
  });
  const popupListSelection = [
    ...new Set(
      (_a = nodes[coreRenderer.ROOT]) == null ? void 0 : _a.data.nodes.filter(
        (key) => {
          var _a2, _b, _c;
          return ((_b = (_a2 = nodes == null ? void 0 : nodes[key]) == null ? void 0 : _a2.data) == null ? void 0 : _b.name) === coreEditor.getEditorName({ PopupEditorV1: selector.PopupEditorV1 }) && !((_c = nodes[key]) == null ? void 0 : _c.data.props.isMainPopup);
        }
      )
    )
  ].map((id) => ({
    label: nodes[id].data.props.name,
    value: id
  }));
  const bubbleItemPropKey = propKey.PROP_KEY.joinKey(
    device === "desktop" ? propKey.PROP_KEY.Desktop : propKey.PROP_KEY.Mobile,
    propKey.PROP_KEY.Items,
    index.toString()
  );
  const [eventType, setEventType] = coreEditor.usePropSeparateDevice(
    propKey.PROP_KEY.joinKey(bubbleItemPropKey, propKey.PROP_KEY.EventType)
  );
  const renderEventConfig = (eventType2) => {
    switch (eventType2) {
      case type.EventType.POPUP:
        return /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectPopupConfig, {
          label: i18n.t("M\u1EDF popup"),
          placeholder: i18n.t("Ch\u1ECDn popup"),
          options: popupListSelection,
          propKey: propKey.PROP_KEY.joinKey(bubbleItemPropKey, propKey.PROP_KEY.Popup),
          itemIndex: index,
          device
        });
      default:
        return /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputConfig, {
          propKey: propKey.PROP_KEY.joinKey(bubbleItemPropKey, propKey.PROP_KEY.Href),
          formItemProps: {
            label: i18n.t("\u0110\u01B0\u1EDDng d\u1EABn URL/S\u1ED1 \u0111i\u1EC7n tho\u1EA1i"),
            layout: "vertical"
          },
          inputProps: {
            placeholder: i18n.t("Nh\u1EADp \u0111\u01B0\u1EDDng d\u1EABn URL ho\u1EB7c s\u1ED1 \u0111i\u1EC7n tho\u1EA1i")
          }
        });
    }
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(Wrapper, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ImageConfig, {
        propKey: propKey.PROP_KEY.joinKey(
          bubbleItemPropKey,
          propKey.PROP_KEY.Icon,
          propKey.PROP_KEY.Src
        )
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputConfig, {
        propKey: propKey.PROP_KEY.joinKey(bubbleItemPropKey, propKey.PROP_KEY.Title),
        formItemProps: {
          label: i18n.t("contact_bubble_item_title"),
          layout: "vertical"
        },
        inputProps: {
          placeholder: i18n.t("Nh\u1EADp n\u1ED9i dung")
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.RangeSliderConfig, {
        formItemProps: { label: i18n.t("Chi\u1EC1u cao n\xFAt") },
        propKey: propKey.PROP_KEY.joinKey(bubbleItemPropKey, propKey.PROP_KEY.Size),
        sliderProps: {
          defaultValue: 50,
          min: 10,
          max: 100
        },
        unitProps: {
          defaultValue: "px"
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
        options: eventOptions,
        formItemProps: {
          label: i18n.t("click_event"),
          style: { marginBottom: "0.5rem" }
        },
        selectProps: {
          allowClear: false,
          placeholder: i18n.t("Ch\u1ECDn s\u1EF1 ki\u1EC7n"),
          style: { width: "100%" },
          onChange: (val) => {
            setEventType(val);
          },
          value: eventType || type.EventType.HREF
        }
      }),
      renderEventConfig(eventType),
      /* @__PURE__ */ jsxRuntime.jsx("div", {
        style: { color: token.colorPrimary, cursor: "pointer" },
        onClick: () => setShowTrackingSetting(true),
        children: i18n.t("conversion_tracking_setting")
      }),
      /* @__PURE__ */ jsxRuntime.jsx(TrackingSettingModal.TrackingSettingModal, {
        bubbleItemPropKey,
        isOpen: showTrackingSetting,
        setShowTrackingSetting
      })
    ]
  });
};
const Wrapper = styled__default["default"].div`
  margin-top: 1em;
`;

exports.BubbleItemSetting = BubbleItemSetting;
