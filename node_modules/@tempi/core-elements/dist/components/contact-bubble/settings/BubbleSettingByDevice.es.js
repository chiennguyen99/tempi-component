import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../../i18n.es.js';
import { useBuilder, useProp, SelectConfig, ItemListConfig, RangeSliderConfig } from '@tempi/core-editor';
import { BubbleItemSetting } from './BubbleItemSetting.es.js';
import { ContactBubbleLayout, ContactBubblePosition } from '../type.es.js';
import styled from '@emotion/styled';
import { PROP_KEY } from '../../../constants/propKey.es.js';

const BubbleSettingByDevice = ({ device }) => {
  const { relatedNodeId } = useBuilder();
  const [position] = useProp(PROP_KEY.joinKey(device, PROP_KEY.Position));
  const renderGapConfig = () => {
    let horizontalLabel = "";
    let verticalLabel = "";
    switch (position) {
      case ContactBubblePosition.BOTTOM_RIGHT:
        horizontalLabel = t("C\xE1ch l\u1EC1 ph\u1EA3i");
        verticalLabel = t("C\xE1ch l\u1EC1 d\u01B0\u1EDBi");
        break;
      case ContactBubblePosition.BOTTOM_LEFT:
        horizontalLabel = t("C\xE1ch l\u1EC1 tr\xE1i");
        verticalLabel = t("C\xE1ch l\u1EC1 d\u01B0\u1EDBi");
        break;
      case ContactBubblePosition.CENTER_LEFT:
        horizontalLabel = t("C\xE1ch l\u1EC1 tr\xE1i");
        break;
      case ContactBubblePosition.CENTER_RIGHT:
        horizontalLabel = t("C\xE1ch l\u1EC1 ph\u1EA3i");
        break;
    }
    return /* @__PURE__ */ jsxs(Fragment, {
      children: [
        horizontalLabel && /* @__PURE__ */ jsx(RangeSliderConfig, {
          formItemProps: {
            label: horizontalLabel
          },
          sliderProps: {
            min: 0,
            max: 200
          },
          propKey: PROP_KEY.joinKey(
            device,
            PROP_KEY.Gap,
            PROP_KEY.Horizontal
          ),
          unitProps: {
            defaultValue: "px"
          }
        }),
        verticalLabel && /* @__PURE__ */ jsx(RangeSliderConfig, {
          formItemProps: {
            label: verticalLabel
          },
          sliderProps: {
            min: 0,
            max: 200
          },
          propKey: PROP_KEY.joinKey(device, PROP_KEY.Gap, PROP_KEY.Vertical),
          unitProps: {
            defaultValue: "px"
          }
        })
      ]
    });
  };
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(PanelLabel, {
        children: t("C\xE0i \u0111\u1EB7t chung")
      }),
      /* @__PURE__ */ jsx(SelectConfig, {
        options: [
          { label: t("Nh\u1EA5p nh\xE1y"), value: ContactBubbleLayout.FLASH },
          { label: t("H\xE0ng d\u1ECDc"), value: ContactBubbleLayout.VERTICAL }
        ],
        propKey: PROP_KEY.joinKey(device, PROP_KEY.Layout),
        formItemProps: { label: t("Ki\u1EC3u") }
      }),
      /* @__PURE__ */ jsx(SelectConfig, {
        propKey: PROP_KEY.joinKey(device, PROP_KEY.Position),
        formItemProps: { label: t("V\u1ECB tr\xED") },
        options: [
          {
            label: t("D\u01B0\u1EDBi c\xF9ng ph\u1EA3i"),
            value: ContactBubblePosition.BOTTOM_RIGHT
          },
          {
            label: t("D\u01B0\u1EDBi c\xF9ng tr\xE1i"),
            value: ContactBubblePosition.BOTTOM_LEFT
          },
          {
            label: t("Gi\u1EEFa ph\u1EA3i"),
            value: ContactBubblePosition.CENTER_RIGHT
          },
          {
            label: t("Gi\u1EEFa tr\xE1i"),
            value: ContactBubblePosition.CENTER_LEFT
          }
        ]
      }),
      renderGapConfig(),
      /* @__PURE__ */ jsx(PanelLabel, {
        children: t("Danh s\xE1ch n\xFAt")
      }),
      /* @__PURE__ */ jsx(ItemListConfig, {
        propKey: PROP_KEY.joinKey(device, PROP_KEY.Items),
        activeItemConfig: BubbleItemSetting,
        activeItemConfigProps: { device },
        defaultActiveItem: relatedNodeId == null ? void 0 : relatedNodeId.itemIndex,
        addItemText: t("Th\xEAm n\xFAt"),
        defaultItem: {
          title: "",
          link: ""
        }
      })
    ]
  });
};
const PanelLabel = styled.div`
  font-weight: bold;
  margin-bottom: 8px;
`;

export { BubbleSettingByDevice };
