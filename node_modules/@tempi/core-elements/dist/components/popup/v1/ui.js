'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var styled = require('@emotion/styled');
var icons = require('@tempi/icons');
var coreRenderer = require('@tempi/core-renderer');
var clsx = require('clsx');
var React = require('react');
var constants = require('./constants.js');
var getPropsIcon = require('../../../utils/getPropsIcon.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
var clsx__default = /*#__PURE__*/_interopDefaultLegacy(clsx);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const PopupV1 = React__default["default"].forwardRef(
  (props, ref) => {
    const _a = props, {
      commonStyle,
      maskStyle,
      position,
      children,
      show,
      onFinishClose,
      displayOnVisitPage,
      delay,
      isEditorMode,
      displayOnScrollTo,
      displayOnExitPage,
      showCloseIcon,
      event,
      closeIcon,
      closeIconWrapperStyle,
      allowCloseOnEscPressed,
      zIndex,
      className,
      displayOncePerSession = false,
      id,
      customCss
    } = _a, rest = __objRest(_a, [
      "commonStyle",
      "maskStyle",
      "position",
      "children",
      "show",
      "onFinishClose",
      "displayOnVisitPage",
      "delay",
      "isEditorMode",
      "displayOnScrollTo",
      "displayOnExitPage",
      "showCloseIcon",
      "event",
      "closeIcon",
      "closeIconWrapperStyle",
      "allowCloseOnEscPressed",
      "zIndex",
      "className",
      "displayOncePerSession",
      "id",
      "customCss"
    ]);
    const [showPopup, setShowPopup] = React.useState(false);
    const [displayOnScrolToFlag, setDisplayOnScrolToFlag] = React.useState(false);
    const [displayOnExitFlag, setDisplayOnExitFlag] = React.useState(false);
    const maskRef = React.useRef(null);
    const {
      trackingEventName,
      conversionGGAdsId,
      conversionGGAdsLabel,
      scriptCustom
    } = event || {};
    const handleOpenPopupOnExitPage = React.useCallback(() => {
      handleOpenPopup(true);
      setDisplayOnExitFlag(true);
    }, []);
    const handleOpenPopup = (isExitPageAction = false) => {
      if (displayOncePerSession) {
        const IS_DISABLED_POPUP_V1_KEY = `is-disabled-popup-v1-${isExitPageAction ? "exit" : "visit"}-${id}`;
        const isDisabledPopup = sessionStorage.getItem(
          IS_DISABLED_POPUP_V1_KEY
        );
        if (!isEditorMode && !isDisabledPopup) {
          openPopup();
          setTimeout(() => {
            sessionStorage.setItem(IS_DISABLED_POPUP_V1_KEY, "true");
          }, constants.WAITING_FOR_DISABLED_POPUP);
        }
      } else {
        openPopup();
      }
    };
    React.useEffect(() => {
      let openPopupTimer;
      if (displayOnVisitPage && !isEditorMode) {
        openPopupTimer = setTimeout(() => handleOpenPopup(), delay * 1e3);
      }
      return () => {
        clearTimeout(openPopupTimer);
      };
    }, [displayOnVisitPage, delay, isEditorMode]);
    React.useEffect(() => {
      if (isEditorMode || !displayOnExitPage)
        return;
      if (!displayOnExitFlag) {
        document.body.addEventListener("mouseleave", handleOpenPopupOnExitPage);
      } else
        document.body.removeEventListener(
          "mouseleave",
          handleOpenPopupOnExitPage
        );
    }, [displayOnExitFlag]);
    const handleScrollTo = React.useCallback(() => {
      var _a2, _b;
      const element = document.getElementById(displayOnScrollTo);
      const rect = element == null ? void 0 : element.getBoundingClientRect();
      if (!showPopup && rect && rect.top >= 0 && rect.left >= 0 && rect.bottom <= ((window == null ? void 0 : window.innerHeight) || ((_a2 = document == null ? void 0 : document.documentElement) == null ? void 0 : _a2.clientHeight)) && rect.right <= ((window == null ? void 0 : window.innerWidth) || ((_b = document == null ? void 0 : document.documentElement) == null ? void 0 : _b.clientWidth))) {
        openPopup();
        setDisplayOnScrolToFlag(true);
      }
    }, []);
    React.useEffect(() => {
      if (!displayOnScrolToFlag) {
        document.addEventListener("scroll", handleScrollTo);
      } else {
        document.removeEventListener("scroll", handleScrollTo);
      }
      return () => {
        document.removeEventListener("scroll", handleScrollTo);
      };
    }, [displayOnScrolToFlag]);
    const openPopup = () => {
      setShowPopup(true);
      onTrackingEvent();
    };
    const onTrackingEvent = () => {
      var _a2, _b, _c, _d;
      if (trackingEventName) {
        (_a2 = window == null ? void 0 : window.gtag) == null ? void 0 : _a2.call(window, "event", trackingEventName);
        (_b = window == null ? void 0 : window.fbq) == null ? void 0 : _b.call(window, "trackCustom", trackingEventName);
        (_c = window == null ? void 0 : window.track) == null ? void 0 : _c.call(window, "customEvent", trackingEventName);
      }
      if (conversionGGAdsId && conversionGGAdsLabel) {
        (_d = window == null ? void 0 : window.gtag) == null ? void 0 : _d.call(window, "event", "conversion", {
          send_to: `AW-${conversionGGAdsId}/${conversionGGAdsLabel}`
        });
      }
      runStringFunc(scriptCustom);
    };
    const runStringFunc = (script) => {
      if (script == null ? void 0 : script.trim()) {
        try {
          const excuteScript = new Function(coreRenderer.unescapeString(script));
          excuteScript();
        } catch (err) {
          console.error(err);
        }
      }
    };
    const handleClosePopup = () => {
      setShowPopup(false);
      onFinishClose == null ? void 0 : onFinishClose();
    };
    React.useEffect(() => {
      setShowPopup(show);
    }, [show]);
    React.useEffect(() => {
      if (showPopup && allowCloseOnEscPressed && !isEditorMode) {
        const handleDocumentKeyDown = (e) => {
          if (e.keyCode === 27) {
            handleClosePopup();
          }
        };
        document.addEventListener("keydown", handleDocumentKeyDown);
        return () => {
          document.removeEventListener("keydown", handleDocumentKeyDown);
        };
      }
    }, [showPopup]);
    const calculateZIndex = isEditorMode ? 1e3 : zIndex || 1050;
    return /* @__PURE__ */ jsxRuntime.jsxs(Mask, {
      className: clsx__default["default"]([show || showPopup ? "show" : "hide", className]),
      ref: maskRef,
      style: { zIndex: calculateZIndex },
      position,
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(Backdrop, {
          maskStyle,
          onClick: () => {
            if (!showCloseIcon)
              handleClosePopup();
          }
        }),
        /* @__PURE__ */ jsxRuntime.jsxs(Wrapper, __spreadProps(__spreadValues({
          onClick: () => {
            var _a2, _b, _c, _d;
            if (!showPopup)
              openPopup();
            if ((_b = (_a2 = maskRef.current) == null ? void 0 : _a2.classList) == null ? void 0 : _b.contains("hide-from-btn")) {
              handleClosePopup();
              (_d = (_c = maskRef.current) == null ? void 0 : _c.classList) == null ? void 0 : _d.remove("hide-from-btn");
            }
          },
          ref,
          position,
          commonStyle,
          customCss
        }, rest), {
          children: [
            showCloseIcon && /* @__PURE__ */ jsxRuntime.jsx(StyledIconClose, {
              style: closeIconWrapperStyle,
              onClick: handleClosePopup,
              children: /* @__PURE__ */ jsxRuntime.jsx(icons.Icon, __spreadValues({
                name: "CloseOutlined"
              }, getPropsIcon.getPropsIcon({
                size: (closeIcon == null ? void 0 : closeIcon.size) || 18,
                color: closeIcon == null ? void 0 : closeIcon.color
              })))
            }),
            /* @__PURE__ */ jsxRuntime.jsx("div", {
              className: "popup-content",
              children
            })
          ]
        }))
      ]
    });
  }
);
const POPUP_CONTENT_STYLE_MAPPING = {
  topLeft: `vertical-align: top;
            top: 0;
            left: 0;
            right: unset !important;
            bottom:unset !important;`,
  topCenter: `vertical-align: top;
              top: 0;
              left: unset !important;
              right: unset !important;
              bottom: unset !important;`,
  topRight: `vertical-align: top;
            top: 0;
            left: unset !important;
            right: 0;
            bottom: unset !important;`,
  centerLeft: `vertical-align: middle;
              top: unset !important;
              left: 0;
              right: unset !important;
              bottom: unset !important;`,
  centerRight: `vertical-align: middle;
                top: unset !important;
                left: unset !important;
                right: 0;
                bottom: unset !important;`,
  bottomLeft: `vertical-align: bottom;
              top: unset !important;
              left: 0;
              right:unset !important;
              bottom: 0;`,
  bottomRight: `vertical-align: bottom;
                bottom: 0;
                right: 0;
                top: unset !important;;
                left: unset !important;`,
  bottomCenter: `vertical-align: bottom;
                top: unset !important;
                left: unset !important;
                right:unset !important;
                bottom: 0;`,
  center: `vertical-align: middle;`,
  default: `top: 100px;
            left: unset !important;
            right:unset !important;
            bottom: unset !important;
            vertical-align: top;`
};
const MASK_STYLE_MAPPING = {
  topLeft: "text-align: start;",
  topCenter: "text-align: center;",
  topRight: "text-align: end;",
  centerLeft: "text-align: start;",
  centerRight: "text-align: end;",
  bottomLeft: "text-align: start;",
  bottomRight: "text-align: end;",
  bottomCenter: "text-align: center;",
  center: "text-align: center",
  default: "text-align: center;"
};
const VERTICAL_MAPPING = {
  topLeft: "vertical-align: top;",
  topCenter: "vertical-align: top;",
  topRight: "vertical-align: top;",
  centerLeft: "vertical-align: middle;",
  centerRight: "vertical-align: middle;",
  bottomLeft: "vertical-align: bottom;",
  bottomRight: "vertical-align: bottom;",
  bottomCenter: "vertical-align: bottom;",
  center: "vertical-align: middle;",
  default: "vertical-align: top;"
};
const getStyleByPosition = (position, mappingData) => {
  switch (position) {
    case "default":
      return `
        ${mappingData["default"]}
      `;
    case "topLeft":
      return `
        ${mappingData["topLeft"]}
      `;
    case "topCenter":
      return `
        ${mappingData["topCenter"]}
      `;
    case "topRight":
      return `
        ${mappingData["topRight"]}
      `;
    case "centerLeft":
      return `
        ${mappingData["centerLeft"]}
      `;
    case "centerRight":
      return `
        ${mappingData["centerRight"]}
      `;
    case "bottomLeft":
      return `
            ${mappingData["bottomLeft"]}
        `;
    case "bottomCenter":
      return `
        ${mappingData["bottomCenter"]}
      `;
    case "bottomRight":
      return `
        ${mappingData["bottomRight"]}
      `;
    case "center":
      return `
        ${mappingData["center"]}
      `;
    default:
      return `
        ${mappingData["default"]}
      `;
  }
};
const Wrapper = styled__default["default"].div(
  ({
    commonStyle,
    position,
    customCss
  }) => {
    const _a = commonStyle || {}, { height } = _a, rest = __objRest(_a, ["height"]);
    return `
    position: relative !important;
    z-index: 1050;
    max-width: 100%;
    min-height: ${height || 400}px;
    height: max-content;
    text-align: start;
    display: inline-block;
    ${getStyleByPosition(position, POPUP_CONTENT_STYLE_MAPPING)}
    ${coreRenderer.getStyle(rest)}
    ${customCss != null ? customCss : ""}
  `;
  }
);
const Mask = styled__default["default"].div(({ position }) => {
  return `
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 1000;
  overflow: auto;
  ${getStyleByPosition(position, MASK_STYLE_MAPPING)}
  &.hide {
    display: none;
  }
  &::before {
    display: inline-block;
    width: 0;
    height: 100%;
    content: '';
    ${getStyleByPosition(position, VERTICAL_MAPPING)}
  }
  `;
});
const Backdrop = styled__default["default"].div(
  ({ maskStyle }) => `
 ${coreRenderer.getStyle(maskStyle)}
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 0;
`
);
const StyledIconClose = styled__default["default"].div`
  position: absolute;
  right: 10px;
  top: 8px;
  cursor: pointer;
  z-index: 1;
`;
PopupV1.displayName = "PopupV1";

exports.PopupV1 = PopupV1;
