import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../../i18n.es.js';
import { useEditor, useNode, useBuilder, OpenSettingDialog, DeleteNode, QuickSettingButton } from '@tempi/core-editor';
import { ROOT, BUBBLE } from '@tempi/core-renderer';
import styled from '@emotion/styled';
import { BackgroundQuickSetting } from '../../../quick-configs/BackgroundQuickSetting/BackgroundQuickSetting.es.js';
import { DuplicatePopup } from '../../../quick-configs/DuplicatePopup/DuplicatePopup.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const PopupQuickSetting = ({ setShow }) => {
  const { actions } = useEditor();
  const { parentId, id } = useNode((node) => {
    return {
      parentId: node.data.parent
    };
  });
  const {
    isEditingPopup,
    relatedNodeId,
    setRelatedNodeId,
    setShowBubbleSetting
  } = useBuilder();
  const handleClosePopupConfig = () => {
    actions.setCustom(ROOT, (custom) => custom.isEditingPopup = void 0);
    setShow(false);
    if (relatedNodeId == null ? void 0 : relatedNodeId.componentId) {
      if (relatedNodeId.componentId === BUBBLE) {
        setTimeout(() => {
          setShowBubbleSetting(true);
          setRelatedNodeId((prev) => __spreadProps(__spreadValues({}, prev), {
            popupId: id,
            componentId: void 0
          }));
        }, 50);
      } else {
        actions.selectNode(relatedNodeId == null ? void 0 : relatedNodeId.componentId);
        setRelatedNodeId((prev) => __spreadProps(__spreadValues({}, prev), {
          popupId: id,
          componentId: void 0
        }));
      }
    } else {
      actions.selectNode(parentId);
    }
  };
  return /* @__PURE__ */ jsxs(Wrapper, {
    children: [
      /* @__PURE__ */ jsxs(Fragment, {
        children: [
          /* @__PURE__ */ jsx(BackgroundQuickSetting, {}),
          /* @__PURE__ */ jsx(DuplicatePopup, {}),
          /* @__PURE__ */ jsx(OpenSettingDialog, {}),
          !isEditingPopup && /* @__PURE__ */ jsx(DeleteNode, {})
        ]
      }),
      !isEditingPopup && setShow && /* @__PURE__ */ jsx(QuickSettingButton, {
        onClick: handleClosePopupConfig,
        children: t("\u0110\xF3ng")
      })
    ]
  });
};
const Wrapper = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding-right: 5px;
  background: #fff;
  border-radius: 999px;
  position: absolute;
  top: -50px;
  right: 0;
`;

export { PopupQuickSetting };
