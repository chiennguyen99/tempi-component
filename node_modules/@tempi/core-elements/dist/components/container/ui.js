'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var styled = require('@emotion/styled');
var coreRenderer = require('@tempi/core-renderer');
var React = require('react');
var clsx = require('clsx');
var Container = require('../../core/Container/Container.js');
var BackgroundImage = require('../../core/BackgroundImage/BackgroundImage.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var clsx__default = /*#__PURE__*/_interopDefaultLegacy(clsx);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const StyledContainer = styled__default["default"](Container.Container)(
  ({ commonStyle }) => `
  ${coreRenderer.getStyle(commonStyle, { lazyBgImage: true })}
`
);
const PbContainer = React__default["default"].forwardRef(
  (props, passRef) => {
    const { featureFlags } = coreRenderer.useStore();
    const isNewBackground = !!(featureFlags == null ? void 0 : featureFlags.flagPB3979);
    const _a = props, { commonStyle, children, className } = _a, rest = __objRest(_a, ["commonStyle", "children", "className"]);
    const _b = commonStyle, {
      backgroundImage,
      bgImageWidth,
      backgroundPosition,
      defaultOverlay,
      backgroundMarqueeDirection,
      backgroundMarqueeSpeed
    } = _b, restCommonStyle = __objRest(_b, [
      "backgroundImage",
      "bgImageWidth",
      "backgroundPosition",
      "defaultOverlay",
      "backgroundMarqueeDirection",
      "backgroundMarqueeSpeed"
    ]);
    const containerRef = React.useRef();
    const ref = passRef || containerRef;
    const isIntersected = coreRenderer.useIntersectionObserver(ref, {
      freezeOnceVisible: true
    });
    const { style: animationStyle, animationClassName } = coreRenderer.useAnimation(
      commonStyle == null ? void 0 : commonStyle.animation,
      containerRef
    );
    return /* @__PURE__ */ jsxRuntime.jsxs(StyledContainer, __spreadProps(__spreadValues({
      ref,
      commonStyle: isNewBackground ? restCommonStyle : commonStyle,
      className: clsx__default["default"](
        className,
        {
          [coreRenderer.BG_LAZY_CLASS_NAME]: true,
          [coreRenderer.BG_VISIBLE_LAZY_CLASS_NAME]: isIntersected
        },
        animationClassName
      )
    }, rest), {
      style: __spreadValues(__spreadValues({}, isNewBackground ? { position: "relative" } : {}), animationStyle),
      children: [
        isNewBackground && /* @__PURE__ */ jsxRuntime.jsx(BackgroundImage.BackgroundImage, {
          uniqId: props.dataUniqId,
          styles: {
            backgroundImage,
            bgImageWidth,
            backgroundPosition,
            defaultOverlay
          }
        }),
        children
      ]
    }));
  }
);
PbContainer.displayName = Container.Container.displayName;

exports.PbContainer = PbContainer;
