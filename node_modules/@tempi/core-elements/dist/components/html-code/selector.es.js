import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../i18n.es.js';
import styled from '@emotion/styled';
import { withSelector, AdvanceAttributes, getEditorName } from '@tempi/core-editor';
import { HtmlCodeQuickSetting } from './quick-setting.es.js';
import { HtmlCodeSetting } from './setting.es.js';
import { HtmlCode } from './ui.es.js';
import { RowEditor } from '../section/selector.es.js';
import { RootEditor } from '../root/selector.es.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const Inner = (_a) => {
  var _b = _a, { htmlCode } = _b, rest = __objRest(_b, ["htmlCode"]);
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      !htmlCode && /* @__PURE__ */ jsx(Empty, {
        children: t("M\xE3 HTML")
      }),
      /* @__PURE__ */ jsx(HtmlCode, __spreadValues({
        style: { pointerEvents: "none" },
        htmlCode
      }, rest))
    ]
  });
};
const Empty = styled.div`
  min-height: 50px;
  background-color: #ddd;
  width: 100;
  display: flex;
  justify-content: center;
  align-items: center;
`;
const HtmlCodeEditor = withSelector(
  Inner,
  {
    displayName: "M\xE3 HTML",
    tag: HtmlCode.displayName.toLowerCase(),
    quickSetting: HtmlCodeQuickSetting,
    customAttributes: HtmlCodeSetting,
    advanceAttributes: AdvanceAttributes,
    rules: {
      canDrop: (targetNode) => {
        const ignoreTargets = [
          getEditorName({ RowEditor }),
          getEditorName({ RootEditor })
        ];
        return !ignoreTargets.includes(targetNode.data.name);
      }
    }
  },
  {
    style: { cursor: "pointer" }
  }
);

export { HtmlCodeEditor };
