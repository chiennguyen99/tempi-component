import { jsxs, jsx } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { useStore, getPropsByDevice, useAnimation, getStyle } from '@tempi/core-renderer';
import clsx from 'clsx';
import React__default, { useRef } from 'react';
import { getIconCompoment } from '../../../utils/getIconComponent.es.js';
import { StyledSpinningInner } from '../../../core/Spin/SpinningInner.es.js';
import { Ripple } from '../../../core/Ripple/Ripple.es.js';
import { Link } from '../../../core/Link/index.es.js';
import { getAttrTracking } from '../../../utils/track.es.js';
import { getCommonTextCss } from '../../../constants/fonts.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const ButtonV2 = React__default.forwardRef(
  (props, passRef) => {
    const { device } = useStore();
    const _a = props, {
      isEditingMode = false,
      onClick,
      className,
      disabled,
      customText,
      loading,
      style
    } = _a, restProps = __objRest(_a, [
      "isEditingMode",
      "onClick",
      "className",
      "disabled",
      "customText",
      "loading",
      "style"
    ]);
    const _b = getPropsByDevice(restProps, device), { commonStyle, text, iconConfig, buttonStyle, event } = _b, rest = __objRest(_b, ["commonStyle", "text", "iconConfig", "buttonStyle", "event"]);
    const IconComponent = getIconCompoment(iconConfig == null ? void 0 : iconConfig.icon);
    const hasPrefix = (iconConfig == null ? void 0 : iconConfig.show) && (iconConfig == null ? void 0 : iconConfig.position) === "left" && !!IconComponent;
    const hasSuffix = (iconConfig == null ? void 0 : iconConfig.show) && (iconConfig == null ? void 0 : iconConfig.position) === "right" && !!IconComponent;
    const isDisableBtn = disabled || loading;
    const tekoTracking = event == null ? void 0 : event.tekoTrackingEvent;
    const buttonRef = useRef(null);
    const { style: animationStyle, animationClassName } = useAnimation(
      commonStyle == null ? void 0 : commonStyle.animation,
      buttonRef
    );
    const btn = /* @__PURE__ */ jsxs(StyledButton, __spreadProps(__spreadValues({
      ref: (el) => {
        if (typeof passRef === "function") {
          passRef(el);
        } else if (passRef) {
          passRef.current = el;
        }
        buttonRef.current = el;
      },
      disabled: isDisableBtn,
      buttonStyle,
      onClick: (e) => {
        if (typeof onClick === "function" && !isDisableBtn && !isEditingMode) {
          e.preventDefault();
          onClick();
        }
      }
    }, rest), {
      style: __spreadValues(__spreadValues({}, style), animationStyle),
      children: [
        loading && /* @__PURE__ */ jsx("span", {
          children: /* @__PURE__ */ jsx(StyledSpinningInner, {
            size: 10,
            transform: 5,
            time: 0.6
          })
        }),
        hasPrefix && !loading && IconComponent,
        /* @__PURE__ */ jsx("span", {
          style: __spreadValues(__spreadValues({}, (hasPrefix || loading) && !!text && {
            marginLeft: iconConfig == null ? void 0 : iconConfig.spacing
          }), !!hasSuffix && !!text && {
            marginRight: iconConfig == null ? void 0 : iconConfig.spacing
          }),
          children: customText ? customText : /* @__PURE__ */ jsx("span", {
            dangerouslySetInnerHTML: { __html: text }
          })
        }),
        hasSuffix && IconComponent,
        !disabled && !customText && /* @__PURE__ */ jsx(Ripple, {})
      ]
    }));
    if (isEditingMode) {
      return /* @__PURE__ */ jsx(ButtonWrapper, {
        commonStyle,
        className: clsx(className, animationClassName),
        children: btn
      });
    }
    return /* @__PURE__ */ jsx(ButtonWrapper, __spreadProps(__spreadValues({
      commonStyle,
      className: clsx(className, animationClassName)
    }, getAttrTracking(tekoTracking)), {
      children: /* @__PURE__ */ jsx(Link, __spreadProps(__spreadValues({}, event), {
        children: btn
      }))
    }));
  }
);
const StyledButton = styled.button(
  ({ buttonStyle }) => `
    ${getCommonTextCss(true)}
    position: relative;
    border: none;
    align-items: center;
    text-decoration: none;
    display: flex;
    cursor: pointer;
    justify-content: center;
    font-size: 14px;
    line-height: 16px;
    background: transparent;
    > span {
      font-size: inherit;
      line-height: inherit;
    }
    &[disabled] {
      color: #00000040;
      border-color: #d9d9d9;
      background: #f5f5f5;
      text-shadow: none;
      box-shadow: none;
      cursor: not-allowed;
    }
    ${getStyle(buttonStyle)}
`
);
const ButtonWrapper = styled.div(
  ({ commonStyle }) => `
  display: flex;
  width: 100%;
  position: relative;
  ${getStyle(commonStyle)}
`
);
ButtonV2.displayName = "ButtonV2";

export { ButtonV2, ButtonWrapper };
