import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../../i18n.es.js';
import { Star16Regular } from '@fluentui/react-icons';
import { AntdCustomIcon } from '@tempi/icons-dev';
import { SubQuickSetting, QuickSettingButton, EventQuickSetting, OpenSettingDialog, DuplicateNode, DeleteNode } from '@tempi/core-editor';
import { TypographyQuickSetting } from '../../../quick-configs/typography/TypographyQuickSetting.es.js';
import { ButtonConfig } from './configs/ButtonConfig.es.js';
import { IconButtonConfig } from './configs/IconButtonConfig.es.js';
import { AlignmentQuickSetting } from '../../../quick-configs/AlignmentQuickSetting/AlignmentQuickSetting.es.js';
import { ButtonColorConfig } from './configs/ButtonColorConfig.es.js';
import { PROP_KEY } from '../../../constants/propKey.es.js';

const ButtonQuickSetting = ({
  editor,
  propKey,
  configs = {},
  separateDevice
}) => {
  const alignPropKey = PROP_KEY.joinKey(
    propKey,
    PROP_KEY.CommonStyle,
    PROP_KEY.JustifyContent
  );
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(TypographyQuickSetting, {
        config: { responsiveFontSize: separateDevice },
        editor
      }),
      /* @__PURE__ */ jsx(SubQuickSetting, {
        content: /* @__PURE__ */ jsx(ButtonConfig, {
          separateDevice,
          propKey
        }),
        children: /* @__PURE__ */ jsx(QuickSettingButton, {
          tooltip: t("T\xF9y ch\u1EC9nh n\xFAt b\u1EA5m"),
          children: /* @__PURE__ */ jsx(AntdCustomIcon, {
            name: "ButtonPointerOutlined",
            style: {
              fontSize: 16
            }
          })
        })
      }),
      /* @__PURE__ */ jsx(SubQuickSetting, {
        content: /* @__PURE__ */ jsx(IconButtonConfig, {
          separateDevice,
          propKey
        }),
        children: /* @__PURE__ */ jsx(QuickSettingButton, {
          tooltip: t("T\xF9y ch\u1EC9nh bi\u1EC3u t\u01B0\u1EE3ng"),
          children: /* @__PURE__ */ jsx(Star16Regular, {})
        })
      }),
      configs.alignment && /* @__PURE__ */ jsx(AlignmentQuickSetting, {
        propKey: alignPropKey,
        listAlignment: ["flex-start", "center", "flex-end"],
        separateDevice
      }),
      /* @__PURE__ */ jsx(ButtonColorConfig, {
        separateDevice,
        propKey
      }),
      /* @__PURE__ */ jsx(EventQuickSetting, {
        propKey
      }),
      /* @__PURE__ */ jsx(OpenSettingDialog, {}),
      /* @__PURE__ */ jsx(DuplicateNode, {}),
      /* @__PURE__ */ jsx(DeleteNode, {})
    ]
  });
};

export { ButtonQuickSetting };
