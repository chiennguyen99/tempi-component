'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var coreEditor = require('@tempi/core-editor');
var React = require('react');
var hooks = require('../../../configs/TipTapEditor/hooks.js');
var constants = require('./constants.js');
var quickSetting = require('./quick-setting.js');
var ui = require('./ui.js');
var customKit = require('../../../configs/TipTapEditor/utils/custom-kit.js');
var EditorContent = require('../../../configs/TipTapEditor/components/EditorContent.js');
var propKey = require('../../../constants/propKey.js');
var selector = require('../../section/selector.js');
var selector$1 = require('../../root/selector.js');

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const ButtonEditorV2 = coreEditor.withSelector(
  (props) => {
    const _a = props, { commonStyle } = _a, rest = __objRest(_a, ["commonStyle"]);
    const { isActive } = coreEditor.useNode((node) => ({
      isActive: node.events.selected
    }));
    const { track } = coreEditor.useBuilder();
    const [width, setWidth] = coreEditor.useProp("buttonStyle.width");
    const [height, setHeight] = coreEditor.useProp("buttonStyle.height");
    React.useEffect(() => {
      if (!width)
        setWidth(160);
      if (!height)
        setHeight(40);
    }, []);
    React.useEffect(() => {
      if (isActive) {
        track == null ? void 0 : track({
          regionName: "ButtonEditorV2Setting",
          contentName: "quickSettingBtn"
        });
      }
    }, [isActive]);
    const { editor, setIsEditable } = hooks.useCustomTiptap(
      {
        editorOptions: {
          extensions: [
            customKit.CustomKit.configure({
              bold: false,
              color: false,
              backgroundColor: false,
              link: false,
              list: false,
              table: false,
              textTransform: false,
              underline: false
            })
          ]
        }
      },
      propKey.PROP_KEY.Text
    );
    return /* @__PURE__ */ jsxRuntime.jsx(coreEditor.RenderQuickSetting, {
      open: isActive,
      content: /* @__PURE__ */ jsxRuntime.jsx(quickSetting.ButtonQuickSetting, {
        separateDevice: true,
        editor,
        configs: { alignment: true }
      }),
      children: /* @__PURE__ */ jsxRuntime.jsx(ui.ButtonV2, __spreadValues({
        commonStyle,
        customText: /* @__PURE__ */ jsxRuntime.jsx(EditorContent.EditorContent, {
          editor,
          setIsEditable
        }),
        isEditingMode: true
      }, rest))
    });
  },
  {
    displayName: "N\xFAt b\u1EA5m",
    tag: ui.ButtonV2.displayName.toLowerCase(),
    advanceAttributes: coreEditor.AdvanceAttributes,
    effectAttributes: coreEditor.AnimationConfig,
    props: constants.DEFAULT_BUTTON.primary,
    rules: {
      canDrop: (targetNode) => {
        const getEditorName = (objEditor) => {
          var _a;
          return (_a = Object.keys(objEditor)) == null ? void 0 : _a[0];
        };
        const ignoreTargets = [
          getEditorName({ RowEditor: selector.RowEditor }),
          getEditorName({ RootEditor: selector$1.RootEditor })
        ];
        return !ignoreTargets.includes(targetNode.data.name);
      }
    }
  }
);

exports.ButtonEditorV2 = ButtonEditorV2;
