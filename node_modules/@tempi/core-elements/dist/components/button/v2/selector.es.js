import { jsx } from 'react/jsx-runtime';
import { withSelector, useNode, useBuilder, useProp, RenderQuickSetting, AdvanceAttributes, AnimationConfig } from '@tempi/core-editor';
import { useEffect } from 'react';
import { useCustomTiptap } from '../../../configs/TipTapEditor/hooks.es.js';
import { DEFAULT_BUTTON } from './constants.es.js';
import { ButtonQuickSetting } from './quick-setting.es.js';
import { ButtonV2 } from './ui.es.js';
import { CustomKit } from '../../../configs/TipTapEditor/utils/custom-kit.es.js';
import { EditorContent } from '../../../configs/TipTapEditor/components/EditorContent.es.js';
import { PROP_KEY } from '../../../constants/propKey.es.js';
import { RowEditor } from '../../section/selector.es.js';
import { RootEditor } from '../../root/selector.es.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const ButtonEditorV2 = withSelector(
  (props) => {
    const _a = props, { commonStyle } = _a, rest = __objRest(_a, ["commonStyle"]);
    const { isActive } = useNode((node) => ({
      isActive: node.events.selected
    }));
    const { track } = useBuilder();
    const [width, setWidth] = useProp("buttonStyle.width");
    const [height, setHeight] = useProp("buttonStyle.height");
    useEffect(() => {
      if (!width)
        setWidth(160);
      if (!height)
        setHeight(40);
    }, []);
    useEffect(() => {
      if (isActive) {
        track == null ? void 0 : track({
          regionName: "ButtonEditorV2Setting",
          contentName: "quickSettingBtn"
        });
      }
    }, [isActive]);
    const { editor, setIsEditable } = useCustomTiptap(
      {
        editorOptions: {
          extensions: [
            CustomKit.configure({
              bold: false,
              color: false,
              backgroundColor: false,
              link: false,
              list: false,
              table: false,
              textTransform: false,
              underline: false
            })
          ]
        }
      },
      PROP_KEY.Text
    );
    return /* @__PURE__ */ jsx(RenderQuickSetting, {
      open: isActive,
      content: /* @__PURE__ */ jsx(ButtonQuickSetting, {
        separateDevice: true,
        editor,
        configs: { alignment: true }
      }),
      children: /* @__PURE__ */ jsx(ButtonV2, __spreadValues({
        commonStyle,
        customText: /* @__PURE__ */ jsx(EditorContent, {
          editor,
          setIsEditable
        }),
        isEditingMode: true
      }, rest))
    });
  },
  {
    displayName: "N\xFAt b\u1EA5m",
    tag: ButtonV2.displayName.toLowerCase(),
    advanceAttributes: AdvanceAttributes,
    effectAttributes: AnimationConfig,
    props: DEFAULT_BUTTON.primary,
    rules: {
      canDrop: (targetNode) => {
        const getEditorName = (objEditor) => {
          var _a;
          return (_a = Object.keys(objEditor)) == null ? void 0 : _a[0];
        };
        const ignoreTargets = [
          getEditorName({ RowEditor }),
          getEditorName({ RootEditor })
        ];
        return !ignoreTargets.includes(targetNode.data.name);
      }
    }
  }
);

export { ButtonEditorV2 };
