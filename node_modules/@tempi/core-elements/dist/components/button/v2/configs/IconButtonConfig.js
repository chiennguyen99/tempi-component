'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../../../i18n.js');
var React = require('react');
var coreEditor = require('@tempi/core-editor');
var coreRenderer = require('@tempi/core-renderer');
var IconSettings = require('../../../../configs/IconSettings/IconSettings.js');
var propKey = require('../../../../constants/propKey.js');

const IconButtonConfig = ({
  propKey: propKey$1,
  separateDevice
} = {}) => {
  const iconPropKey = propKey.PROP_KEY.joinKey(
    propKey$1,
    propKey.PROP_KEY.IconConfig,
    propKey.PROP_KEY.Icon
  );
  const [icon, setIcon] = coreEditor.useProp(iconPropKey);
  const iconName = icon == null ? void 0 : icon.name;
  const [showIconConfig, setShowIconConfig] = React.useState(!!icon);
  const resetIcon = () => {
    setIcon(void 0);
  };
  React.useEffect(() => {
    setShowIconConfig(!!iconName);
  }, [iconName]);
  React.useEffect(() => {
    if (!showIconConfig)
      resetIcon();
  }, [showIconConfig]);
  return /* @__PURE__ */ jsxRuntime.jsxs(coreEditor.SwitchToShow, {
    formItemProps: { label: i18n.t("Hi\u1EC3n th\u1ECB bi\u1EC3u t\u01B0\u1EE3ng") },
    show: showIconConfig,
    setShow: setShowIconConfig,
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(IconSettings.IconSettings, {
        propKey: iconPropKey,
        separateDevice
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.AlignmentConfig, {
        formItemProps: {
          label: i18n.t("V\u1ECB tr\xED")
        },
        buttonGroupProps: {
          listAlignment: ["left", "right"]
        },
        propKey: propKey.PROP_KEY.joinKey(
          propKey$1,
          propKey.PROP_KEY.IconConfig,
          propKey.PROP_KEY.Position
        ),
        separateDevice
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
        propKey: propKey.PROP_KEY.joinKey(
          propKey$1,
          propKey.PROP_KEY.IconConfig,
          propKey.PROP_KEY.Spacing
        ),
        formItemProps: {
          label: i18n.t("Kho\u1EA3ng c\xE1ch")
        },
        unitProps: { defaultValue: coreRenderer.UnitEnum.pixel },
        separateDevice
      })
    ]
  });
};

exports.IconButtonConfig = IconButtonConfig;
