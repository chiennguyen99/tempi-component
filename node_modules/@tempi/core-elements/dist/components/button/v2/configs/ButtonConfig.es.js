import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../../../i18n.es.js';
import { DEFAULT_BUTTON, DEFAULT_BUTTON_STYLE } from '../constants.es.js';
import styled from '@emotion/styled';
import { UnitEnum } from '@tempi/core-renderer';
import { usePropSeparateDevice, FormItem, InputNumberConfig } from '@tempi/core-editor';
import { ButtonV2 } from '../ui.es.js';
import { PROP_KEY } from '../../../../constants/propKey.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const {
  primary: primaryStyle,
  primaryRound: primaryRoundStyle,
  outline: outlineStyle,
  outlineRound: outlineRoundStyle,
  link: linkStyle
} = DEFAULT_BUTTON_STYLE;
const ButtonConfig = ({
  propKey,
  separateDevice
} = {}) => {
  const [buttonStyle, setButtonStyle] = usePropSeparateDevice(
    PROP_KEY.joinKey(propKey, PROP_KEY.ButtonStyle),
    separateDevice
  );
  const widthPropKey = PROP_KEY.joinKey(
    propKey,
    PROP_KEY.ButtonStyle,
    PROP_KEY.Width
  );
  const heightPropKey = PROP_KEY.joinKey(
    propKey,
    PROP_KEY.ButtonStyle,
    PROP_KEY.Height
  );
  const chooseButttonStyle = (style) => {
    setButtonStyle(__spreadValues(__spreadValues({}, buttonStyle), style));
  };
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(FormItem, {
        label: t("Ki\u1EC3u"),
        layout: "vertical",
        children: /* @__PURE__ */ jsxs(ButtonStyleWrapper, {
          children: [
            /* @__PURE__ */ jsx(ButtonV2, __spreadProps(__spreadValues({
              onClick: () => chooseButttonStyle(__spreadProps(__spreadValues({}, primaryStyle), {
                background: (buttonStyle == null ? void 0 : buttonStyle.background) || (buttonStyle == null ? void 0 : buttonStyle.backgroundColor) || primaryStyle.background
              }))
            }, DEFAULT_BUTTON.primary), {
              commonStyle: {
                justifyContent: "center"
              },
              text: "Primary"
            })),
            /* @__PURE__ */ jsx(ButtonV2, __spreadProps(__spreadValues({
              onClick: () => chooseButttonStyle(__spreadProps(__spreadValues({}, primaryRoundStyle), {
                background: (buttonStyle == null ? void 0 : buttonStyle.background) || (buttonStyle == null ? void 0 : buttonStyle.backgroundColor) || primaryStyle.background
              }))
            }, DEFAULT_BUTTON.primaryRound), {
              commonStyle: {
                justifyContent: "center"
              },
              text: "Primary Round"
            })),
            /* @__PURE__ */ jsx(ButtonV2, __spreadProps(__spreadValues({
              onClick: () => chooseButttonStyle(__spreadProps(__spreadValues({}, outlineStyle), {
                borderWidth: (buttonStyle == null ? void 0 : buttonStyle.borderWidth) || outlineStyle.borderWidth,
                borderColor: (buttonStyle == null ? void 0 : buttonStyle.borderColor) || outlineStyle.borderColor,
                borderStyle: (buttonStyle == null ? void 0 : buttonStyle.borderStyle) || outlineStyle.borderStyle
              }))
            }, DEFAULT_BUTTON.outline), {
              commonStyle: {
                justifyContent: "center"
              },
              text: "Outline"
            })),
            /* @__PURE__ */ jsx(ButtonV2, __spreadProps(__spreadValues({
              onClick: () => chooseButttonStyle(__spreadProps(__spreadValues({}, outlineRoundStyle), {
                borderWidth: (buttonStyle == null ? void 0 : buttonStyle.borderWidth) || outlineRoundStyle.borderWidth,
                borderColor: (buttonStyle == null ? void 0 : buttonStyle.borderColor) || outlineRoundStyle.borderColor,
                borderStyle: (buttonStyle == null ? void 0 : buttonStyle.borderStyle) || outlineRoundStyle.borderStyle
              }))
            }, DEFAULT_BUTTON.outlineRound), {
              commonStyle: {
                justifyContent: "center"
              },
              text: "Outline Round"
            })),
            /* @__PURE__ */ jsx(ButtonV2, __spreadProps(__spreadValues({
              onClick: () => chooseButttonStyle(linkStyle)
            }, DEFAULT_BUTTON.link), {
              commonStyle: {
                justifyContent: "center"
              },
              text: "Link"
            }))
          ]
        })
      }),
      /* @__PURE__ */ jsx(InputNumberConfig, {
        formItemProps: {
          label: t("Chi\u1EC1u r\u1ED9ng")
        },
        unitProps: { defaultValue: UnitEnum.pixel },
        propKey: widthPropKey,
        separateDevice
      }),
      /* @__PURE__ */ jsx(InputNumberConfig, {
        formItemProps: {
          label: t("Chi\u1EC1u cao")
        },
        unitProps: { defaultValue: UnitEnum.pixel },
        propKey: heightPropKey,
        separateDevice
      }),
      /* @__PURE__ */ jsx(InputNumberConfig, {
        formItemProps: {
          label: t("Bo g\xF3c")
        },
        unitProps: { defaultValue: UnitEnum.pixel },
        propKey: PROP_KEY.joinKey(
          propKey,
          PROP_KEY.ButtonStyle,
          PROP_KEY.BorderRadius
        ),
        separateDevice
      })
    ]
  });
};
const ButtonStyleWrapper = styled.div`
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-gap: 8px;
`;

export { ButtonConfig };
