import React from 'react';
import { FormV4Props } from '../form';
export declare const LeadFormEditor: {
    (props: FormV4Props): JSX.Element;
    craft: {
        displayName: string;
        isCanvas?: boolean;
        props: {
            responsive: import("@tempi/core-renderer").Responsive;
            commonStyle: import("@tempi/core-renderer").Style;
        } & {
            id: string;
            submits: import("../form").FormSubmit[];
            response?: import("../form").FormSubmitResponse & {
                responseType?: "default" | "custom";
            };
            hiddenFields: {
                name: string;
                value: string;
            }[];
            formStyle?: import("@tempi/core-renderer").Style;
            showLabel?: boolean;
            labelStyle?: import("@tempi/core-renderer").Style;
            errorStyle?: import("@tempi/core-renderer").Style;
            inputStyle?: import("@tempi/core-renderer").Style;
            optionStyle?: import("@tempi/core-renderer").Style;
            inputs?: import("../form").InputInterface[];
            mainConnection?: number;
            captcha?: import("../form").CaptchaInterface;
            configStorage?: import("../form").ConfigStorageInterface;
            commonStyle?: Partial<Pick<React.CSSProperties, "alignItems" | "backgroundRepeat" | "backgroundSize" | "borderBottomLeftRadius" | "borderBottomRightRadius" | "borderTopLeftRadius" | "borderTopRightRadius" | "bottom" | "columnGap" | "display" | "flexDirection" | "flexWrap" | "fontSize" | "fontStyle" | "fontVariant" | "height" | "justifyContent" | "left" | "letterSpacing" | "lineHeight" | "marginLeft" | "marginRight" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "objectFit" | "objectPosition" | "position" | "right" | "rowGap" | "textAlign" | "textTransform" | "top" | "width" | "zIndex" | "background" | "backgroundPosition" | "borderColor" | "borderRadius" | "borderStyle" | "borderWidth" | "flex" | "gap" | "textDecoration">> & {
                color?: string;
                fontFamily?: string;
                fontWeight?: string;
                margin?: import("@tempi/core-renderer").Spacing;
                padding?: import("@tempi/core-renderer").Spacing;
                border?: import("@tempi/core-renderer").Border;
                shadow?: import("@tempi/core-renderer").Shadow;
                textShadow?: import("@tempi/core-renderer").TextShadow;
                bgImageWidth?: number;
                bgImagePercent?: number;
                backgroundColor?: string;
                backgroundImage?: string;
                backgroundOverlay?: string;
                backgroundOverlayType?: import("@tempi/core-renderer").OverlayType;
                backgroundMarqueeDirection?: "horizontal" | "vertical";
                backgroundMarqueeSpeed?: number;
                hover?: import("@tempi/core-renderer").Hover;
                animation?: import("@tempi/core-renderer").AnimationProps;
                gap?: number;
                widthUnit?: import("@tempi/core-renderer").UnitEnum;
                heightUnit?: import("@tempi/core-renderer").UnitEnum;
                defaultOverlay?: string;
                backgroundVideo?: import("@tempi/core-renderer").BackgroundVideoInterface;
                cornerType?: import("@tempi/core-renderer").CornerType;
            } & {
                desktop?: import("@tempi/core-renderer").Style;
                mobile?: import("@tempi/core-renderer").Style;
            };
            event?: import("@tempi/core-renderer").EventInterface;
            responsive?: import("@tempi/core-renderer").Responsive;
            timeVisibility?: import("@tempi/core-renderer").TimeVisibility;
            syncDeviceStyle?: boolean;
            dataUniqId?: string;
        };
        related: any;
        rules: Partial<import("@tempi/dnd-core").NodeRules>;
        custom: any;
    };
};
//# sourceMappingURL=selector.d.ts.map