'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var hooks = require('./hooks.js');
var hooks$1 = require('../form/v4/hooks.js');
var ui = require('../form/v4/ui.js');

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const LeadForm = (props) => {
  const { getFormSession, loading } = hooks.useLeadForm();
  const wrapperRef = React.useRef();
  const { loading: otherLoading, handleSubmitFormData } = hooks$1.useForm({
    wrapperRef,
    response: props.response
  });
  const { id, configStorage, inputs, device, isEditingMode } = props;
  const submitFormData = async (values) => {
    try {
      const formSession = await getFormSession();
      await handleSubmitFormData(
        configStorage,
        __spreadProps(__spreadValues({}, values), {
          formSession,
          formId: id,
          formName: id,
          href: window.location.href,
          domainName: window.location.origin,
          terminal: device
        }),
        inputs
      );
    } catch (e) {
      console.error(e);
    }
  };
  return /* @__PURE__ */ jsxRuntime.jsx(ui.FormV4, __spreadProps(__spreadValues({}, props), {
    ref: wrapperRef,
    onFinish: !isEditingMode && submitFormData,
    customLoading: loading || otherLoading
  }));
};
LeadForm.displayName = "LeadForm";

exports.LeadForm = LeadForm;
