import { jsx } from 'react/jsx-runtime';
import { withSelector, AdvanceAttributes, getEditorName } from '@tempi/core-editor';
import React__default, { useEffect } from 'react';
import { FormQuickSetting } from '../form/v4/quick-setting.es.js';
import { FormSetting } from '../form/v4/setting.es.js';
import { FormStyleSetting } from '../form/v4/style-setting.es.js';
import { CDPBff, DEFAULT_LEAD_FORM } from './constants.es.js';
import { useStore } from '@tempi/core-renderer';
import { LeadForm } from './ui.es.js';
import { useStorageData } from '../../configs/storage-v2/hook/useStorageData.es.js';
import { FormAccountType, RequestMethod } from '../../configs/storage/type.es.js';
import { RowEditor } from '../section/selector.es.js';
import { RootEditor } from '../root/selector.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const LeadFormEditor = withSelector(
  (props) => {
    const { handleSaveDataConfig } = useStorageData(false);
    const { env } = useStore();
    useEffect(() => {
      var _a;
      if (!((_a = props == null ? void 0 : props.configStorage) == null ? void 0 : _a.formConfigId)) {
        const configs = [
          {
            type: FormAccountType.API,
            endpoint: `${CDPBff[env]}/v1/lead-form-event`,
            method: RequestMethod.POST,
            name: "CDP Teko API",
            isMainConfig: true
          }
        ];
        handleSaveDataConfig(configs);
      }
    }, []);
    return /* @__PURE__ */ jsx(LeadForm, __spreadValues({
      style: { pointerEvents: "none" },
      isEditingMode: true
    }, props));
  },
  {
    displayName: LeadForm.displayName,
    tag: LeadForm.displayName.toLowerCase(),
    customAttributes: () => React__default.createElement(FormSetting, {
      formType: "leadForm"
    }),
    commonAttributes: () => React__default.createElement(FormStyleSetting),
    advanceAttributes: () => React__default.createElement(AdvanceAttributes, {
      readOnlyElementId: true,
      propKey: "formStyle"
    }),
    quickSetting: FormQuickSetting,
    props: (() => {
      const curSecondTime = Math.round(new Date().getTime());
      const randomPart = Math.round(Math.random() * 1e3);
      return __spreadProps(__spreadValues({}, DEFAULT_LEAD_FORM), {
        id: `form-${curSecondTime}-${randomPart}`
      });
    })(),
    rules: {
      canMoveIn: () => false,
      canDrop: (targetNode) => {
        const ignoreTargets = [
          getEditorName({ RowEditor }),
          getEditorName({ RootEditor })
        ];
        return !ignoreTargets.includes(targetNode.data.name);
      }
    }
  },
  {
    style: {
      cursor: "pointer"
    }
  }
);

export { LeadFormEditor };
