'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var coreEditor = require('@tempi/core-editor');
var React = require('react');
var quickSetting = require('../form/v4/quick-setting.js');
var setting = require('../form/v4/setting.js');
var styleSetting = require('../form/v4/style-setting.js');
var constants = require('./constants.js');
var coreRenderer = require('@tempi/core-renderer');
var ui = require('./ui.js');
var useStorageData = require('../../configs/storage-v2/hook/useStorageData.js');
var type = require('../../configs/storage/type.js');
var selector = require('../section/selector.js');
var selector$1 = require('../root/selector.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const LeadFormEditor = coreEditor.withSelector(
  (props) => {
    const { handleSaveDataConfig } = useStorageData.useStorageData(false);
    const { env } = coreRenderer.useStore();
    React.useEffect(() => {
      var _a;
      if (!((_a = props == null ? void 0 : props.configStorage) == null ? void 0 : _a.formConfigId)) {
        const configs = [
          {
            type: type.FormAccountType.API,
            endpoint: `${constants.CDPBff[env]}/v1/lead-form-event`,
            method: type.RequestMethod.POST,
            name: "CDP Teko API",
            isMainConfig: true
          }
        ];
        handleSaveDataConfig(configs);
      }
    }, []);
    return /* @__PURE__ */ jsxRuntime.jsx(ui.LeadForm, __spreadValues({
      style: { pointerEvents: "none" },
      isEditingMode: true
    }, props));
  },
  {
    displayName: ui.LeadForm.displayName,
    tag: ui.LeadForm.displayName.toLowerCase(),
    customAttributes: () => React__default["default"].createElement(setting.FormSetting, {
      formType: "leadForm"
    }),
    commonAttributes: () => React__default["default"].createElement(styleSetting.FormStyleSetting),
    advanceAttributes: () => React__default["default"].createElement(coreEditor.AdvanceAttributes, {
      readOnlyElementId: true,
      propKey: "formStyle"
    }),
    quickSetting: quickSetting.FormQuickSetting,
    props: (() => {
      const curSecondTime = Math.round(new Date().getTime());
      const randomPart = Math.round(Math.random() * 1e3);
      return __spreadProps(__spreadValues({}, constants.DEFAULT_LEAD_FORM), {
        id: `form-${curSecondTime}-${randomPart}`
      });
    })(),
    rules: {
      canMoveIn: () => false,
      canDrop: (targetNode) => {
        const ignoreTargets = [
          coreEditor.getEditorName({ RowEditor: selector.RowEditor }),
          coreEditor.getEditorName({ RootEditor: selector$1.RootEditor })
        ];
        return !ignoreTargets.includes(targetNode.data.name);
      }
    }
  },
  {
    style: {
      cursor: "pointer"
    }
  }
);

exports.LeadFormEditor = LeadFormEditor;
