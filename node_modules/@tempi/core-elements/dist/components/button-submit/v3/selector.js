'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var coreEditor = require('@tempi/core-editor');
var constants = require('./constants.js');
var quickSetting = require('./quick-setting.js');
var hooks = require('../../../configs/TipTapEditor/hooks.js');
var ui = require('../../button/v2/ui.js');
var propKey = require('../../../constants/propKey.js');
var customKit = require('../../../configs/TipTapEditor/utils/custom-kit.js');
var EditorContent = require('../../../configs/TipTapEditor/components/EditorContent.js');

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const ButtonSubmitV3Editor = (props) => {
  const _a = props, { commonStyle } = _a, rest = __objRest(_a, ["commonStyle"]);
  const {
    connectors: { connect, drag },
    isActive
  } = coreEditor.useNode((node) => ({
    isActive: node.events.selected,
    parent: node.data.parent
  }));
  const { track } = coreEditor.useBuilder();
  const [width, setWidth] = coreEditor.useProp("buttonStyle.width");
  const [height, setHeight] = coreEditor.useProp("buttonStyle.height");
  React.useEffect(() => {
    if (!width)
      setWidth(160);
    if (!height)
      setHeight(40);
  }, []);
  React.useEffect(() => {
    if (isActive) {
      track == null ? void 0 : track({
        regionName: "ButtonSubmitEditorSetting",
        contentName: "quickSettingBtn"
      });
    }
  }, [isActive]);
  const { editor, setIsEditable } = hooks.useCustomTiptap(
    {
      editorOptions: {
        extensions: [
          customKit.CustomKit.configure({
            backgroundColor: false,
            bold: false,
            color: false,
            link: false,
            list: false,
            table: false,
            textTransform: false,
            underline: false
          })
        ]
      }
    },
    propKey.PROP_KEY.Text
  );
  return /* @__PURE__ */ jsxRuntime.jsx(coreEditor.RenderQuickSetting, {
    open: isActive,
    content: /* @__PURE__ */ jsxRuntime.jsx(quickSetting.ButtonSummitFormQuickSetting, {
      editor
    }),
    children: /* @__PURE__ */ jsxRuntime.jsx(ui.ButtonWrapper, {
      ref: (ref) => connect(drag(ref)),
      commonStyle,
      style: { pointerEvents: "initial" },
      onClick: (e) => {
        e.preventDefault();
      },
      children: /* @__PURE__ */ jsxRuntime.jsx(ui.ButtonV2, __spreadValues({
        commonStyle,
        customText: /* @__PURE__ */ jsxRuntime.jsx(EditorContent.EditorContent, {
          editor,
          setIsEditable
        }),
        isEditingMode: true
      }, rest))
    })
  });
};
ButtonSubmitV3Editor.craft = coreEditor.crafting({
  displayName: "N\xFAt b\u1EA5m",
  tag: ui.ButtonV2.displayName.toLowerCase(),
  advanceAttributes: coreEditor.AdvanceAttributes,
  props: constants.DEFAULT_BUTTON_SUBMIT_V3,
  rules: {
    canDrag: () => false
  }
});

exports.ButtonSubmitV3Editor = ButtonSubmitV3Editor;
