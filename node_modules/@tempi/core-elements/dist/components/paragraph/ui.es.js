import { jsx } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { useAnimation, useInjectDynamicLinks, getStyle } from '@tempi/core-renderer';
import clsx from 'clsx';
import { useRef } from 'react';
import { objectToAttrString, getAttrTracking } from '../../utils/track.es.js';
import { getCommonTextCss } from '../../constants/fonts.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const Paragraph = (_a) => {
  var _b = _a, {
    text,
    commonStyle,
    children,
    event
  } = _b, rest = __objRest(_b, [
    "text",
    "commonStyle",
    "children",
    "event"
  ]);
  const ref = useRef(null);
  const { style: animationStyle, animationClassName } = useAnimation(
    commonStyle == null ? void 0 : commonStyle.animation,
    ref
  );
  const tekoTracking = event == null ? void 0 : event.tekoTrackingEvent;
  const { text: formattedText } = useInjectDynamicLinks(
    text,
    objectToAttrString(getAttrTracking(tekoTracking))
  );
  const paragraphProps = __spreadProps(__spreadValues({}, rest), {
    ref,
    className: clsx(rest.className, animationClassName),
    style: animationStyle,
    commonStyle
  });
  if (children) {
    return /* @__PURE__ */ jsx(StyledParagraph, __spreadProps(__spreadValues({}, paragraphProps), {
      children
    }));
  }
  return /* @__PURE__ */ jsx(StyledParagraph, __spreadProps(__spreadValues({}, paragraphProps), {
    dangerouslySetInnerHTML: {
      __html: formattedText
    }
  }));
};
const StyledParagraph = styled.div(
  ({ commonStyle }) => `
    ${getStyle(commonStyle)};
    ${getCommonTextCss(true)}
  `,
  `a {
    color: inherit;
  }`
);
Paragraph.displayName = "Paragraph";

export { Paragraph, StyledParagraph };
