'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var styled = require('@emotion/styled');
var reactIcons = require('@fluentui/react-icons');
var coreEditor = require('@tempi/core-editor');
var coreRenderer = require('@tempi/core-renderer');
var antd = require('antd');
var get = require('lodash.get');
var constants$1 = require('../../configs/TipTapEditor/constants.js');
var constants = require('./constants.js');
var TextColorQuickSettingButton = require('../../quick-configs/typography/TextColorQuickSettingButton.js');
var fonts = require('../../constants/fonts.js');
var TextInputNumberConfig = require('../../configs/TextConfig/TextInputNumberConfig.js');
var TextListQuickSetting = require('../../quick-configs/typography/TextListQuickSetting.js');
var getEditorAttributeValue = require('../../utils/getEditorAttributeValue.js');
var TextAlignQuickSetting = require('../../quick-configs/typography/TextAlignQuickSetting.js');
var BoldQuickSetting = require('../../quick-configs/typography/BoldQuickSetting.js');
var ItalicQuickSetting = require('../../quick-configs/typography/ItalicQuickSetting.js');
var UnderlineQuickSetting = require('../../quick-configs/typography/UnderlineQuickSetting.js');
var StrikeThroughQuickSetting = require('../../quick-configs/typography/StrikeThroughQuickSetting.js');
var TextLinkQuickSetting = require('../../quick-configs/typography/TextLinkQuickSetting.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
var get__default = /*#__PURE__*/_interopDefaultLegacy(get);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const headingTypePrefix = "h";
const headingLevel = [1, 2, 3, 4, 5, 6];
const paragraphType = "paragraph";
const typeOptions = [
  ...headingLevel.map((level) => `${headingTypePrefix}${level}`),
  paragraphType
];
const EditorQuickSetting = ({ editor }) => {
  var _a, _b, _c, _d, _e;
  const { realDevice } = coreEditor.useBuilder();
  const { rootNode } = coreEditor.useEditor((state) => ({
    rootNode: state.nodes[coreRenderer.ROOT]
  }));
  const fontFamilyKey = coreEditor.PROP_KEY.joinKey(
    coreEditor.PROP_KEY.CommonStyle,
    coreEditor.PROP_KEY.FontFamily
  );
  const fontWeightKey = coreEditor.PROP_KEY.joinKey(
    coreEditor.PROP_KEY.CommonStyle,
    coreEditor.PROP_KEY.FontWeight
  );
  const getTypeValue = () => {
    const headingLevel2 = editor == null ? void 0 : editor.getAttributes(constants$1.NODE_TYPES.heading).level;
    if (headingLevel2)
      return `${headingTypePrefix}${headingLevel2}`;
    return paragraphType;
  };
  const onChangeType = (value) => {
    var _b2, _c2;
    const _a2 = editor.getAttributes(
      editor.isActive(constants$1.NODE_TYPES.heading) ? constants$1.NODE_TYPES.heading : constants$1.NODE_TYPES.paragraph
    ), restAttributes = __objRest(_a2, ["fontSize", "level"]);
    if (value === paragraphType) {
      (_b2 = editor == null ? void 0 : editor.commands) == null ? void 0 : _b2.executeCmd(
        ({ chain }) => chain().setParagraph().updateAttributes(constants$1.NODE_TYPES.paragraph, restAttributes).run()
      );
    } else {
      (_c2 = editor == null ? void 0 : editor.commands) == null ? void 0 : _c2.executeCmd(
        ({ chain }) => chain().toggleHeading({
          level: parseInt(value.replace(headingTypePrefix, ""))
        }).updateAttributes(constants$1.NODE_TYPES.heading, restAttributes).setFontSize(null, realDevice).run()
      );
    }
  };
  const onChangeFontSize = (value) => {
    var _a2, _b2;
    if (!value) {
      if (editor.isActive(constants$1.NODE_TYPES.heading))
        (_a2 = editor == null ? void 0 : editor.commands) == null ? void 0 : _a2.executeCmd(
          ({ commands }) => commands.setFontSize(null, realDevice)
        );
      return;
    }
    let fontSize = typeof value === "number" ? value : parseInt(value);
    if (fontSize < 0)
      return;
    fontSize = fontSize >= constants.MAX_FONT_SIZE ? constants.MAX_FONT_SIZE : fontSize;
    (_b2 = editor == null ? void 0 : editor.commands) == null ? void 0 : _b2.executeCmd(
      ({ commands }) => commands.setFontSize(fontSize + "px", realDevice)
    );
  };
  return /* @__PURE__ */ jsxRuntime.jsxs("div", {
    children: [
      /* @__PURE__ */ jsxRuntime.jsxs(Row, {
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(TextColorQuickSettingButton.TextColorQuickSettingButton, {
            editor,
            styleKey: "color",
            onChange: (color) => {
              var _a2;
              (_a2 = editor == null ? void 0 : editor.commands) == null ? void 0 : _a2.executeCmd(
                ({ commands }) => commands.setColor(color)
              );
            }
          }),
          /* @__PURE__ */ jsxRuntime.jsx(TextSelectConfig, {
            formItemProps: {
              style: { marginBottom: 0 }
            },
            selectProps: {
              style: { width: 110 },
              dropdownMatchSelectWidth: false,
              bordered: false,
              allowClear: false,
              value: getTypeValue(),
              onChange: onChangeType,
              children: typeOptions == null ? void 0 : typeOptions.map((val) => {
                const isHeading = val !== paragraphType;
                const label = isHeading ? i18n.t("Ti\xEAu \u0111\u1EC1 {{var0}}", {
                  var0: val.replace(headingTypePrefix, "")
                }) : i18n.t("\u0110o\u1EA1n v\u0103n");
                return /* @__PURE__ */ jsxRuntime.jsx(antd.Select.Option, {
                  value: val,
                  children: /* @__PURE__ */ jsxRuntime.jsx("span", {
                    style: __spreadValues({}, isHeading && { fontWeight: 500 }),
                    children: label
                  })
                }, val);
              })
            }
          }),
          /* @__PURE__ */ jsxRuntime.jsx(TextSelectConfig, {
            formItemProps: {
              style: { marginBottom: 0 }
            },
            selectProps: {
              showSearch: true,
              dropdownMatchSelectWidth: false,
              bordered: false,
              placeholder: i18n.t("Ph\xF4ng ch\u1EEF"),
              value: getEditorAttributeValue.getEditorAttributeValue(editor, coreEditor.PROP_KEY.FontFamily) || get__default["default"]((_b = (_a = rootNode == null ? void 0 : rootNode.data) == null ? void 0 : _a.props) == null ? void 0 : _b[realDevice], fontFamilyKey),
              onChange: (value) => {
                var _a2;
                (_a2 = editor == null ? void 0 : editor.commands) == null ? void 0 : _a2.executeCmd(
                  ({ commands }) => commands.setFontFamily(value)
                );
              },
              children: (_c = fonts.fontFamilyOptions) == null ? void 0 : _c.map((el) => /* @__PURE__ */ jsxRuntime.jsx(antd.Select.Option, {
                value: el.value,
                children: /* @__PURE__ */ jsxRuntime.jsx("span", {
                  style: { fontFamily: el.value },
                  children: el.label
                })
              }, el.value))
            }
          }),
          /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputSelectConfig, {
            options: fonts.fontSizeOptions,
            width: 85,
            formItemProps: {
              style: { marginBottom: 0 }
            },
            value: coreEditor.removeUnit(
              getEditorAttributeValue.getEditorAttributeValue(editor, coreEditor.PROP_KEY.FontSize, realDevice)
            ),
            onChange: onChangeFontSize,
            inputProps: {
              placeholder: i18n.t("C\u1EE1 ch\u1EEF"),
              type: "number",
              min: 0,
              max: constants.MAX_FONT_SIZE
            }
          }),
          /* @__PURE__ */ jsxRuntime.jsx(TextSelectConfig, {
            formItemProps: {
              style: { marginBottom: 0 }
            },
            selectProps: {
              style: { width: 96 },
              dropdownMatchSelectWidth: false,
              bordered: false,
              placeholder: i18n.t("\u0110\u1ED9 d\xE0y"),
              value: getEditorAttributeValue.getEditorAttributeValue(editor, coreEditor.PROP_KEY.FontWeight) || get__default["default"]((_e = (_d = rootNode == null ? void 0 : rootNode.data) == null ? void 0 : _d.props) == null ? void 0 : _e[realDevice], fontWeightKey),
              onChange: (value) => {
                var _a2;
                (_a2 = editor == null ? void 0 : editor.commands) == null ? void 0 : _a2.executeCmd(
                  ({ commands }) => commands.setFontWeight(value)
                );
              },
              options: fonts.fontWeightOptions
            }
          }),
          /* @__PURE__ */ jsxRuntime.jsx(TextInputNumberConfig.TextInputNumberConfig, {
            formItemProps: {
              style: { marginBottom: 0 }
            },
            initValue: coreEditor.removeUnit(
              getEditorAttributeValue.getEditorAttributeValue(editor, coreEditor.PROP_KEY.LineHeight)
            ),
            inputNumberProps: {
              style: {
                width: 80
              },
              bordered: false,
              controls: false,
              prefix: /* @__PURE__ */ jsxRuntime.jsx(reactIcons.TextLineSpacingRegular, {
                fontSize: 16
              }),
              placeholder: "Auto"
            },
            updateValue: (val) => {
              var _a2;
              (_a2 = editor == null ? void 0 : editor.commands) == null ? void 0 : _a2.executeCmd(
                ({ commands }) => commands.setLineHeight(coreRenderer.unitParse(val))
              );
            }
          })
        ]
      }),
      /* @__PURE__ */ jsxRuntime.jsxs(Row, {
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(TextAlignQuickSetting.TextAlignQuickSetting, {
            editor
          }),
          /* @__PURE__ */ jsxRuntime.jsx(TextListQuickSetting.TextListQuickSetting, {
            editor
          }),
          /* @__PURE__ */ jsxRuntime.jsx(BoldQuickSetting.BoldQuickSetting, {
            editor
          }),
          /* @__PURE__ */ jsxRuntime.jsx(ItalicQuickSetting.ItalicQuickSetting, {
            editor
          }),
          /* @__PURE__ */ jsxRuntime.jsx(UnderlineQuickSetting.UnderlineQuickSetting, {
            editor
          }),
          /* @__PURE__ */ jsxRuntime.jsx(StrikeThroughQuickSetting.StrikeThroughQuickSetting, {
            editor
          }),
          /* @__PURE__ */ jsxRuntime.jsx(TextLinkQuickSetting.TextLinkQuickSetting, {
            editor
          }),
          /* @__PURE__ */ jsxRuntime.jsx(coreEditor.OpenSettingDialog, {})
        ]
      })
    ]
  });
};
const Row = styled__default["default"].div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;
const TextSelectConfig = styled__default["default"](coreEditor.SelectConfig)`
  padding-left: 12px;
  padding-right: 12px;

  .ant-select-selector {
    padding: 0 !important;
  }

  .ant-select-selection-search {
    inset-inline-start: 0 !important;
  }
`;

exports.EditorQuickSetting = EditorQuickSetting;
