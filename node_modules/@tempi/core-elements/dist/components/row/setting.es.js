import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t, getOptionsI18n } from '../../i18n.es.js';
import { useState, useEffect } from 'react';
import { useProp, isNumeric, RangeSliderConfig, SelectConfig, VerticalAlignmentConfig } from '@tempi/core-editor';
import { UnitEnum } from '@tempi/core-renderer';
import { HeightTypeEnum, WidthTypeEnum } from '../../types/index.es.js';
import { DEFAULT_GUTTER, WIDTH_TYPE_OPTIONS, DEFAULT_WIDTH, DEFAULT_HEIGHT } from '../../constants/grid.es.js';
import { PROP_KEY } from '../../constants/propKey.es.js';

const HEIGHT_TYPE_OPTIONS = [
  {
    label: "common.default",
    value: HeightTypeEnum.default
  },
  {
    label: "common.custom",
    value: HeightTypeEnum.fixed
  },
  {
    label: "common.full_screen_height",
    value: HeightTypeEnum.fullHeight
  }
];
const RowSetting = () => {
  const [contentMaxWidth, setContentMaxWidth] = useProp(
    PROP_KEY.ContentMaxWidthKey
  );
  const [contentWidthType, setContentWidthType] = useProp(
    PROP_KEY.ContentWidthType
  );
  const minHeightPropKey = PROP_KEY.joinKey(
    PROP_KEY.CommonStyle,
    PROP_KEY.Height
  );
  const getHeightType = () => {
    if (!minHeight)
      return HeightTypeEnum.default;
    if (minHeight === "100vh")
      return HeightTypeEnum.fullHeight;
    return HeightTypeEnum.fixed;
  };
  const [minHeight, setMinHeight] = useProp(minHeightPropKey);
  const [heightType, setHeightType] = useState(getHeightType());
  const [gutter, setGutter] = useProp(PROP_KEY.Gutter);
  const [gap, setGap] = useState(
    isNumeric(gutter == null ? void 0 : gutter[0]) ? gutter[0] : DEFAULT_GUTTER[0]
  );
  useEffect(() => {
    if (contentMaxWidth)
      setContentWidthType(WidthTypeEnum.fixed);
  }, [contentMaxWidth]);
  const onChangeContentWidthType = (value) => {
    setContentWidthType(value);
    if (value === WidthTypeEnum.full)
      setContentMaxWidth(void 0);
    if (value === WidthTypeEnum.fixed)
      setContentMaxWidth(DEFAULT_WIDTH);
  };
  const onChangeHeightType = (value) => {
    setHeightType(value);
    if (value === HeightTypeEnum.default)
      setMinHeight(void 0);
    if (value === HeightTypeEnum.fixed)
      setMinHeight(DEFAULT_HEIGHT);
    if (value === HeightTypeEnum.fullHeight)
      setMinHeight("100vh");
  };
  const handleGapChange = (value) => {
    if (isNumeric(value)) {
      setGap(value);
      setGutter([value, value]);
    }
  };
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(RangeSliderConfig, {
        sliderProps: {
          min: 0,
          max: 50,
          onChange: (value) => handleGapChange(value),
          value: gap
        },
        unitProps: { defaultValue: UnitEnum.pixel },
        formItemProps: {
          label: t("Kho\u1EA3ng c\xE1ch gi\u1EEFa c\xE1c c\u1ED9t b\xEAn trong")
        }
      }),
      /* @__PURE__ */ jsx(SelectConfig, {
        options: getOptionsI18n(t, WIDTH_TYPE_OPTIONS, "label"),
        formItemProps: {
          label: t("Chi\u1EC1u r\u1ED9ng n\u1ED9i dung b\xEAn trong"),
          layout: "vertical"
        },
        selectProps: {
          placeholder: t("M\u1EB7c \u0111\u1ECBnh"),
          value: contentWidthType,
          style: { width: "100%" },
          onChange: onChangeContentWidthType
        }
      }),
      contentWidthType === WidthTypeEnum.fixed && /* @__PURE__ */ jsx(RangeSliderConfig, {
        sliderProps: {
          min: 500,
          max: 2e3
        },
        propKey: PROP_KEY.ContentMaxWidthKey,
        unitProps: { defaultValue: UnitEnum.pixel }
      }),
      /* @__PURE__ */ jsx(SelectConfig, {
        options: getOptionsI18n(t, HEIGHT_TYPE_OPTIONS, "label"),
        formItemProps: {
          label: t("Chi\u1EC1u cao h\xE0ng"),
          layout: "vertical"
        },
        selectProps: {
          value: heightType,
          onChange: onChangeHeightType,
          style: { width: "100%" }
        }
      }),
      heightType === HeightTypeEnum.fixed && /* @__PURE__ */ jsx(RangeSliderConfig, {
        sliderProps: {
          min: 0,
          max: 1e3
        },
        propKey: minHeightPropKey,
        unitProps: { defaultValue: UnitEnum.pixel }
      }),
      /* @__PURE__ */ jsx(VerticalAlignmentConfig, {
        propKey: PROP_KEY.VerticalAlignment,
        formItemProps: {
          label: t("C\u0103n ch\u1EC9nh n\u1ED9i dung b\xEAn trong theo chi\u1EC1u d\u1ECDc"),
          layout: "vertical"
        }
      })
    ]
  });
};

export { HEIGHT_TYPE_OPTIONS, RowSetting };
