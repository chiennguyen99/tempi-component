'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var React = require('react');
var coreEditor = require('@tempi/core-editor');
var coreRenderer = require('@tempi/core-renderer');
var index = require('../../types/index.js');
var grid = require('../../constants/grid.js');
var propKey = require('../../constants/propKey.js');

const HEIGHT_TYPE_OPTIONS = [
  {
    label: "common.default",
    value: index.HeightTypeEnum.default
  },
  {
    label: "common.custom",
    value: index.HeightTypeEnum.fixed
  },
  {
    label: "common.full_screen_height",
    value: index.HeightTypeEnum.fullHeight
  }
];
const RowSetting = () => {
  const [contentMaxWidth, setContentMaxWidth] = coreEditor.useProp(
    propKey.PROP_KEY.ContentMaxWidthKey
  );
  const [contentWidthType, setContentWidthType] = coreEditor.useProp(
    propKey.PROP_KEY.ContentWidthType
  );
  const minHeightPropKey = propKey.PROP_KEY.joinKey(
    propKey.PROP_KEY.CommonStyle,
    propKey.PROP_KEY.Height
  );
  const getHeightType = () => {
    if (!minHeight)
      return index.HeightTypeEnum.default;
    if (minHeight === "100vh")
      return index.HeightTypeEnum.fullHeight;
    return index.HeightTypeEnum.fixed;
  };
  const [minHeight, setMinHeight] = coreEditor.useProp(minHeightPropKey);
  const [heightType, setHeightType] = React.useState(getHeightType());
  const [gutter, setGutter] = coreEditor.useProp(propKey.PROP_KEY.Gutter);
  const [gap, setGap] = React.useState(
    coreEditor.isNumeric(gutter == null ? void 0 : gutter[0]) ? gutter[0] : grid.DEFAULT_GUTTER[0]
  );
  React.useEffect(() => {
    if (contentMaxWidth)
      setContentWidthType(index.WidthTypeEnum.fixed);
  }, [contentMaxWidth]);
  const onChangeContentWidthType = (value) => {
    setContentWidthType(value);
    if (value === index.WidthTypeEnum.full)
      setContentMaxWidth(void 0);
    if (value === index.WidthTypeEnum.fixed)
      setContentMaxWidth(grid.DEFAULT_WIDTH);
  };
  const onChangeHeightType = (value) => {
    setHeightType(value);
    if (value === index.HeightTypeEnum.default)
      setMinHeight(void 0);
    if (value === index.HeightTypeEnum.fixed)
      setMinHeight(grid.DEFAULT_HEIGHT);
    if (value === index.HeightTypeEnum.fullHeight)
      setMinHeight("100vh");
  };
  const handleGapChange = (value) => {
    if (coreEditor.isNumeric(value)) {
      setGap(value);
      setGutter([value, value]);
    }
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.RangeSliderConfig, {
        sliderProps: {
          min: 0,
          max: 50,
          onChange: (value) => handleGapChange(value),
          value: gap
        },
        unitProps: { defaultValue: coreRenderer.UnitEnum.pixel },
        formItemProps: {
          label: i18n.t("Kho\u1EA3ng c\xE1ch gi\u1EEFa c\xE1c c\u1ED9t b\xEAn trong")
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
        options: i18n.getOptionsI18n(i18n.t, grid.WIDTH_TYPE_OPTIONS, "label"),
        formItemProps: {
          label: i18n.t("Chi\u1EC1u r\u1ED9ng n\u1ED9i dung b\xEAn trong"),
          layout: "vertical"
        },
        selectProps: {
          placeholder: i18n.t("M\u1EB7c \u0111\u1ECBnh"),
          value: contentWidthType,
          style: { width: "100%" },
          onChange: onChangeContentWidthType
        }
      }),
      contentWidthType === index.WidthTypeEnum.fixed && /* @__PURE__ */ jsxRuntime.jsx(coreEditor.RangeSliderConfig, {
        sliderProps: {
          min: 500,
          max: 2e3
        },
        propKey: propKey.PROP_KEY.ContentMaxWidthKey,
        unitProps: { defaultValue: coreRenderer.UnitEnum.pixel }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
        options: i18n.getOptionsI18n(i18n.t, HEIGHT_TYPE_OPTIONS, "label"),
        formItemProps: {
          label: i18n.t("Chi\u1EC1u cao h\xE0ng"),
          layout: "vertical"
        },
        selectProps: {
          value: heightType,
          onChange: onChangeHeightType,
          style: { width: "100%" }
        }
      }),
      heightType === index.HeightTypeEnum.fixed && /* @__PURE__ */ jsxRuntime.jsx(coreEditor.RangeSliderConfig, {
        sliderProps: {
          min: 0,
          max: 1e3
        },
        propKey: minHeightPropKey,
        unitProps: { defaultValue: coreRenderer.UnitEnum.pixel }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.VerticalAlignmentConfig, {
        propKey: propKey.PROP_KEY.VerticalAlignment,
        formItemProps: {
          label: i18n.t("C\u0103n ch\u1EC9nh n\u1ED9i dung b\xEAn trong theo chi\u1EC1u d\u1ECDc"),
          layout: "vertical"
        }
      })
    ]
  });
};

exports.HEIGHT_TYPE_OPTIONS = HEIGHT_TYPE_OPTIONS;
exports.RowSetting = RowSetting;
