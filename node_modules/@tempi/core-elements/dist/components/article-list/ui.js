'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var styled = require('@emotion/styled');
var coreRenderer = require('@tempi/core-renderer');
var i18n = require('../../i18n.js');
var useArticles = require('./hooks/useArticles.js');
var type = require('./type.js');
var ArticlePagination = require('./components/ArticlePagination.js');
var ArticleEmpty = require('./components/ArticleEmpty.js');
var ArticleLayout = require('./components/ArticleLayout.js');
var ArticleCard = require('./components/ArticleCard.js');
var LoadMoreButton = require('./components/LoadMoreButton.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const ArticleList = (props) => {
  var _b;
  const _a = props, {
    categoryIds = [],
    layout,
    gridConfig,
    listConfig,
    showLoadMore,
    commonStyle,
    isEditingMode,
    displayConfig,
    loadMoreType = type.LoadMoreType.BUTTON,
    paginationColor = "#7367f0",
    isOpenNewTab = true,
    titleFontSize = 14,
    categoryColor = "#7367f0",
    categoryType = "button",
    triggerUpdate
  } = _a, rest = __objRest(_a, [
    "categoryIds",
    "layout",
    "gridConfig",
    "listConfig",
    "showLoadMore",
    "commonStyle",
    "isEditingMode",
    "displayConfig",
    "loadMoreType",
    "paginationColor",
    "isOpenNewTab",
    "titleFontSize",
    "categoryColor",
    "categoryType",
    "triggerUpdate"
  ]);
  const { globalData = {} } = coreRenderer.useStore();
  const { websiteId } = globalData || {};
  const {
    articles = [],
    loading,
    hasMore,
    loadMore,
    pagination,
    setCurrentPage
  } = useArticles.useArticles({
    websiteId,
    categoryIds,
    layout,
    listConfig,
    gridConfig,
    loadMoreType,
    triggerUpdate,
    websiteTranslationId: (_b = globalData == null ? void 0 : globalData.currentLanguage) == null ? void 0 : _b.id
  });
  const isEmpty = articles.length === 0;
  const isShowLoadMoreButton = loadMoreType === type.LoadMoreType.BUTTON;
  const handlePageClick = (event) => {
    setCurrentPage(event.selected + 1);
  };
  const getPagination = () => {
    switch (loadMoreType) {
      case type.LoadMoreType.BUTTON:
        return /* @__PURE__ */ jsxRuntime.jsx(LoadMoreButton.LoadMoreButton, __spreadValues({}, { loading, hasMore, isEmpty, loadMore }));
      case type.LoadMoreType.PAGINATION:
        return /* @__PURE__ */ jsxRuntime.jsx(ArticlePagination.ArticlePagination, {
          onPageChange: handlePageClick,
          pageCount: Math.ceil((pagination == null ? void 0 : pagination.total) / (pagination == null ? void 0 : pagination.pageSize)),
          textColor: commonStyle.color,
          paginationColor
        });
      default:
        return null;
    }
  };
  if (!loading && isEmpty) {
    return /* @__PURE__ */ jsxRuntime.jsx(ArticleEmpty.ArticleEmpty, {});
  }
  return /* @__PURE__ */ jsxRuntime.jsxs(Wrapper, __spreadProps(__spreadValues({
    commonStyle,
    isEditingMode
  }, rest), {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(ArticleLayout.ArticleLayout, __spreadProps(__spreadValues({}, props), {
        children: articles.map((article) => /* @__PURE__ */ jsxRuntime.jsx(ArticleCard.ArticleCard, {
          article,
          layout,
          displayConfig,
          isOpenNewTab,
          titleFontSize,
          categoryColor,
          categoryType
        }, article.id || article.canonical))
      })),
      loading && isShowLoadMoreButton && /* @__PURE__ */ jsxRuntime.jsxs(LoadingWrapper, {
        children: [
          i18n.t("\u0110ang t\u1EA3i b\xE0i vi\u1EBFt"),
          " ..."
        ]
      }),
      getPagination()
    ]
  }));
};
ArticleList.displayName = "ArticleList";
const Wrapper = styled__default["default"].div(
  ({ commonStyle, isEditingMode }) => `
  ${isEditingMode ? "pointer-events: none;" : ""}
  ${coreRenderer.getStyle(commonStyle)}
  a{
    color: ${commonStyle.color};
  }
`
);
const LoadingWrapper = styled__default["default"].div`
  height: 400px;
  display: flex;
  text-align: center;
  justify-content: center;
  align-items: center;
  font-size: 14px;
`;

exports.ArticleList = ArticleList;
