'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreRenderer = require('@tempi/core-renderer');
var React = require('react');
var type = require('../type.js');

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const useArticles = (props) => {
  const {
    websiteId,
    categoryIds,
    layout,
    gridConfig,
    listConfig,
    loadMoreType,
    triggerUpdate,
    websiteTranslationId
  } = props;
  const [articles, setArticles] = React.useState([]);
  const [currentPage, setCurrentPage] = React.useState(1);
  const { env } = coreRenderer.useStore();
  const [loading, setLoading] = React.useState(true);
  const [pagination, setPagination] = React.useState();
  const pageSize = layout === "grid" ? gridConfig.row * gridConfig.column : listConfig.row;
  const hasMore = (pagination == null ? void 0 : pagination.total) > currentPage * pageSize;
  const reset = () => {
    setArticles([]);
    setCurrentPage(1);
    setPagination(void 0);
  };
  const fetchArticles = () => {
    const API = new coreRenderer.Api(`${coreRenderer.publicBffUrl[env]}/v1/pages`);
    setLoading(true);
    API.get("/", {
      params: __spreadProps(__spreadValues({
        websiteId
      }, categoryIds.length && { categoryIds }), {
        page: currentPage,
        pageSize,
        isArticle: true,
        websiteTranslationId
      })
    }).then((res) => {
      var _a, _b, _c, _d;
      const pages = (_b = (_a = res == null ? void 0 : res.data) == null ? void 0 : _a.data) == null ? void 0 : _b.pages;
      const currentPagination = (_d = (_c = res == null ? void 0 : res.data) == null ? void 0 : _c.data) == null ? void 0 : _d.pagination;
      if (currentPage === 1 || loadMoreType !== type.LoadMoreType.BUTTON) {
        setArticles(pages);
      } else {
        setArticles((prev) => [...prev, ...pages]);
      }
      setPagination(currentPagination);
    }).catch((err) => {
      console.error(err);
    }).finally(() => {
      setLoading(false);
    });
  };
  const loadMore = () => {
    setCurrentPage((prev) => prev + 1);
  };
  React.useEffect(() => {
    if (websiteId) {
      reset();
      fetchArticles();
    }
  }, [
    websiteId,
    categoryIds,
    listConfig.row,
    gridConfig.column,
    gridConfig.row,
    triggerUpdate
  ]);
  React.useEffect(() => {
    fetchArticles();
  }, [currentPage]);
  return { articles, loading, loadMore, hasMore, pagination, setCurrentPage };
};

exports.useArticles = useArticles;
