import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { getStyle } from '@tempi/core-renderer';
import { useRef, useEffect } from 'react';
import { NumberPosition } from '../type.es.js';
import { calculatePercent } from '../utils.es.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const BarProgress = ({
  value,
  maxValue,
  numberElement,
  textBeforeElement,
  textAfterElement,
  style
}) => {
  const _a = style || {}, {
    numberPosition,
    duration = 0,
    delay = 0,
    foregroundColor
  } = _a, restStyle = __objRest(_a, [
    "numberPosition",
    "duration",
    "delay",
    "foregroundColor"
  ]);
  const barFillRef = useRef();
  useEffect(() => {
    let timer;
    if (value) {
      timer = setTimeout(async () => {
        if (barFillRef.current) {
          barFillRef.current.style.removeProperty("transition");
          barFillRef.current.style.width = `${calculatePercent(
            value,
            maxValue
          )}%`;
        }
      }, delay * 1e3);
    }
    return () => {
      clearTimeout(timer);
      if (barFillRef.current) {
        barFillRef.current.style.transition = "none";
        barFillRef.current.style.width = "0%";
      }
    };
  }, [value, maxValue]);
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      textBeforeElement,
      numberPosition === NumberPosition.above && numberElement,
      /* @__PURE__ */ jsx(BarContainer, {
        commonStyle: __spreadValues({}, restStyle),
        children: /* @__PURE__ */ jsx(BarFill, {
          ref: barFillRef,
          commonStyle: { background: foregroundColor },
          duration,
          children: numberPosition === NumberPosition.inside && numberElement
        })
      }),
      numberPosition === NumberPosition.below && numberElement,
      textAfterElement
    ]
  });
};
const BarContainer = styled.div(
  ({ commonStyle }) => `
  ${getStyle(commonStyle)}

  position: relative;
  width: 100%;
`
);
const BarFill = styled.div(
  ({ commonStyle, duration }) => {
    return `
      ${getStyle(commonStyle)}

      position: absolute;
      height: 100%;
      width: 0%;

      display: flex;
      align-items: center;

      overflow: hidden;
      transition: width ${duration}s linear;
    `;
  }
);

export { BarProgress };
