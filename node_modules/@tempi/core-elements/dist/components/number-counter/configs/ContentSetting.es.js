import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t, getOptionsI18n } from '../../../i18n.es.js';
import { useProp, SelectConfig, InputNumberConfig, InputConfig } from '@tempi/core-editor';
import { useEffect } from 'react';
import { NumberCounterLayout, NumberPosition, NumberType } from '../type.es.js';
import { useChangeLayout } from '../hooks/useChangeLayout.es.js';
import { PROP_KEY } from '../../../constants/propKey.es.js';

const ContentSetting = () => {
  const layoutOptions = [
    {
      label: "number_counter_config.content.layout.number",
      value: NumberCounterLayout.number
    },
    {
      label: "number_counter_config.content.layout.circle",
      value: NumberCounterLayout.circle
    },
    {
      label: "number_counter_config.content.layout.bar",
      value: NumberCounterLayout.bar
    }
  ];
  const numberPositionOptions = [
    {
      label: "number_counter_config.content.layout.inside",
      value: NumberPosition.inside
    },
    {
      label: "number_counter_config.content.layout.above",
      value: NumberPosition.above
    },
    {
      label: "number_counter_config.content.layout.below",
      value: NumberPosition.below
    },
    {
      label: "number_counter_config.content.layout.hidden",
      value: NumberPosition.hidden
    }
  ];
  const numberTypeOptions = [
    { label: t("Chu\u1EA9n"), value: NumberType.standard },
    { label: t("Ph\u1EA7n tr\u0103m"), value: NumberType.percent }
  ];
  const numberTypePropKey = PROP_KEY.NumberType;
  const totalPropKey = PROP_KEY.Total;
  const prefixNumberPropKey = PROP_KEY.PrefixNumber;
  const suffixNumberPropKey = PROP_KEY.SuffixNumber;
  const layoutPropKey = PROP_KEY.Layout;
  const [numberType] = useProp(numberTypePropKey);
  const [, setTotal] = useProp(totalPropKey);
  const [, setPrefixNumber] = useProp(prefixNumberPropKey);
  const [, setSuffixNumber] = useProp(suffixNumberPropKey);
  const [layout] = useProp(layoutPropKey);
  useEffect(() => {
    if (numberType === NumberType.percent) {
      setTotal(void 0);
      setPrefixNumber(void 0);
      setSuffixNumber(void 0);
    }
  }, [numberType]);
  useChangeLayout();
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(SelectConfig, {
        options: getOptionsI18n(t, layoutOptions, "label"),
        propKey: PROP_KEY.Layout,
        formItemProps: {
          label: t("B\u1ED1 c\u1EE5c")
        }
      }),
      layout === NumberCounterLayout.bar && /* @__PURE__ */ jsx(SelectConfig, {
        options: getOptionsI18n(t, numberPositionOptions, "label"),
        propKey: PROP_KEY.joinKey(PROP_KEY.BarStyle, PROP_KEY.NumberPosition),
        formItemProps: {
          label: t("V\u1ECB tr\xED s\u1ED1")
        }
      }),
      /* @__PURE__ */ jsx(SelectConfig, {
        options: numberTypeOptions,
        propKey: numberTypePropKey,
        formItemProps: {
          label: t("Lo\u1EA1i s\u1ED1")
        }
      }),
      /* @__PURE__ */ jsx(InputNumberConfig, {
        propKey: PROP_KEY.Number,
        formItemProps: {
          label: t("S\u1ED1")
        }
      }),
      numberType === NumberType.standard && layout !== NumberCounterLayout.number && /* @__PURE__ */ jsx(InputNumberConfig, {
        propKey: totalPropKey,
        formItemProps: {
          label: "Total"
        }
      }),
      /* @__PURE__ */ jsx(InputConfig, {
        propKey: PROP_KEY.TextBefore,
        formItemProps: {
          label: t("D\xF2ng ch\u1EEF tr\u01B0\u1EDBc s\u1ED1")
        }
      }),
      /* @__PURE__ */ jsx(InputConfig, {
        propKey: PROP_KEY.TextAfter,
        formItemProps: {
          label: t("D\xF2ng ch\u1EEF sau s\u1ED1")
        }
      }),
      layout !== NumberCounterLayout.number && numberType !== NumberType.percent && /* @__PURE__ */ jsxs(Fragment, {
        children: [
          /* @__PURE__ */ jsx(InputConfig, {
            propKey: PROP_KEY.PrefixNumber,
            formItemProps: {
              label: t("Ti\u1EC1n t\u1ED1 c\u1EE7a s\u1ED1")
            }
          }),
          /* @__PURE__ */ jsx(InputConfig, {
            propKey: PROP_KEY.SuffixNumber,
            formItemProps: {
              label: t("H\u1EADu t\u1ED1 c\u1EE7a s\u1ED1")
            }
          })
        ]
      }),
      /* @__PURE__ */ jsx(InputNumberConfig, {
        propKey: PROP_KEY.Duration,
        formItemProps: {
          label: t("Kho\u1EA3ng th\u1EDDi gian (s)")
        }
      }),
      /* @__PURE__ */ jsx(InputNumberConfig, {
        propKey: PROP_KEY.Delay,
        formItemProps: {
          label: t("\u0110\u1ED9 tr\u1EC5 (s)")
        }
      })
    ]
  });
};

export { ContentSetting };
