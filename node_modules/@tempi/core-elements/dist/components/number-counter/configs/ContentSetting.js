'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../../i18n.js');
var coreEditor = require('@tempi/core-editor');
var React = require('react');
var type = require('../type.js');
var useChangeLayout = require('../hooks/useChangeLayout.js');
var propKey = require('../../../constants/propKey.js');

const ContentSetting = () => {
  const layoutOptions = [
    {
      label: "number_counter_config.content.layout.number",
      value: type.NumberCounterLayout.number
    },
    {
      label: "number_counter_config.content.layout.circle",
      value: type.NumberCounterLayout.circle
    },
    {
      label: "number_counter_config.content.layout.bar",
      value: type.NumberCounterLayout.bar
    }
  ];
  const numberPositionOptions = [
    {
      label: "number_counter_config.content.layout.inside",
      value: type.NumberPosition.inside
    },
    {
      label: "number_counter_config.content.layout.above",
      value: type.NumberPosition.above
    },
    {
      label: "number_counter_config.content.layout.below",
      value: type.NumberPosition.below
    },
    {
      label: "number_counter_config.content.layout.hidden",
      value: type.NumberPosition.hidden
    }
  ];
  const numberTypeOptions = [
    { label: i18n.t("Chu\u1EA9n"), value: type.NumberType.standard },
    { label: i18n.t("Ph\u1EA7n tr\u0103m"), value: type.NumberType.percent }
  ];
  const numberTypePropKey = propKey.PROP_KEY.NumberType;
  const totalPropKey = propKey.PROP_KEY.Total;
  const prefixNumberPropKey = propKey.PROP_KEY.PrefixNumber;
  const suffixNumberPropKey = propKey.PROP_KEY.SuffixNumber;
  const layoutPropKey = propKey.PROP_KEY.Layout;
  const [numberType] = coreEditor.useProp(numberTypePropKey);
  const [, setTotal] = coreEditor.useProp(totalPropKey);
  const [, setPrefixNumber] = coreEditor.useProp(prefixNumberPropKey);
  const [, setSuffixNumber] = coreEditor.useProp(suffixNumberPropKey);
  const [layout] = coreEditor.useProp(layoutPropKey);
  React.useEffect(() => {
    if (numberType === type.NumberType.percent) {
      setTotal(void 0);
      setPrefixNumber(void 0);
      setSuffixNumber(void 0);
    }
  }, [numberType]);
  useChangeLayout.useChangeLayout();
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
        options: i18n.getOptionsI18n(i18n.t, layoutOptions, "label"),
        propKey: propKey.PROP_KEY.Layout,
        formItemProps: {
          label: i18n.t("B\u1ED1 c\u1EE5c")
        }
      }),
      layout === type.NumberCounterLayout.bar && /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
        options: i18n.getOptionsI18n(i18n.t, numberPositionOptions, "label"),
        propKey: propKey.PROP_KEY.joinKey(propKey.PROP_KEY.BarStyle, propKey.PROP_KEY.NumberPosition),
        formItemProps: {
          label: i18n.t("V\u1ECB tr\xED s\u1ED1")
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
        options: numberTypeOptions,
        propKey: numberTypePropKey,
        formItemProps: {
          label: i18n.t("Lo\u1EA1i s\u1ED1")
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
        propKey: propKey.PROP_KEY.Number,
        formItemProps: {
          label: i18n.t("S\u1ED1")
        }
      }),
      numberType === type.NumberType.standard && layout !== type.NumberCounterLayout.number && /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
        propKey: totalPropKey,
        formItemProps: {
          label: "Total"
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputConfig, {
        propKey: propKey.PROP_KEY.TextBefore,
        formItemProps: {
          label: i18n.t("D\xF2ng ch\u1EEF tr\u01B0\u1EDBc s\u1ED1")
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputConfig, {
        propKey: propKey.PROP_KEY.TextAfter,
        formItemProps: {
          label: i18n.t("D\xF2ng ch\u1EEF sau s\u1ED1")
        }
      }),
      layout !== type.NumberCounterLayout.number && numberType !== type.NumberType.percent && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputConfig, {
            propKey: propKey.PROP_KEY.PrefixNumber,
            formItemProps: {
              label: i18n.t("Ti\u1EC1n t\u1ED1 c\u1EE7a s\u1ED1")
            }
          }),
          /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputConfig, {
            propKey: propKey.PROP_KEY.SuffixNumber,
            formItemProps: {
              label: i18n.t("H\u1EADu t\u1ED1 c\u1EE7a s\u1ED1")
            }
          })
        ]
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
        propKey: propKey.PROP_KEY.Duration,
        formItemProps: {
          label: i18n.t("Kho\u1EA3ng th\u1EDDi gian (s)")
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
        propKey: propKey.PROP_KEY.Delay,
        formItemProps: {
          label: i18n.t("\u0110\u1ED9 tr\u1EC5 (s)")
        }
      })
    ]
  });
};

exports.ContentSetting = ContentSetting;
