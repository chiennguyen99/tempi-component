'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../../i18n.js');
var coreEditor = require('@tempi/core-editor');
var coreRenderer = require('@tempi/core-renderer');
var antd = require('antd');
var type = require('../type.js');
var propKey = require('../../../constants/propKey.js');
var TextConfig = require('../../../configs/TextConfig/TextConfig.js');

const StyleSetting = () => {
  const textStylePropKey = propKey.PROP_KEY.TextStyle;
  const numberStylePropKey = propKey.PROP_KEY.NumberStyle;
  const circleStylePropKey = propKey.PROP_KEY.CircleStyle;
  const [layout] = coreEditor.useProp(propKey.PROP_KEY.Layout);
  const [textBefore] = coreEditor.useProp(propKey.PROP_KEY.TextBefore);
  const [textAfter] = coreEditor.useProp(propKey.PROP_KEY.TextAfter);
  const getProgressColorStyleConfig = (layout2) => /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ColorPickerConfig, {
        formItemProps: { label: `${layout2} foreground color` },
        propKey: propKey.PROP_KEY.ForegroundColor,
        gradientPicker: true
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ColorPickerConfig, {
        formItemProps: { label: `${layout2} background color` },
        propKey: propKey.PROP_KEY.BackgroundColor,
        gradientPicker: true
      })
    ]
  });
  const getTextConfig = () => {
    if (!textBefore && !textAfter)
      return;
    return {
      textAlign: true,
      fontSize: true
    };
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(antd.Collapse, {
    expandIconPosition: "end",
    bordered: true,
    children: [
      /* @__PURE__ */ jsxRuntime.jsxs(antd.Collapse.Panel, {
        header: i18n.t("Ch\u1EEF"),
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ColorPickerConfig, {
            propKey: propKey.PROP_KEY.joinKey(textStylePropKey, propKey.PROP_KEY.Color)
          }),
          /* @__PURE__ */ jsxRuntime.jsx(TextConfig.TextConfig, {
            propKey: textStylePropKey,
            config: getTextConfig()
          })
        ]
      }, "text"),
      /* @__PURE__ */ jsxRuntime.jsxs(antd.Collapse.Panel, {
        header: i18n.t("S\u1ED1"),
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ColorPickerConfig, {
            propKey: propKey.PROP_KEY.joinKey(numberStylePropKey, propKey.PROP_KEY.Color)
          }),
          /* @__PURE__ */ jsxRuntime.jsx(TextConfig.TextConfig, {
            propKey: numberStylePropKey,
            config: getTextConfig()
          })
        ]
      }, "number"),
      layout === type.NumberCounterLayout.bar && /* @__PURE__ */ jsxRuntime.jsxs(antd.Collapse.Panel, {
        header: i18n.t("Ki\u1EC3u bar"),
        children: [
          getProgressColorStyleConfig("Bar"),
          /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
            propKey: propKey.PROP_KEY.joinKey(propKey.PROP_KEY.BarStyle, propKey.PROP_KEY.Height),
            formItemProps: {
              label: i18n.t("Chi\u1EC1u cao")
            },
            unitProps: { defaultValue: coreRenderer.UnitEnum.pixel }
          })
        ]
      }, "bar"),
      layout === type.NumberCounterLayout.circle && /* @__PURE__ */ jsxRuntime.jsxs(antd.Collapse.Panel, {
        header: i18n.t("Ki\u1EC3u circle"),
        children: [
          getProgressColorStyleConfig("Circle"),
          /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
            propKey: propKey.PROP_KEY.joinKey(circleStylePropKey, propKey.PROP_KEY.Size),
            formItemProps: {
              label: "Circle size"
            },
            unitProps: { defaultValue: coreRenderer.UnitEnum.pixel }
          }),
          /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
            propKey: propKey.PROP_KEY.joinKey(circleStylePropKey, propKey.PROP_KEY.StrokeSize),
            formItemProps: {
              label: "Stroke size"
            },
            unitProps: { defaultValue: coreRenderer.UnitEnum.pixel }
          })
        ]
      }, "circle")
    ]
  });
};

exports.StyleSetting = StyleSetting;
