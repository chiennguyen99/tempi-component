import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import { t } from '../../../i18n.es.js';
import { useProp, ColorPickerConfig, InputNumberConfig } from '@tempi/core-editor';
import { UnitEnum } from '@tempi/core-renderer';
import { Collapse } from 'antd';
import { NumberCounterLayout } from '../type.es.js';
import { PROP_KEY } from '../../../constants/propKey.es.js';
import { TextConfig } from '../../../configs/TextConfig/TextConfig.es.js';

const StyleSetting = () => {
  const textStylePropKey = PROP_KEY.TextStyle;
  const numberStylePropKey = PROP_KEY.NumberStyle;
  const circleStylePropKey = PROP_KEY.CircleStyle;
  const [layout] = useProp(PROP_KEY.Layout);
  const [textBefore] = useProp(PROP_KEY.TextBefore);
  const [textAfter] = useProp(PROP_KEY.TextAfter);
  const getProgressColorStyleConfig = (layout2) => /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(ColorPickerConfig, {
        formItemProps: { label: `${layout2} foreground color` },
        propKey: PROP_KEY.ForegroundColor,
        gradientPicker: true
      }),
      /* @__PURE__ */ jsx(ColorPickerConfig, {
        formItemProps: { label: `${layout2} background color` },
        propKey: PROP_KEY.BackgroundColor,
        gradientPicker: true
      })
    ]
  });
  const getTextConfig = () => {
    if (!textBefore && !textAfter)
      return;
    return {
      textAlign: true,
      fontSize: true
    };
  };
  return /* @__PURE__ */ jsxs(Collapse, {
    expandIconPosition: "end",
    bordered: true,
    children: [
      /* @__PURE__ */ jsxs(Collapse.Panel, {
        header: t("Ch\u1EEF"),
        children: [
          /* @__PURE__ */ jsx(ColorPickerConfig, {
            propKey: PROP_KEY.joinKey(textStylePropKey, PROP_KEY.Color)
          }),
          /* @__PURE__ */ jsx(TextConfig, {
            propKey: textStylePropKey,
            config: getTextConfig()
          })
        ]
      }, "text"),
      /* @__PURE__ */ jsxs(Collapse.Panel, {
        header: t("S\u1ED1"),
        children: [
          /* @__PURE__ */ jsx(ColorPickerConfig, {
            propKey: PROP_KEY.joinKey(numberStylePropKey, PROP_KEY.Color)
          }),
          /* @__PURE__ */ jsx(TextConfig, {
            propKey: numberStylePropKey,
            config: getTextConfig()
          })
        ]
      }, "number"),
      layout === NumberCounterLayout.bar && /* @__PURE__ */ jsxs(Collapse.Panel, {
        header: t("Ki\u1EC3u bar"),
        children: [
          getProgressColorStyleConfig("Bar"),
          /* @__PURE__ */ jsx(InputNumberConfig, {
            propKey: PROP_KEY.joinKey(PROP_KEY.BarStyle, PROP_KEY.Height),
            formItemProps: {
              label: t("Chi\u1EC1u cao")
            },
            unitProps: { defaultValue: UnitEnum.pixel }
          })
        ]
      }, "bar"),
      layout === NumberCounterLayout.circle && /* @__PURE__ */ jsxs(Collapse.Panel, {
        header: t("Ki\u1EC3u circle"),
        children: [
          getProgressColorStyleConfig("Circle"),
          /* @__PURE__ */ jsx(InputNumberConfig, {
            propKey: PROP_KEY.joinKey(circleStylePropKey, PROP_KEY.Size),
            formItemProps: {
              label: "Circle size"
            },
            unitProps: { defaultValue: UnitEnum.pixel }
          }),
          /* @__PURE__ */ jsx(InputNumberConfig, {
            propKey: PROP_KEY.joinKey(circleStylePropKey, PROP_KEY.StrokeSize),
            formItemProps: {
              label: "Stroke size"
            },
            unitProps: { defaultValue: UnitEnum.pixel }
          })
        ]
      }, "circle")
    ]
  });
};

export { StyleSetting };
