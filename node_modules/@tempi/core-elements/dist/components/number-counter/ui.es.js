import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { useInjectLinksToHTML, getStyle } from '@tempi/core-renderer';
import { useRef, useState, useEffect } from 'react';
import { CircularProgressbarWithChildren } from 'react-circular-progressbar';
import { useFrame } from 'react-frame-component';
import { NumberType, NumberCounterLayout } from './type.es.js';
import { getMaxValue } from './utils.es.js';
import { useFirstVisible } from './hooks/useFirstVisible.es.js';
import { BarProgress } from './components/BarProgress.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const START_NUMBER = 0;
const NumberCounter = (props) => {
  const {
    number,
    total,
    numberType,
    layout,
    barStyle,
    circleStyle,
    duration = 0,
    delay = 0,
    prefixNumber = "",
    suffixNumber = "",
    textBefore,
    textAfter,
    foregroundColor,
    backgroundColor,
    background
  } = props;
  const numberCounterRef = useRef();
  const isVisible = useFirstVisible(numberCounterRef);
  const positiveNumber = Math.abs(number || 0);
  const positiveTotal = Math.abs(total || 1);
  const maxValue = getMaxValue(positiveNumber, positiveTotal, numberType);
  const [progress, setProgress] = useState(START_NUMBER);
  const { document: frameDocument } = useFrame();
  useInjectLinksToHTML(
    [
      {
        rel: "stylesheet",
        href: "https://cdn.jsdelivr.net/npm/react-circular-progressbar@2.0.4/dist/styles.css"
      }
    ],
    frameDocument
  );
  useEffect(() => {
    if (number && isVisible) {
      let intervalId;
      const timer = setTimeout(async () => {
        const intervalTime = Math.floor(duration / positiveNumber * 100) / 100;
        intervalId = setInterval(() => {
          setProgress((preValue) => {
            const newValue = preValue + 1;
            if (newValue < positiveNumber)
              return newValue;
            clearInterval(intervalId);
            clearTimeout(timer);
            return positiveNumber;
          });
        }, intervalTime * 1e3);
      }, delay * 1e3);
      return () => {
        clearInterval(intervalId);
        clearTimeout(timer);
        setProgress(START_NUMBER);
      };
    }
  }, [isVisible, layout, numberType, number, total, duration, delay]);
  const renderNumber = () => {
    const getNumber = () => {
      if (number === void 0)
        return;
      return number >= 0 ? progress : progress * -1;
    };
    const showedNumber = new Intl.NumberFormat("en-CA").format(getNumber());
    if (numberType === NumberType.standard) {
      return `${prefixNumber}${showedNumber}${suffixNumber}`;
    }
    return `${showedNumber}%`;
  };
  const numberElement = /* @__PURE__ */ jsx("div", {
    className: "number",
    children: renderNumber()
  });
  const textBeforeElement = textBefore && /* @__PURE__ */ jsx("div", {
    className: "text",
    children: textBefore
  });
  const textAfterElement = textAfter && /* @__PURE__ */ jsx("div", {
    className: "text",
    children: textAfter
  });
  const renderBarLayout = () => {
    const value = numberType === NumberType.percent && number < 0 ? 0 : positiveNumber;
    return /* @__PURE__ */ jsx(BarProgress, {
      value,
      maxValue,
      numberElement,
      textBeforeElement,
      textAfterElement,
      style: __spreadProps(__spreadValues({}, barStyle), {
        backgroundColor,
        foregroundColor,
        duration,
        delay,
        background
      })
    });
  };
  const renderCircleLayout = () => {
    const value = numberType === NumberType.percent && number < 0 ? 0 : progress;
    return /* @__PURE__ */ jsx(CircleContainer, {
      circleStyle,
      children: /* @__PURE__ */ jsx(CircularProgressbarWithChildren, {
        value,
        maxValue,
        strokeWidth: circleStyle == null ? void 0 : circleStyle.strokeSize,
        styles: {
          path: {
            stroke: foregroundColor,
            transitionDuration: `${duration / positiveNumber}s`
          },
          trail: {
            stroke: backgroundColor || background
          }
        },
        children: /* @__PURE__ */ jsxs(CircleContent, {
          children: [
            textBeforeElement,
            numberElement,
            textAfterElement
          ]
        })
      })
    });
  };
  const renderContent = () => {
    if (layout === NumberCounterLayout.bar) {
      return renderBarLayout();
    }
    if (layout === NumberCounterLayout.circle) {
      return renderCircleLayout();
    }
    return /* @__PURE__ */ jsxs(Fragment, {
      children: [
        textBeforeElement,
        numberElement,
        textAfterElement
      ]
    });
  };
  return /* @__PURE__ */ jsx(Wrapper, __spreadProps(__spreadValues({
    ref: numberCounterRef
  }, props), {
    children: renderContent()
  }));
};
NumberCounter.displayName = "NumberCounter";
const CircleContainer = styled.div(
  ({ circleStyle }) => `
    width: ${circleStyle == null ? void 0 : circleStyle.size}px;
    height: ${circleStyle == null ? void 0 : circleStyle.size}px;
    max-width: 100%;
    max-height: 100%;

    margin: auto;
  `
);
const CircleContent = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
`;
const Wrapper = styled.div((props) => {
  const { commonStyle, numberStyle, textStyle } = props;
  return `
    ${getStyle(commonStyle)};
    overflow: hidden;

    .text {
      ${getStyle(textStyle)};
    }

    .number {
      width: 100%;
      height: 100%;
      ${getStyle(numberStyle)};
    }
  `;
});

export { NumberCounter };
