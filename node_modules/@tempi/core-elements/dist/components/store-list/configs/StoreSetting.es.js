import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../../i18n.es.js';
import { PlusOutlined } from '@ant-design/icons';
import { DndContext } from '@dnd-kit/core';
import { restrictToVerticalAxis, restrictToWindowEdges, restrictToFirstScrollableAncestor } from '@dnd-kit/modifiers';
import { SortableContext, verticalListSortingStrategy, arrayMove } from '@dnd-kit/sortable';
import { useProp } from '@tempi/core-editor';
import { Button } from 'antd';
import { useState } from 'react';
import { v4 } from 'uuid';
import { DEFAULT_NEW_STORE } from '../constants.es.js';
import { StoreDataConfig } from './StoreDataConfig.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const StoreSetting = () => {
  const [stores, setStores] = useProp("stores", {
    formatter: (val) => (val || []).map((el) => __spreadProps(__spreadValues({}, el), {
      dndId: el.dndId ? el.dndId : v4()
    })),
    parser: (val) => (val || []).map((el) => {
      delete el.dndId;
      return __spreadProps(__spreadValues({}, el), {
        id: el.id || v4()
      });
    })
  });
  const [activeField, setActiveField] = useState();
  const handleDragEnd = ({ active, over }) => {
    if ((active == null ? void 0 : active.id) !== (over == null ? void 0 : over.id)) {
      const _stores = [...stores];
      const oldIndex = _stores.findIndex((el) => (el == null ? void 0 : el.dndId) === (active == null ? void 0 : active.id));
      const newIndex = _stores.findIndex((el) => (el == null ? void 0 : el.dndId) === (over == null ? void 0 : over.id));
      setStores(arrayMove(_stores, oldIndex, newIndex));
    }
  };
  const addField = () => {
    setStores([...stores, DEFAULT_NEW_STORE]);
    setActiveField(stores.length);
  };
  const removeField = (index) => {
    const cloneStores = [...stores];
    cloneStores.splice(index, 1);
    setStores(cloneStores);
  };
  const duplicateField = (index) => {
    const newStore = __spreadProps(__spreadValues({}, stores[index]), {
      name: stores[index].name + " [duplicated]"
    });
    const cloneStores = [...stores];
    cloneStores.splice(index + 1, 0, newStore);
    setStores(cloneStores);
  };
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(DndContext, {
        modifiers: [
          restrictToVerticalAxis,
          restrictToWindowEdges,
          restrictToFirstScrollableAncestor
        ],
        onDragEnd: handleDragEnd,
        children: /* @__PURE__ */ jsx(SortableContext, {
          items: stores.map((el) => el.dndId),
          strategy: verticalListSortingStrategy,
          children: stores.map((el, index) => /* @__PURE__ */ jsx(StoreDataConfig, {
            store: el,
            index,
            activeField,
            setActiveField,
            onDuplicate: () => duplicateField(index),
            onRemove: () => removeField(index)
          }, index))
        })
      }),
      /* @__PURE__ */ jsx(Button, {
        style: {
          marginTop: 8,
          marginBottom: 8
        },
        type: "primary",
        block: true,
        icon: /* @__PURE__ */ jsx(PlusOutlined, {}),
        onClick: addField,
        children: t("Th\xEAm c\u1EEDa h\xE0ng")
      })
    ]
  });
};

export { StoreSetting };
