'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../../i18n.js');
var icons = require('@ant-design/icons');
var core = require('@dnd-kit/core');
var modifiers = require('@dnd-kit/modifiers');
var sortable = require('@dnd-kit/sortable');
var coreEditor = require('@tempi/core-editor');
var antd = require('antd');
var React = require('react');
var uuid = require('uuid');
var constants = require('../constants.js');
var StoreDataConfig = require('./StoreDataConfig.js');

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const StoreSetting = () => {
  const [stores, setStores] = coreEditor.useProp("stores", {
    formatter: (val) => (val || []).map((el) => __spreadProps(__spreadValues({}, el), {
      dndId: el.dndId ? el.dndId : uuid.v4()
    })),
    parser: (val) => (val || []).map((el) => {
      delete el.dndId;
      return __spreadProps(__spreadValues({}, el), {
        id: el.id || uuid.v4()
      });
    })
  });
  const [activeField, setActiveField] = React.useState();
  const handleDragEnd = ({ active, over }) => {
    if ((active == null ? void 0 : active.id) !== (over == null ? void 0 : over.id)) {
      const _stores = [...stores];
      const oldIndex = _stores.findIndex((el) => (el == null ? void 0 : el.dndId) === (active == null ? void 0 : active.id));
      const newIndex = _stores.findIndex((el) => (el == null ? void 0 : el.dndId) === (over == null ? void 0 : over.id));
      setStores(sortable.arrayMove(_stores, oldIndex, newIndex));
    }
  };
  const addField = () => {
    setStores([...stores, constants.DEFAULT_NEW_STORE]);
    setActiveField(stores.length);
  };
  const removeField = (index) => {
    const cloneStores = [...stores];
    cloneStores.splice(index, 1);
    setStores(cloneStores);
  };
  const duplicateField = (index) => {
    const newStore = __spreadProps(__spreadValues({}, stores[index]), {
      name: stores[index].name + " [duplicated]"
    });
    const cloneStores = [...stores];
    cloneStores.splice(index + 1, 0, newStore);
    setStores(cloneStores);
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(core.DndContext, {
        modifiers: [
          modifiers.restrictToVerticalAxis,
          modifiers.restrictToWindowEdges,
          modifiers.restrictToFirstScrollableAncestor
        ],
        onDragEnd: handleDragEnd,
        children: /* @__PURE__ */ jsxRuntime.jsx(sortable.SortableContext, {
          items: stores.map((el) => el.dndId),
          strategy: sortable.verticalListSortingStrategy,
          children: stores.map((el, index) => /* @__PURE__ */ jsxRuntime.jsx(StoreDataConfig.StoreDataConfig, {
            store: el,
            index,
            activeField,
            setActiveField,
            onDuplicate: () => duplicateField(index),
            onRemove: () => removeField(index)
          }, index))
        })
      }),
      /* @__PURE__ */ jsxRuntime.jsx(antd.Button, {
        style: {
          marginTop: 8,
          marginBottom: 8
        },
        type: "primary",
        block: true,
        icon: /* @__PURE__ */ jsxRuntime.jsx(icons.PlusOutlined, {}),
        onClick: addField,
        children: i18n.t("Th\xEAm c\u1EEDa h\xE0ng")
      })
    ]
  });
};

exports.StoreSetting = StoreSetting;
