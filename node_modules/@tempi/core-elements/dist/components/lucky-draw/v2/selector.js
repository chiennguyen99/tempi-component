'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var coreEditor = require('@tempi/core-editor');
var React = require('react');
var constants = require('./constants.js');
var quickSetting = require('./quick-setting.js');
var setting = require('./setting.js');
var ui = require('./ui.js');
var propKey = require('../../../constants/propKey.js');
var selector = require('../../section/selector.js');
var selector$1 = require('../../root/selector.js');

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var _a;
const LuckyDrawV2Editor = coreEditor.withSelector(
  (props) => {
    const [id, setId] = coreEditor.useProp(propKey.PROP_KEY.Id);
    const { pageId, upsertWheel } = coreEditor.useBuilder();
    const createWheel = () => {
      upsertWheel({ pageId }).then((id2) => {
        setId(id2);
      });
    };
    React.useEffect(() => {
      const timeOut = setTimeout(() => {
        if (!id) {
          createWheel();
        }
      }, 200);
      return () => clearTimeout(timeOut);
    }, [id]);
    return /* @__PURE__ */ jsxRuntime.jsx(ui.LuckyDrawV2, __spreadValues({
      isEditor: true
    }, props));
  },
  {
    displayName: "V\xF2ng quay may m\u1EAFn",
    tag: (_a = ui.LuckyDrawV2.displayName) == null ? void 0 : _a.toLowerCase(),
    advanceAttributes: coreEditor.AdvanceAttributes,
    quickSetting: quickSetting.LuckyDrawQuickSetting,
    customAttributes: setting.LuckyDrawSetting,
    props: constants.DEFAULT_LUCKY_DRAW_V2,
    rules: {
      canDrop: (targetNode) => {
        const ignoreTargets = [
          coreEditor.getEditorName({ RowEditor: selector.RowEditor }),
          coreEditor.getEditorName({ RootEditor: selector$1.RootEditor })
        ];
        return !ignoreTargets.includes(targetNode.data.name);
      }
    }
  }
);

exports.LuckyDrawV2Editor = LuckyDrawV2Editor;
