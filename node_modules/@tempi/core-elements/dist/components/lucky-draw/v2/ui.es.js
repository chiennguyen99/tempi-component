import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { useStore, getStyle } from '@tempi/core-renderer';
import { useRef } from 'react';
import { useLuckyDraw } from './hooks.es.js';
import { Spin } from '../../../core/Spin/Spin.es.js';
import { Wheel } from './core/Wheel/Wheel.es.js';
import { PercentageWarning } from './core/Wheel/PercentageWarning.es.js';
import { PopupV1 } from '../../popup/v1/ui.es.js';
import { FormV4 } from '../../form/v4/ui.es.js';
import { ButtonV2 } from '../../button/v2/ui.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const LuckyDrawV2 = (props) => {
  var _b;
  const _a = props, {
    id,
    commonStyle,
    dimension = 400,
    response,
    showTurn = false,
    isEditor = false,
    configStorage,
    triggerUpdate,
    alignment = "center",
    children
  } = _a, wheelConfig = __objRest(_a, [
    "id",
    "commonStyle",
    "dimension",
    "response",
    "showTurn",
    "isEditor",
    "configStorage",
    "triggerUpdate",
    "alignment",
    "children"
  ]);
  const ref = useRef();
  const { globalData } = useStore();
  const { userPhoneNumber, isDisableLuckyDrawPhoneInput = false } = globalData || {};
  const {
    loading,
    wheel,
    totalPercentage,
    isShowForm,
    setIsShowForm,
    turnCount,
    handleSpin,
    mustSpin,
    prizeNumber,
    handleSpinClick,
    handleStopSpin
  } = useLuckyDraw(id, {
    triggerUpdate,
    popupResponse: response,
    configStorage,
    wrapperRef: ref,
    userPhoneNumber,
    isDisableLuckyDrawPhoneInput
  });
  const { condition } = wheel || {};
  const formFields = (_b = condition == null ? void 0 : condition.form) == null ? void 0 : _b.fields;
  const getTypeField = (name, type) => {
    if (name === "phoneNumber")
      return "tel";
    if (name === "email")
      return "email";
    return type || "text";
  };
  if (!id)
    return /* @__PURE__ */ jsx("div", {
      style: {
        textAlign: "center",
        height: 400,
        display: "grid",
        placeItems: "center"
      },
      children: /* @__PURE__ */ jsx(Spin, {})
    });
  return /* @__PURE__ */ jsx(Fragment, {
    children: (totalPercentage === 100 || isEditor) && /* @__PURE__ */ jsxs(Fragment, {
      children: [
        /* @__PURE__ */ jsxs("div", {
          style: {
            textAlign: alignment,
            padding: "1.2em",
            overflow: "hidden"
          },
          children: [
            /* @__PURE__ */ jsxs(Wrapper, {
              commonStyle,
              ref,
              children: [
                /* @__PURE__ */ jsx(Wheel, __spreadProps(__spreadValues(__spreadProps(__spreadValues({
                  items: (wheel == null ? void 0 : wheel.items) || [],
                  loading,
                  mustStartSpinning: mustSpin
                }, wheelConfig), {
                  prizeNumber
                }), !isEditor && { onStartSpinning: handleSpinClick }), {
                  onStopSpinning: handleStopSpin
                })),
                isEditor && /* @__PURE__ */ jsx(PercentageWarning, {
                  totalPercentage
                })
              ]
            }),
            showTurn && /* @__PURE__ */ jsxs(Fragment, {
              children: [
                isEditor && /* @__PURE__ */ jsxs(TurnLabel, {
                  children: [
                    "B\u1EA1n c\xF2n ",
                    /* @__PURE__ */ jsx("strong", {
                      children: "***"
                    }),
                    " l\u01B0\u1EE3t quay!"
                  ]
                }),
                turnCount !== void 0 && turnCount !== -1 && /* @__PURE__ */ jsxs(TurnLabel, {
                  children: [
                    "B\u1EA1n c\xF2n ",
                    /* @__PURE__ */ jsx("strong", {
                      children: turnCount
                    }),
                    " l\u01B0\u1EE3t quay!"
                  ]
                })
              ]
            })
          ]
        }),
        formFields && /* @__PURE__ */ jsxs(PopupV1, __spreadProps(__spreadValues({
          show: isShowForm,
          onFinishClose: () => setIsShowForm(false)
        }, {
          maskClosable: true,
          maskStyle: {
            backgroundColor: "rgba(0, 0, 0, 0.5)"
          },
          commonStyle: {
            borderRadius: 8,
            width: 400,
            height: 300,
            backgroundColor: "#fff",
            padding: {
              left: 24,
              right: 24,
              bottom: 24,
              top: 24
            }
          },
          position: "default"
        }), {
          children: [
            /* @__PURE__ */ jsx("div", {
              style: { marginBottom: 32, fontWeight: "bold" },
              children: "Vui l\xF2ng \u0111i\u1EC1n th\xF4ng tin \u0111\u1EC3 tham gia ch\u01B0\u01A1ng tr\xECnh"
            }),
            /* @__PURE__ */ jsx(FormV4, {
              inputs: formFields == null ? void 0 : formFields.map(({ label, name, required, type }) => {
                let value;
                let disabled = false;
                if (name === "phoneNumber" && userPhoneNumber) {
                  value = userPhoneNumber;
                }
                if (name === "phoneNumber" && isDisableLuckyDrawPhoneInput) {
                  disabled = true;
                }
                return {
                  type: getTypeField(name, type),
                  label,
                  name,
                  required,
                  commonStyle: {
                    height: 40,
                    width: "100%",
                    marginBottom: 8
                  },
                  inputStyle: {
                    borderRadius: 8
                  },
                  placeholder: `Nh\u1EADp ${label.toLowerCase()}`,
                  id: `user-info-${name}-input`,
                  value,
                  disabled
                };
              }),
              submits: [],
              hiddenFields: [],
              showLabel: true,
              onFinish: handleSpin,
              children: /* @__PURE__ */ jsx(ButtonV2, {
                text: "Ho\xE0n t\u1EA5t",
                buttonStyle: {
                  backgroundColor: "#108143",
                  color: "rgba(255, 255, 255, 1)",
                  height: 40,
                  width: 120,
                  borderRadius: 999,
                  margin: {
                    top: 20,
                    left: "auto",
                    right: "auto"
                  }
                },
                loading,
                iconConfig: {
                  position: "right",
                  spacing: 8,
                  show: true,
                  icon: {
                    name: "CheckOutlined",
                    size: 18
                  }
                }
              })
            })
          ]
        })),
        children
      ]
    })
  });
};
LuckyDrawV2.displayName = "LuckyDrawV2";
const Wrapper = styled.div(
  ({ commonStyle }) => `
  display: inline-block;
  position: relative;
  width: min(400px,100%);
  padding-bottom: min(400px,100%);
  user-select: none;
  ${getStyle(commonStyle)}
`
);
const TurnLabel = styled.div`
  font-size: 1.2em;
  text-align: center;
  margin-top: 1em;
`;

export { LuckyDrawV2 };
