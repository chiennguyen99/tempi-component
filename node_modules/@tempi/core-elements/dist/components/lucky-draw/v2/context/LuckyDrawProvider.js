'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var coreEditor = require('@tempi/core-editor');
var React = require('react');
var LuckyDrawContext = require('./LuckyDrawContext.js');
var propKey = require('../../../../constants/propKey.js');

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const LuckyDrawProvider = ({
  id,
  children
}) => {
  const [loading, setLoading] = React.useState(true);
  const [wheel, setWheel] = React.useState(null);
  const [trigger, setTrigger] = coreEditor.useProp(propKey.PROP_KEY.TriggerUpdate);
  const { trackCustomEvent, upsertWheel, getWheel } = coreEditor.useBuilder();
  const { items, condition } = wheel || {};
  const addItem = (newItem) => {
    setWheel(__spreadProps(__spreadValues({}, wheel), {
      items: [...(wheel == null ? void 0 : wheel.items) || [], newItem]
    }));
  };
  const updateItem = (updatedItem) => {
    setWheel(__spreadProps(__spreadValues({}, wheel), {
      items: wheel == null ? void 0 : wheel.items.map(
        (item) => item.id === updatedItem.id ? updatedItem : item
      )
    }));
  };
  const removeItem = (id2) => {
    setWheel(__spreadProps(__spreadValues({}, wheel), {
      items: wheel == null ? void 0 : wheel.items.filter((item) => item.id !== id2)
    }));
  };
  const updateFormFields = (fields) => {
    const updatedWheel = __spreadProps(__spreadValues({}, wheel), {
      condition: __spreadProps(__spreadValues({}, (wheel == null ? void 0 : wheel.condition) || {}), {
        form: { fields }
      })
    });
    return upsertWheel(updatedWheel).then(() => setWheel(updatedWheel));
  };
  const updateLimitation = (limits) => {
    const updatedWheel = __spreadProps(__spreadValues({}, wheel), {
      condition: __spreadProps(__spreadValues({}, (wheel == null ? void 0 : wheel.condition) || {}), {
        limit: limits
      })
    });
    return upsertWheel(updatedWheel).then(() => setWheel(updatedWheel));
  };
  const updateCondition = (condition2) => {
    const updatedWheel = __spreadProps(__spreadValues({}, wheel), {
      condition: condition2
    });
    return upsertWheel(updatedWheel).then(() => setWheel(updatedWheel));
  };
  const removeCondition = () => {
    const updatedWheel = __spreadProps(__spreadValues({}, wheel), { condition: {} });
    return upsertWheel(updatedWheel).then(() => setWheel(updatedWheel));
  };
  const value = {
    id,
    items,
    loading,
    condition,
    addItem,
    updateItem,
    removeItem,
    setLoading,
    updateFormFields,
    updateLimitation,
    removeCondition,
    updateCondition
  };
  React.useEffect(() => {
    var _a, _b;
    if (wheel) {
      setTrigger(!trigger);
      if (wheel.id && ((_a = wheel.items) == null ? void 0 : _a.length) > 0) {
        const totalPercentage = Math.round(
          ((_b = wheel.items) == null ? void 0 : _b.reduce(
            (total, item) => total + (item.percentage || 0),
            0
          )) * 100
        ) / 100;
        if (totalPercentage === 100) {
          trackCustomEvent == null ? void 0 : trackCustomEvent("configPlayLuckyDraw", {
            property: "wheelId",
            value: wheel.id
          });
        }
      }
    }
  }, [wheel]);
  React.useEffect(() => {
    if (!id)
      return;
    setLoading(true);
    getWheel(id).then((wheelData) => {
      if (!!(wheelData == null ? void 0 : wheelData.condition) && typeof wheelData.condition === "string") {
        wheelData.condition = JSON.parse(wheelData.condition);
      }
      setWheel(wheelData);
    }).finally(() => {
      setLoading(false);
    });
  }, [id]);
  return /* @__PURE__ */ jsxRuntime.jsx(LuckyDrawContext.LuckyDrawContext.Provider, {
    value,
    children
  });
};

exports.LuckyDrawProvider = LuckyDrawProvider;
