import { jsx } from 'react/jsx-runtime';
import { withSelector, useProp, useBuilder, AdvanceAttributes, getEditorName } from '@tempi/core-editor';
import { useEffect } from 'react';
import { DEFAULT_LUCKY_DRAW_V2 } from './constants.es.js';
import { LuckyDrawQuickSetting } from './quick-setting.es.js';
import { LuckyDrawSetting } from './setting.es.js';
import { LuckyDrawV2 } from './ui.es.js';
import { PROP_KEY } from '../../../constants/propKey.es.js';
import { RowEditor } from '../../section/selector.es.js';
import { RootEditor } from '../../root/selector.es.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var _a;
const LuckyDrawV2Editor = withSelector(
  (props) => {
    const [id, setId] = useProp(PROP_KEY.Id);
    const { pageId, upsertWheel } = useBuilder();
    const createWheel = () => {
      upsertWheel({ pageId }).then((id2) => {
        setId(id2);
      });
    };
    useEffect(() => {
      const timeOut = setTimeout(() => {
        if (!id) {
          createWheel();
        }
      }, 200);
      return () => clearTimeout(timeOut);
    }, [id]);
    return /* @__PURE__ */ jsx(LuckyDrawV2, __spreadValues({
      isEditor: true
    }, props));
  },
  {
    displayName: "V\xF2ng quay may m\u1EAFn",
    tag: (_a = LuckyDrawV2.displayName) == null ? void 0 : _a.toLowerCase(),
    advanceAttributes: AdvanceAttributes,
    quickSetting: LuckyDrawQuickSetting,
    customAttributes: LuckyDrawSetting,
    props: DEFAULT_LUCKY_DRAW_V2,
    rules: {
      canDrop: (targetNode) => {
        const ignoreTargets = [
          getEditorName({ RowEditor }),
          getEditorName({ RootEditor })
        ];
        return !ignoreTargets.includes(targetNode.data.name);
      }
    }
  }
);

export { LuckyDrawV2Editor };
