import { CommonAttributesInterface, Style } from '@tempi/core-renderer';
import { RequestInterface } from '../../../configs';
import { ConfigStorageInterface } from '../../form';
import { ImageInterface } from '../../image';
interface PrizeItemStyle {
    backgroundColor?: string;
    textColor?: string;
}
export interface PrizeItem {
    name?: string;
    style?: PrizeItemStyle;
    image?: ImageInterface;
    percentage?: number;
}
export interface BorderInterface {
    outerBorderColor?: string;
    outerBorderWidth?: number;
    innerBorderColor?: string;
    innerBorderWidth?: number;
    image?: ImageInterface;
}
export interface DrawWheelInterface {
    background?: {
        image?: ImageInterface;
        rotate?: number;
    };
    border: BorderInterface;
    innerRadius: number;
    radiusLineColor: string;
    radiusLineWidth: number;
    fontSize: number;
    perpendicularPrize: boolean;
    textDistance: number;
}
export interface SpinTriggerInterface {
    disabled?: boolean;
    image?: ImageInterface;
    width?: number;
    height?: number;
    buttonStyle?: Style;
    imageStyle?: Style;
    text?: string;
}
export interface RouletteInterface {
    color?: string;
    size?: number;
    image?: ImageInterface;
    rotate?: number;
}
export interface LuckyDrawCustomResponse {
    key?: string;
    value?: number | string;
    popup?: string;
}
export interface LuckyDrawResponse {
    prize?: string;
    outOfTurn?: string;
    outOfPrize?: string;
    custom?: LuckyDrawCustomResponse[];
}
export interface WheelInterface {
    items: PrizeItem[];
    mustStartSpinning: boolean;
    prizeNumber?: number;
    prizeAngle: number;
    backgroundColors?: string[];
    textColors?: string[];
    spinDuration?: number;
    spinTrigger?: SpinTriggerInterface;
    roulette?: RouletteInterface;
    dimension?: number;
    showTurn?: boolean;
    loading?: boolean;
    canvasConfig: DrawWheelInterface;
    onStartSpinning?: () => any;
    onStopSpinning?: () => any;
}
export interface LuckyDrawV2Interface extends Omit<CommonAttributesInterface, 'id'>, Omit<Omit<WheelInterface, 'mustStartSpinning'>, 'items'> {
    id: number;
    response?: LuckyDrawResponse;
    isEditor?: boolean;
    configStorage?: ConfigStorageInterface;
    triggerUpdate?: boolean;
    alignment?: 'left' | 'right' | 'center';
}
export interface LuckyDrawItemImage {
    src: string;
    width?: number;
}
export interface LuckyDrawPublicItem {
    id?: number;
    name: string;
    image?: LuckyDrawItemImage;
}
export interface LuckyDrawItem {
    id?: number;
    name: string;
    image?: LuckyDrawItemImage;
    wheelId: number;
    percentage: number;
    quantity?: number;
    request?: RequestInterface;
}
export interface UpsertWheelInterface {
    id?: number;
    pageId: number;
    condition?: any;
}
export interface WheelResponseInterface extends UpsertWheelInterface {
    items?: LuckyDrawItem[];
    totalPercentage?: number;
    createdAt?: Date;
    updatedAt?: Date;
    createdBy?: string;
    updatedBy?: string;
}
export interface LuckyDrawServiceInterface {
    getWheel?: (id: number) => Promise<WheelResponseInterface>;
    upsertWheel?: (data: UpsertWheelInterface) => Promise<number>;
    deleteWheel?: (id: number) => Promise<void>;
    upsertWheelItem?: (data: LuckyDrawItem) => Promise<number>;
    deleteWheelItem?: (id: number) => Promise<void>;
}
export declare enum ShowPopoverEnum {
    HIDE = 0,
    SHOW = 1,
    ALWAYS_SHOW = 2
}
export {};
//# sourceMappingURL=type.d.ts.map