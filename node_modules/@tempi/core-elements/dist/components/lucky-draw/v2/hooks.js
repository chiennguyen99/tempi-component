'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var i18n = require('../../../i18n.js');
var coreRenderer = require('@tempi/core-renderer');
var get = require('lodash.get');
var React = require('react');
var constants = require('./constants.js');
var getPartialDateTimeTimeZone7 = require('../../../utils/getPartialDateTimeTimeZone7.js');
var queryStringToObject = require('../../../utils/queryStringToObject.js');
var form = require('../../../utils/form.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var get__default = /*#__PURE__*/_interopDefaultLegacy(get);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const useLuckyDraw = (id, configs) => {
  var _a;
  const {
    triggerUpdate,
    popupResponse,
    configStorage,
    wrapperRef,
    isDisableLuckyDrawPhoneInput,
    userPhoneNumber
  } = configs;
  const [loading, setLoading] = React.useState(true);
  const [userInfo, setUserInfo] = React.useState();
  const [wheel, setWheel] = React.useState();
  const [mustSpin, setMustSpin] = React.useState(false);
  const [turnCount, setTurnCount] = React.useState();
  const [prizeNumber, setPrizeNumber] = React.useState();
  const [isShowForm, setIsShowForm] = React.useState(false);
  const [listContentHtml, setListContentHtml] = React.useState();
  const [spinResponse, setSpinResponse] = React.useState();
  const { env } = coreRenderer.useStore();
  const { condition, items, totalPercentage = 100 } = wheel || {};
  const formFields = (_a = condition == null ? void 0 : condition.form) == null ? void 0 : _a.fields;
  const API = new coreRenderer.Api(`${coreRenderer.publicBffUrl[env]}/v1/lucky-draw`);
  const handleSpin = async (userInfo2) => {
    var _a2, _b;
    setUserInfo(userInfo2);
    setLoading(true);
    setIsShowForm(false);
    let response;
    await API.post("/spin", { wheelId: id, userInfo: userInfo2 }).then((res) => {
      response = res.data;
      setSpinResponse(response.data);
    }).catch((error) => {
      var _a3, _b2;
      if (parseInt((_a3 = error == null ? void 0 : error.response) == null ? void 0 : _a3.code) === constants.ERROR_CODES.OUT_OF_TURN) {
        showPopup(popupResponse == null ? void 0 : popupResponse.outOfTurn);
        setTurnCount(0);
        return;
      }
      if (parseInt((_b2 = error == null ? void 0 : error.response) == null ? void 0 : _b2.code) === constants.ERROR_CODES.OUT_OF_PRIZE) {
        showPopup(popupResponse == null ? void 0 : popupResponse.outOfPrize);
        return;
      }
    });
    if (response == null ? void 0 : response.data) {
      const spinTurn = (_a2 = response == null ? void 0 : response.data) == null ? void 0 : _a2.spinTurn;
      setTurnCount(spinTurn);
      const prizeId = (_b = response == null ? void 0 : response.data) == null ? void 0 : _b.itemId;
      const prizeIndex = items.findIndex((item) => item.id === prizeId);
      setPrizeNumber(prizeIndex);
      setMustSpin(true);
    }
    setLoading(false);
  };
  const handleSpinClick = () => {
    if (mustSpin) {
      return;
    } else {
      if (formFields) {
        if (!userPhoneNumber && isDisableLuckyDrawPhoneInput) {
          alert(
            i18n.t(
              "T\xE0i kho\u1EA3n c\u1EE7a b\u1EA1n kh\xF4ng c\xF3 s\u1ED1 \u0111i\u1EC7n tho\u1EA1i, vui l\xF2ng v\xE0o Th\xF4ng tin t\xE0i kho\u1EA3n v\xE0 c\u1EADp nh\u1EADt s\u1ED1 \u0111i\u1EC7n tho\u1EA1i"
            )
          );
          return;
        }
        if (!userInfo) {
          setIsShowForm(true);
        } else {
          handleSpin(userInfo);
        }
      } else {
        handleSpin(null);
      }
    }
  };
  const fetchLuckyDrawData = (wheelId) => {
    API.get(`/wheel/${wheelId}`).then((res) => res.data).then((wheelResponse) => setWheel(wheelResponse.data)).catch((err) => {
      console.error(err);
      return Promise.reject(err);
    }).finally(() => {
      setLoading(false);
    });
  };
  const handleStorageData = async (configStorage2) => {
    var _a2, _b;
    const prize = (_a2 = wheel == null ? void 0 : wheel.items) == null ? void 0 : _a2[prizeNumber];
    if (!prize || !(configStorage2 == null ? void 0 : configStorage2.formConfigId))
      return;
    const date = new Date();
    const { year, month, day, hour, minute, second } = getPartialDateTimeTimeZone7.getPartialDateTimeTimeZone7(date);
    const dateString = `${year}-${month}-${day} ${hour}:${minute}:${second}`;
    let newValues = __spreadProps(__spreadValues({}, userInfo || {}), {
      prizeName: prize.name,
      spinAt: dateString
    });
    if (configStorage2 == null ? void 0 : configStorage2.autoPassParams) {
      newValues = __spreadValues(__spreadValues({}, queryStringToObject.queryStringToObject(window.location.search)), newValues);
    }
    const valuesSubmit = [
      ...Object.entries(newValues).map(([k, v]) => {
        return {
          name: k,
          type: "string",
          value: v
        };
      }),
      {
        name: "url_page",
        type: "string",
        value: (_b = window == null ? void 0 : window.location) == null ? void 0 : _b.href
      }
    ];
    await form.formUtils.submitFormData(
      configStorage2 == null ? void 0 : configStorage2.formConfigId,
      valuesSubmit,
      `${coreRenderer.publicBffUrl[env]}/v1/submit-form`
    );
  };
  const handleStopSpin = async () => {
    setMustSpin(false);
    const { assignResult, isAssignSuccess } = spinResponse;
    if (isAssignSuccess) {
      if (popupResponse == null ? void 0 : popupResponse.prize) {
        showPrizePopup(items[prizeNumber]);
      }
    } else if (assignResult) {
      handleCustomResponse(assignResult);
    } else {
      if (popupResponse == null ? void 0 : popupResponse.prize) {
        showPrizePopup(items[prizeNumber]);
      }
    }
    await handleStorageData(configStorage);
  };
  const replaceRegex = (popupId, prize, str) => {
    if (!popupId || !str)
      return;
    const searchRegExp = /{{([\w,.]*)}}/g;
    const popupEle = wrapperRef.current.ownerDocument.querySelector(
      `[data-uniq-id="${popupId}"]`
    );
    popupEle.querySelectorAll(".popup-content p, h1, h2, h3, h4, h5, h6").forEach((el, index) => {
      el.innerHTML = str[index].replaceAll(searchRegExp, (i) => {
        return get__default["default"](prize, i.replace(/{{/, "").replace(/}}/, ""));
      });
    });
  };
  const replaceContentApi = (popupId, data) => {
    const popupEle = wrapperRef.current.ownerDocument.querySelector(
      `[data-uniq-id="${popupId}"]`
    );
    if (!popupId || !popupEle)
      return;
    popupEle.querySelectorAll(".popup-content p, h1, h2, h3, h4, h5, h6").forEach((el) => {
      const str = el.innerHTML;
      const searchRegExp = /{{([\w,.]*)}}/g;
      el.innerHTML = str.replaceAll(searchRegExp, (i) => {
        return get__default["default"](data, i.replace(/{{/, "").replace(/}}/, ""));
      });
    });
  };
  const showPopup = (popupId) => {
    var _a2;
    (_a2 = wrapperRef.current.ownerDocument.querySelector(
      `[data-uniq-id="${popupId}"]`
    )) == null ? void 0 : _a2.click();
  };
  const showPrizePopup = (prize) => {
    const popupId = popupResponse.prize;
    if (!popupId)
      return;
    replaceRegex(popupId, prize, listContentHtml);
    showPopup(popupId);
  };
  const handleCustomResponse = (apiResponse) => {
    var _a2;
    if (!((_a2 = popupResponse == null ? void 0 : popupResponse.custom) == null ? void 0 : _a2.length))
      return;
    popupResponse.custom.forEach((item) => {
      var _a3, _b, _c, _d;
      if (((_b = (_a3 = get__default["default"](apiResponse, item.key)) == null ? void 0 : _a3.toString) == null ? void 0 : _b.call(_a3)) === ((_c = item.value) == null ? void 0 : _c.toString())) {
        const popupId = item.popup;
        replaceContentApi(popupId, apiResponse);
        (_d = wrapperRef.current.ownerDocument.querySelector(
          `[data-uniq-id="${popupId}"]`
        )) == null ? void 0 : _d.click();
        return;
      }
    });
  };
  React.useEffect(() => {
    if (!!id) {
      fetchLuckyDrawData(id);
    }
  }, [id, triggerUpdate]);
  React.useEffect(() => {
    if (wrapperRef.current && (popupResponse == null ? void 0 : popupResponse.prize)) {
      const popupEle = wrapperRef.current.ownerDocument.querySelector(
        `[data-uniq-id="${popupResponse.prize}"]`
      );
      if (popupEle) {
        const list = [
          ...popupEle.querySelectorAll(
            ".popup-content p, h1, h2, h3, h4, h5, h6"
          )
        ].map((el) => el.innerHTML);
        setListContentHtml(list);
      }
    }
  }, [wrapperRef.current]);
  return {
    wheel,
    loading,
    mustSpin,
    turnCount,
    prizeNumber,
    isShowForm,
    totalPercentage,
    setLoading,
    setUserInfo,
    handleSpin,
    handleSpinClick,
    setMustSpin,
    setIsShowForm,
    handleStorageData,
    handleStopSpin
  };
};

exports.useLuckyDraw = useLuckyDraw;
