import { jsxs, jsx } from 'react/jsx-runtime';
import { useState, useRef, useEffect } from 'react';
import { DEFAULT_BACKGROUND_COLORS, DEFAULT_TEXT_COLORS, DEFAULT_SPIN_DURATION, DEFAULT_PRIZE_ANGLE } from '../strings.es.js';
import { makeClassKey, getRotationDegrees } from '../utils.es.js';
import WheelCanvas from '../WheelCanvas/WheelCanvas.es.js';
import { Roulette } from './Roulette.es.js';
import { SpinBorder } from './SpinBorder.es.js';
import { SpinTrigger } from './SpinTrigger.es.js';
import { RouletteContainer, RotationContainer } from './styles.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const STARTED_SPINNING = "started-spinning";
const START_SPINNING_TIME = 2600;
const CONTINUE_SPINNING_TIME = 750;
const STOP_SPINNING_TIME = 8e3;
const Wheel = ({
  mustStartSpinning,
  prizeNumber,
  items = [],
  onStartSpinning = () => null,
  onStopSpinning = () => null,
  backgroundColors = DEFAULT_BACKGROUND_COLORS,
  textColors = DEFAULT_TEXT_COLORS,
  spinDuration = DEFAULT_SPIN_DURATION,
  prizeAngle = DEFAULT_PRIZE_ANGLE,
  spinTrigger,
  roulette,
  canvasConfig,
  loading = false
}) => {
  var _a;
  const [wheelData, setWheelData] = useState([...items]);
  const [startRotationDegrees, setStartRotationDegrees] = useState(0);
  const [finalRotationDegrees, setFinalRotationDegrees] = useState(0);
  const [hasStartedSpinning, setHasStartedSpinning] = useState(false);
  const [hasStoppedSpinning, setHasStoppedSpinning] = useState(false);
  const [isCurrentlySpinning, setIsCurrentlySpinning] = useState(false);
  const [isDataUpdated, setIsDataUpdated] = useState(false);
  const [classKey] = useState(makeClassKey(5));
  const normalizedSpinDuration = Math.max(0.01, spinDuration);
  const startSpinningTime = START_SPINNING_TIME * normalizedSpinDuration;
  const continueSpinningTime = CONTINUE_SPINNING_TIME * normalizedSpinDuration;
  const stopSpinningTime = STOP_SPINNING_TIME * normalizedSpinDuration;
  const totalSpinningTime = startSpinningTime + continueSpinningTime + stopSpinningTime;
  const mustStopSpinning = useRef(false);
  useEffect(() => {
    var _a2, _b;
    const dataLength = items.length;
    const wheelDataAux = [{ name: "" }];
    for (let i = 0; i < dataLength; i++) {
      wheelDataAux[i] = __spreadProps(__spreadValues({}, items[i]), {
        style: {
          backgroundColor: ((_a2 = items[i].style) == null ? void 0 : _a2.backgroundColor) || backgroundColors[i % backgroundColors.length],
          textColor: ((_b = items[i].style) == null ? void 0 : _b.textColor) || textColors[i % textColors.length]
        }
      });
    }
    setWheelData([...wheelDataAux]);
    setIsDataUpdated(true);
  }, [items, backgroundColors, textColors]);
  useEffect(() => {
    if (mustStartSpinning && !isCurrentlySpinning) {
      setIsCurrentlySpinning(true);
      startSpinning();
      const finalRotationDegreesCalculated = getRotationDegrees(
        prizeNumber,
        items.length,
        prizeAngle
      );
      setFinalRotationDegrees(finalRotationDegreesCalculated);
    }
  }, [mustStartSpinning]);
  useEffect(() => {
    if (hasStoppedSpinning) {
      setIsCurrentlySpinning(false);
      setStartRotationDegrees(finalRotationDegrees);
    }
  }, [hasStoppedSpinning]);
  const startSpinning = () => {
    setHasStartedSpinning(true);
    setHasStoppedSpinning(false);
    mustStopSpinning.current = true;
    setTimeout(() => {
      if (mustStopSpinning.current) {
        mustStopSpinning.current = false;
        setHasStartedSpinning(false);
        setHasStoppedSpinning(true);
        onStopSpinning();
      }
    }, totalSpinningTime);
  };
  const getRouletteClass = () => {
    if (hasStartedSpinning) {
      return STARTED_SPINNING;
    }
    return "";
  };
  if (!isDataUpdated) {
    return null;
  }
  return /* @__PURE__ */ jsxs(RouletteContainer, {
    children: [
      /* @__PURE__ */ jsx(RotationContainer, {
        className: getRouletteClass(),
        startSpinningTime,
        continueSpinningTime,
        stopSpinningTime,
        startRotationDegrees,
        finalRotationDegrees,
        classKey,
        children: /* @__PURE__ */ jsx(WheelCanvas, __spreadValues({
          width: "900",
          height: "900",
          items: wheelData
        }, canvasConfig))
      }),
      /* @__PURE__ */ jsx(SpinBorder, {
        image: (_a = canvasConfig == null ? void 0 : canvasConfig.border) == null ? void 0 : _a.image
      }),
      /* @__PURE__ */ jsx(Roulette, __spreadValues({
        prizeAngle
      }, roulette)),
      /* @__PURE__ */ jsx(SpinTrigger, __spreadProps(__spreadValues({
        onStartSpinning
      }, spinTrigger), {
        loading
      }))
    ]
  });
};

export { Wheel };
