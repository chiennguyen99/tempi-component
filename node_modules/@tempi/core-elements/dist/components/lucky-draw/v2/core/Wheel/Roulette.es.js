import { jsx } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { getImageUrlFromGoogleUserContent, mappingAssets } from '@tempi/core-renderer';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const { rouletteImage } = mappingAssets;
const Roulette = ({
  image,
  prizeAngle = 90,
  rotate = 90
}) => {
  const _a = image || {}, { src, googleImageParams } = _a, restImage = __objRest(_a, ["src", "googleImageParams"]);
  return /* @__PURE__ */ jsx(Wrapper, {
    prizeAngle,
    children: /* @__PURE__ */ jsx(RouletteImage, __spreadProps(__spreadValues({
      rotate
    }, restImage), {
      src: getImageUrlFromGoogleUserContent(src, googleImageParams) || rouletteImage,
      loading: "lazy"
    }))
  });
};
const RouletteImage = styled.img(({ rotate }) => {
  return `
    position: absolute;
    right: 0;
    top: calc(50%);
    width: 12%;
    transform: translateY(-50%) rotate(${rotate}deg);
    `;
});
const Wrapper = styled.div(
  ({ prizeAngle }) => `
  width: 100%;
  height: 100%;
  transform: rotate(${360 - prizeAngle}deg)
`
);

export { Roulette };
