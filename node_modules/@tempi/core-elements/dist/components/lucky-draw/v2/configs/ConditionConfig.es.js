import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import { t } from '../../../../i18n.es.js';
import { SwitchToShow } from '@tempi/core-editor';
import { Divider } from 'antd';
import { useContext, useState, useEffect } from 'react';
import { LuckyDrawContext } from '../context/LuckyDrawContext.es.js';
import { FormFieldConfig } from './FormFieldConfig.es.js';
import { LimitationConfig } from './LimitationConfig.es.js';

const ConditionConfig = () => {
  const {
    loading,
    condition,
    updateFormFields,
    updateLimitation,
    removeCondition,
    updateCondition
  } = useContext(LuckyDrawContext);
  const { form, limit } = condition || {};
  const [showConfig, setShowConfig] = useState(!!(form || limit));
  const defaultFields = [
    {
      label: t("S\u1ED1 \u0111i\u1EC7n tho\u1EA1i"),
      name: "phoneNumber",
      required: true,
      type: "tel"
    },
    { label: t("H\u1ECD v\xE0 t\xEAn"), name: "fullName", required: true, type: "text" },
    { label: "Email", name: "email", required: true, type: "email" }
  ];
  const defaultLimits = {
    spinTurn: 1,
    type: 1,
    resetUnit: "day"
  };
  const defaultCondition = {
    form: {
      fields: defaultFields
    },
    limit: {
      type: 1,
      spinTurn: 1
    }
  };
  useEffect(() => {
    if (!condition)
      return;
    setShowConfig(!!(condition.form || condition.limit));
  }, [condition]);
  useEffect(() => {
    if (loading)
      return;
    if (showConfig) {
      if (!((condition == null ? void 0 : condition.form) || (condition == null ? void 0 : condition.limit))) {
        updateCondition(defaultCondition);
      }
    } else {
      removeCondition();
    }
  }, [showConfig]);
  return /* @__PURE__ */ jsx(Fragment, {
    children: /* @__PURE__ */ jsxs(SwitchToShow, {
      formItemProps: { label: t("Nh\u1EADp th\xF4ng tin \u0111\u1EC3 tham gia") },
      show: showConfig,
      setShow: setShowConfig,
      children: [
        /* @__PURE__ */ jsx(FormFieldConfig, {
          fields: (form == null ? void 0 : form.fields) || defaultFields,
          onSubmit: (values) => {
            updateFormFields(values.fields);
          },
          requiredFields: ["phoneNumber"]
        }),
        /* @__PURE__ */ jsx(Divider, {
          style: { margin: "0 0 12px 0" }
        }),
        /* @__PURE__ */ jsx(LimitationConfig, {
          limit: limit || defaultLimits,
          onSubmit: (limit2) => {
            updateLimitation(limit2);
          }
        })
      ]
    })
  });
};

export { ConditionConfig };
