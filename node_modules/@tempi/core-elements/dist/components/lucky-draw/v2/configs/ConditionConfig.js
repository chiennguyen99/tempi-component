'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../../../i18n.js');
var coreEditor = require('@tempi/core-editor');
var antd = require('antd');
var React = require('react');
var LuckyDrawContext = require('../context/LuckyDrawContext.js');
var FormFieldConfig = require('./FormFieldConfig.js');
var LimitationConfig = require('./LimitationConfig.js');

const ConditionConfig = () => {
  const {
    loading,
    condition,
    updateFormFields,
    updateLimitation,
    removeCondition,
    updateCondition
  } = React.useContext(LuckyDrawContext.LuckyDrawContext);
  const { form, limit } = condition || {};
  const [showConfig, setShowConfig] = React.useState(!!(form || limit));
  const defaultFields = [
    {
      label: i18n.t("S\u1ED1 \u0111i\u1EC7n tho\u1EA1i"),
      name: "phoneNumber",
      required: true,
      type: "tel"
    },
    { label: i18n.t("H\u1ECD v\xE0 t\xEAn"), name: "fullName", required: true, type: "text" },
    { label: "Email", name: "email", required: true, type: "email" }
  ];
  const defaultLimits = {
    spinTurn: 1,
    type: 1,
    resetUnit: "day"
  };
  const defaultCondition = {
    form: {
      fields: defaultFields
    },
    limit: {
      type: 1,
      spinTurn: 1
    }
  };
  React.useEffect(() => {
    if (!condition)
      return;
    setShowConfig(!!(condition.form || condition.limit));
  }, [condition]);
  React.useEffect(() => {
    if (loading)
      return;
    if (showConfig) {
      if (!((condition == null ? void 0 : condition.form) || (condition == null ? void 0 : condition.limit))) {
        updateCondition(defaultCondition);
      }
    } else {
      removeCondition();
    }
  }, [showConfig]);
  return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: /* @__PURE__ */ jsxRuntime.jsxs(coreEditor.SwitchToShow, {
      formItemProps: { label: i18n.t("Nh\u1EADp th\xF4ng tin \u0111\u1EC3 tham gia") },
      show: showConfig,
      setShow: setShowConfig,
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(FormFieldConfig.FormFieldConfig, {
          fields: (form == null ? void 0 : form.fields) || defaultFields,
          onSubmit: (values) => {
            updateFormFields(values.fields);
          },
          requiredFields: ["phoneNumber"]
        }),
        /* @__PURE__ */ jsxRuntime.jsx(antd.Divider, {
          style: { margin: "0 0 12px 0" }
        }),
        /* @__PURE__ */ jsxRuntime.jsx(LimitationConfig.LimitationConfig, {
          limit: limit || defaultLimits,
          onSubmit: (limit2) => {
            updateLimitation(limit2);
          }
        })
      ]
    })
  });
};

exports.ConditionConfig = ConditionConfig;
