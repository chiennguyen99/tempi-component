import { jsx, jsxs } from 'react/jsx-runtime';
import styled from '@emotion/styled';
import { useState } from 'react';
import { usePropSeparateDevice, FormItem, ColorPickerV2 } from '@tempi/core-editor';
import { DndContext } from '@dnd-kit/core';
import { SortableContext, verticalListSortingStrategy, useSortable, arrayMove } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import { t } from '../../../../i18n.es.js';
import { LUCKY_DRAW_DEFAULT_COLOR } from '../constants.es.js';
import { DeleteOutlined, HolderOutlined } from '@ant-design/icons';
import { Button } from 'antd';
import { ShowPopoverEnum } from '../type.es.js';
import { restrictToVerticalAxis, restrictToWindowEdges, restrictToFirstScrollableAncestor } from '@dnd-kit/modifiers';
import { v4 } from 'uuid';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const DndItem = (props) => {
  const { dndId, color, setOpenPopover, handleChangeColor, handleDeleteColor } = props;
  const [showModal, setShowModal] = useState(false);
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging
  } = useSortable({ id: dndId });
  const handleShowColorPicker = (visible) => {
    setShowModal(visible);
    setOpenPopover == null ? void 0 : setOpenPopover(
      visible ? ShowPopoverEnum.ALWAYS_SHOW : ShowPopoverEnum.SHOW
    );
  };
  return /* @__PURE__ */ jsxs(ColorItemWrapper, {
    ref: setNodeRef,
    style: {
      opacity: isDragging ? 0.3 : void 0,
      transform: CSS.Transform.toString(transform),
      transition
    },
    children: [
      /* @__PURE__ */ jsx(Button, __spreadProps(__spreadValues(__spreadValues({}, listeners), attributes), {
        style: { cursor: "move", marginRight: 10 },
        icon: /* @__PURE__ */ jsx(HolderOutlined, {
          size: 20,
          style: { pointerEvents: "none" }
        }),
        type: "text",
        ghost: true
      })),
      /* @__PURE__ */ jsx(ColorPickerV2, {
        placeholder: t("Ch\u1ECDn m\xE0u"),
        color,
        onChangeColor: handleChangeColor,
        showModal,
        setShowModal: handleShowColorPicker
      }),
      /* @__PURE__ */ jsx(DeleteIcon, {
        onClick: handleDeleteColor
      })
    ]
  });
};
const BackgroundColorConfig = ({
  propKey,
  formItemProps,
  setOpenPopover
}) => {
  var _a;
  const [colors, setColors] = usePropSeparateDevice(propKey, null, {
    formatter: (val) => (val || []).map((color) => ({
      color,
      dndId: v4()
    })),
    parser: (val) => (val || []).map((dndItem) => dndItem.color)
  });
  const handleDragEnd = ({ active, over }) => {
    if ((active == null ? void 0 : active.id) !== (over == null ? void 0 : over.id)) {
      const _inputs = [...colors];
      const oldIndex = _inputs.findIndex((el) => el.dndId === (active == null ? void 0 : active.id));
      const newIndex = _inputs.findIndex((el) => el.dndId === (over == null ? void 0 : over.id));
      setColors(arrayMove(_inputs, oldIndex, newIndex));
    }
  };
  const handleChangeColor = (index, color) => {
    const tmpColorList = [...colors];
    tmpColorList[index].color = color;
    setColors(tmpColorList);
  };
  const handleDeleteColor = (index) => {
    const tmpColorList = [...colors];
    tmpColorList.splice(index, 1);
    setColors(tmpColorList);
  };
  const handleAddColor = () => {
    setColors([...colors, { dndId: v4(), color: LUCKY_DRAW_DEFAULT_COLOR }]);
  };
  return /* @__PURE__ */ jsx(FormItem, __spreadProps(__spreadValues({}, formItemProps), {
    children: /* @__PURE__ */ jsx(DndContext, {
      modifiers: [
        restrictToVerticalAxis,
        restrictToWindowEdges,
        restrictToFirstScrollableAncestor
      ],
      onDragEnd: handleDragEnd,
      children: /* @__PURE__ */ jsx(SortableContext, {
        items: (_a = colors.map) == null ? void 0 : _a.call(colors, (el) => el.dndId),
        strategy: verticalListSortingStrategy,
        children: /* @__PURE__ */ jsxs("div", {
          children: [
            colors.map((dndItem, index) => /* @__PURE__ */ jsx(DndItem, __spreadValues({
              setOpenPopover,
              handleChangeColor: (color) => handleChangeColor(index, color),
              handleDeleteColor: () => handleDeleteColor(index)
            }, dndItem), index)),
            /* @__PURE__ */ jsxs(AddColorButton, {
              onClick: handleAddColor,
              children: [
                "+ ",
                t("add_color")
              ]
            })
          ]
        })
      })
    })
  }));
};
const ColorItemWrapper = styled.div`
  display: flex;
  margin-bottom: 10px;
  align-items: center;
`;
const DeleteIcon = styled(DeleteOutlined)`
  cursor: pointer;
  font-size: 18px;
  margin: 0 10px;
  color: #82869e;

  &:hover {
    color: var(--text-color);
  }
`;
const AddColorButton = styled.div(
  ({ theme }) => `
  cursor: pointer;
  color: ${theme.colorPrimary} !important;
  font-size: 16px;
  margin-left: 15px;
`
);

export { BackgroundColorConfig };
