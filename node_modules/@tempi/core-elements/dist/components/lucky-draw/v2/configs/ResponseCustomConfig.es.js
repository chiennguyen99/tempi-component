import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../../../i18n.es.js';
import { CalendarEdit16Regular, Delete16Regular } from '@fluentui/react-icons';
import { useProp, useEditor, useNode, InputConfig, deserializePB } from '@tempi/core-editor';
import { Row, Button } from 'antd';
import { v4 } from 'uuid';
import { DEFAULT_POPUP_SUCCESS } from '../../../form/v4/constants.es.js';
import { PROP_KEY } from '../../../../constants/propKey.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const ResponseCustomConfig = () => {
  const customResponseKey = PROP_KEY.joinKey(
    PROP_KEY.Response,
    PROP_KEY.Custom
  );
  const [customResponse = [], setCustomResponse] = useProp(customResponseKey);
  const { nodes, actions, addBlock } = useEditor((state) => {
    return {
      nodes: state.nodes
    };
  });
  const { id: currentNodeId, childNodes } = useNode((node) => {
    return {
      childNodes: node.data.nodes
    };
  });
  const addCustomResponse = () => {
    const newCustomResponse = {
      key: "",
      value: "",
      popup: void 0
    };
    setCustomResponse([...customResponse, newCustomResponse]);
  };
  const removeCustomResponse = (index) => {
    var _a;
    const removedNodeId = (_a = customResponse == null ? void 0 : customResponse[index]) == null ? void 0 : _a.popup;
    if (nodes == null ? void 0 : nodes[removedNodeId])
      actions.delete(removedNodeId);
    const newCustomResponse = [...customResponse];
    newCustomResponse.splice(index, 1);
    setCustomResponse(newCustomResponse);
  };
  const handleEditCustomPopupResponse = async (response, pos) => {
    if (nodes == null ? void 0 : nodes[response == null ? void 0 : response.popup]) {
      actions.selectNode(response.popup);
      return;
    }
    const node = deserializePB(DEFAULT_POPUP_SUCCESS(`popup_custom_${v4()}`));
    const newNode = await addBlock(
      node,
      childNodes.length,
      currentNodeId
    );
    const newCustomResponses = customResponse.map((el, index) => {
      if (index === pos)
        return __spreadProps(__spreadValues({}, el), { popup: newNode.rootNodeId });
      return el;
    });
    setCustomResponse(newCustomResponses);
    actions.selectNode(newNode.rootNodeId);
  };
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      (customResponse || []).map((item, index) => {
        return /* @__PURE__ */ jsxs(Row, {
          style: { marginBottom: 8, width: "100%", gap: 8 },
          justify: "space-between",
          align: "middle",
          children: [
            /* @__PURE__ */ jsx(InputConfig, {
              formItemProps: {
                style: { flex: 1 }
              },
              propKey: PROP_KEY.joinKey(
                customResponseKey,
                `${index}`,
                PROP_KEY.Key
              ),
              inputProps: {
                placeholder: "Key",
                style: { width: "100%" }
              }
            }),
            /* @__PURE__ */ jsx(InputConfig, {
              formItemProps: {
                style: { flex: 1 }
              },
              propKey: PROP_KEY.joinKey(
                customResponseKey,
                `${index}`,
                PROP_KEY.Value
              ),
              inputProps: {
                placeholder: "Value",
                style: { width: "100%" }
              }
            }),
            /* @__PURE__ */ jsx(CalendarEdit16Regular, {
              style: {
                cursor: "pointer",
                marginBottom: 4
              },
              onClick: () => handleEditCustomPopupResponse(item, index)
            }),
            /* @__PURE__ */ jsx(Delete16Regular, {
              style: {
                cursor: "pointer",
                marginBottom: 4
              },
              onClick: () => removeCustomResponse(index)
            })
          ]
        }, index);
      }),
      /* @__PURE__ */ jsx(Row, {
        style: { width: "100%" },
        justify: "center",
        children: /* @__PURE__ */ jsx(Button, {
          shape: "round",
          type: "primary",
          onClick: addCustomResponse,
          children: t("Th\xEAm ph\u1EA3n h\u1ED3i")
        })
      })
    ]
  });
};

export { ResponseCustomConfig };
