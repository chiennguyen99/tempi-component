import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../../../i18n.es.js';
import { UpOutlined, DownOutlined, DeleteOutlined } from '@ant-design/icons';
import styled from '@emotion/styled';
import { Form, Row, Col, Input, Switch, Button, Modal } from 'antd';
import { useState } from 'react';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const FormFieldConfig = ({ fields, onSubmit, requiredFields }) => {
  const [form] = Form.useForm();
  const [show, setShow] = useState(false);
  const [loading, setLoading] = useState(false);
  const handleSubmit = async (fields2) => {
    setLoading(true);
    try {
      await (onSubmit == null ? void 0 : onSubmit(fields2));
    } catch (error) {
    }
    setLoading(false);
    setShow(false);
  };
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(TextButton, {
        onClick: () => setShow(true),
        children: t("Ch\u1EC9nh s\u1EEDa c\u1EA5u h\xECnh form")
      }),
      /* @__PURE__ */ jsxs(StyledModal, {
        title: t("C\u1EA5u h\xECnh form"),
        visible: show,
        onCancel: () => setShow(false),
        cancelButtonProps: { type: "text" },
        okText: t("X\xE1c nh\u1EADn"),
        cancelText: t("common.cancel"),
        onOk: form.submit,
        width: 800,
        zIndex: 1100,
        okButtonProps: { loading },
        children: [
          /* @__PURE__ */ jsxs(Row, {
            style: { marginBottom: 20 },
            children: [
              /* @__PURE__ */ jsx(Col, {
                md: 8,
                style: { marginRight: 16 },
                children: t("T\xEAn tr\u01B0\u1EDDng")
              }),
              /* @__PURE__ */ jsx(Col, {
                md: 8,
                children: t("T\xEAn bi\u1EBFn")
              }),
              /* @__PURE__ */ jsx(Col, {
                md: 3,
                offset: 1,
                children: t("B\u1EAFt bu\u1ED9c nh\u1EADp")
              })
            ]
          }),
          /* @__PURE__ */ jsx(Form, {
            form,
            onFinish: handleSubmit,
            children: /* @__PURE__ */ jsx(Form.List, {
              name: "fields",
              initialValue: fields,
              children: (formFields, { add, remove, move }) => /* @__PURE__ */ jsxs(Fragment, {
                children: [
                  formFields.map((_a) => {
                    var _b = _a, { key, name } = _b, restField = __objRest(_b, ["key", "name"]);
                    return /* @__PURE__ */ jsxs(Row, {
                      children: [
                        /* @__PURE__ */ jsx(Form.Item, __spreadProps(__spreadValues({}, restField), {
                          hidden: true,
                          name: [name, "type"],
                          children: /* @__PURE__ */ jsx(Input, {
                            type: "hidden"
                          })
                        })),
                        /* @__PURE__ */ jsx(Col, {
                          md: 8,
                          style: { marginRight: 16 },
                          children: /* @__PURE__ */ jsx(Form.Item, __spreadProps(__spreadValues({}, restField), {
                            validateFirst: true,
                            name: [name, "label"],
                            rules: [
                              {
                                required: true,
                                message: t("T\xEAn tr\u01B0\u1EDDng kh\xF4ng \u0111\u01B0\u1EE3c b\u1ECF tr\u1ED1ng")
                              }
                            ],
                            style: { marginBottom: 8 },
                            children: /* @__PURE__ */ jsx(Input, {
                              disabled: requiredFields == null ? void 0 : requiredFields.includes(
                                form.getFieldValue(["fields", name, "name"])
                              ),
                              placeholder: t("Nh\u1EADp ti\xEAu \u0111\u1EC1 c\u1EE7a tr\u01B0\u1EDDng")
                            })
                          }))
                        }),
                        /* @__PURE__ */ jsx(Col, {
                          md: 8,
                          children: /* @__PURE__ */ jsx(Form.Item, __spreadProps(__spreadValues({}, restField), {
                            validateFirst: true,
                            name: [name, "name"],
                            rules: [
                              {
                                required: true,
                                message: t("T\xEAn bi\u1EBFn kh\xF4ng \u0111\u01B0\u1EE3c b\u1ECF tr\u1ED1ng")
                              },
                              {
                                validator: (_, value) => {
                                  if (/^[a-zA-Z_$][a-zA-Z_$0-9]*$/.test(value)) {
                                    return Promise.resolve();
                                  } else {
                                    return Promise.reject(
                                      t(
                                        "T\xEAn bi\u1EBFn kh\xF4ng \u0111\u01B0\u1EE3c c\xF3 kho\u1EA3ng c\xE1ch v\xE0 k\xFD t\u1EF1 \u0111\u1EB7c bi\u1EC7t"
                                      )
                                    );
                                  }
                                }
                              }
                            ],
                            style: { marginBottom: 8 },
                            children: /* @__PURE__ */ jsx(Input, {
                              disabled: requiredFields == null ? void 0 : requiredFields.includes(
                                form.getFieldValue(["fields", name, "name"])
                              ),
                              placeholder: t("Nh\u1EADp t\xEAn bi\u1EBFn")
                            })
                          }))
                        }),
                        /* @__PURE__ */ jsx(Col, {
                          md: 3,
                          offset: 1,
                          style: { textAlign: "center" },
                          children: /* @__PURE__ */ jsx(Form.Item, __spreadProps(__spreadValues({}, restField), {
                            name: [name, "required"],
                            valuePropName: "checked",
                            style: { marginBottom: 8 },
                            children: /* @__PURE__ */ jsx(Switch, {
                              disabled: requiredFields == null ? void 0 : requiredFields.includes(
                                form.getFieldValue(["fields", name, "name"])
                              )
                            })
                          }))
                        }),
                        /* @__PURE__ */ jsx(Col, {
                          md: 2,
                          style: { textAlign: "center" },
                          children: /* @__PURE__ */ jsxs("div", {
                            style: { padding: "5px 0" },
                            children: [
                              /* @__PURE__ */ jsx(UpOutlined, {
                                onClick: () => move(name, name - 1),
                                style: {
                                  color: "#A7ABC3",
                                  fontSize: "1.2em",
                                  marginRight: 10,
                                  opacity: name === 0 ? 0.5 : 1,
                                  cursor: name === 0 ? "not-allowed" : "pointer"
                                }
                              }),
                              /* @__PURE__ */ jsx(DownOutlined, {
                                onClick: () => move(name, name + 1),
                                style: {
                                  color: "#A7ABC3",
                                  fontSize: "1.2em",
                                  opacity: name === formFields.length - 1 ? 0.5 : 1,
                                  cursor: name === formFields.length - 1 ? "not-allowed" : "pointer"
                                }
                              })
                            ]
                          })
                        }),
                        /* @__PURE__ */ jsx(Col, {
                          md: 1,
                          style: { textAlign: "center" },
                          children: !(requiredFields == null ? void 0 : requiredFields.includes(
                            form.getFieldValue(["fields", name, "name"])
                          )) && /* @__PURE__ */ jsx(DeleteOutlined, {
                            onClick: () => remove(name),
                            style: {
                              color: "#da4343",
                              fontSize: "1.2em",
                              cursor: "pointer"
                            }
                          })
                        })
                      ]
                    }, key);
                  }),
                  /* @__PURE__ */ jsx(Form.Item, {
                    style: { marginTop: 12 },
                    children: /* @__PURE__ */ jsx(Button, {
                      onClick: () => add({ type: "text", required: false }),
                      style: { padding: "8px 16px", height: 40 },
                      shape: "round",
                      children: t("Th\xEAm tr\u01B0\u1EDDng")
                    })
                  })
                ]
              })
            })
          })
        ]
      })
    ]
  });
};
const StyledModal = styled(Modal)`
  .ant-modal-content {
    border-radius: 8px;
    overflow: hidden;
  }
`;
const TextButton = styled.div`
  color: #1990ff;
  cursor: pointer;
  margin-top: 8px;
  margin-bottom: 8px;
`;

export { FormFieldConfig, FormFieldConfig as default };
