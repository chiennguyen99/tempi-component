'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var styled = require('@emotion/styled');
var React = require('react');
var coreEditor = require('@tempi/core-editor');
var core = require('@dnd-kit/core');
var sortable = require('@dnd-kit/sortable');
var utilities = require('@dnd-kit/utilities');
var i18n = require('../../../../i18n.js');
var constants = require('../constants.js');
var icons = require('@ant-design/icons');
var antd = require('antd');
var type = require('../type.js');
var modifiers = require('@dnd-kit/modifiers');
var uuid = require('uuid');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const DndItem = (props) => {
  const { dndId, color, setOpenPopover, handleChangeColor, handleDeleteColor } = props;
  const [showModal, setShowModal] = React.useState(false);
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging
  } = sortable.useSortable({ id: dndId });
  const handleShowColorPicker = (visible) => {
    setShowModal(visible);
    setOpenPopover == null ? void 0 : setOpenPopover(
      visible ? type.ShowPopoverEnum.ALWAYS_SHOW : type.ShowPopoverEnum.SHOW
    );
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(ColorItemWrapper, {
    ref: setNodeRef,
    style: {
      opacity: isDragging ? 0.3 : void 0,
      transform: utilities.CSS.Transform.toString(transform),
      transition
    },
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(antd.Button, __spreadProps(__spreadValues(__spreadValues({}, listeners), attributes), {
        style: { cursor: "move", marginRight: 10 },
        icon: /* @__PURE__ */ jsxRuntime.jsx(icons.HolderOutlined, {
          size: 20,
          style: { pointerEvents: "none" }
        }),
        type: "text",
        ghost: true
      })),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ColorPickerV2, {
        placeholder: i18n.t("Ch\u1ECDn m\xE0u"),
        color,
        onChangeColor: handleChangeColor,
        showModal,
        setShowModal: handleShowColorPicker
      }),
      /* @__PURE__ */ jsxRuntime.jsx(DeleteIcon, {
        onClick: handleDeleteColor
      })
    ]
  });
};
const BackgroundColorConfig = ({
  propKey,
  formItemProps,
  setOpenPopover
}) => {
  var _a;
  const [colors, setColors] = coreEditor.usePropSeparateDevice(propKey, null, {
    formatter: (val) => (val || []).map((color) => ({
      color,
      dndId: uuid.v4()
    })),
    parser: (val) => (val || []).map((dndItem) => dndItem.color)
  });
  const handleDragEnd = ({ active, over }) => {
    if ((active == null ? void 0 : active.id) !== (over == null ? void 0 : over.id)) {
      const _inputs = [...colors];
      const oldIndex = _inputs.findIndex((el) => el.dndId === (active == null ? void 0 : active.id));
      const newIndex = _inputs.findIndex((el) => el.dndId === (over == null ? void 0 : over.id));
      setColors(sortable.arrayMove(_inputs, oldIndex, newIndex));
    }
  };
  const handleChangeColor = (index, color) => {
    const tmpColorList = [...colors];
    tmpColorList[index].color = color;
    setColors(tmpColorList);
  };
  const handleDeleteColor = (index) => {
    const tmpColorList = [...colors];
    tmpColorList.splice(index, 1);
    setColors(tmpColorList);
  };
  const handleAddColor = () => {
    setColors([...colors, { dndId: uuid.v4(), color: constants.LUCKY_DRAW_DEFAULT_COLOR }]);
  };
  return /* @__PURE__ */ jsxRuntime.jsx(coreEditor.FormItem, __spreadProps(__spreadValues({}, formItemProps), {
    children: /* @__PURE__ */ jsxRuntime.jsx(core.DndContext, {
      modifiers: [
        modifiers.restrictToVerticalAxis,
        modifiers.restrictToWindowEdges,
        modifiers.restrictToFirstScrollableAncestor
      ],
      onDragEnd: handleDragEnd,
      children: /* @__PURE__ */ jsxRuntime.jsx(sortable.SortableContext, {
        items: (_a = colors.map) == null ? void 0 : _a.call(colors, (el) => el.dndId),
        strategy: sortable.verticalListSortingStrategy,
        children: /* @__PURE__ */ jsxRuntime.jsxs("div", {
          children: [
            colors.map((dndItem, index) => /* @__PURE__ */ jsxRuntime.jsx(DndItem, __spreadValues({
              setOpenPopover,
              handleChangeColor: (color) => handleChangeColor(index, color),
              handleDeleteColor: () => handleDeleteColor(index)
            }, dndItem), index)),
            /* @__PURE__ */ jsxRuntime.jsxs(AddColorButton, {
              onClick: handleAddColor,
              children: [
                "+ ",
                i18n.t("add_color")
              ]
            })
          ]
        })
      })
    })
  }));
};
const ColorItemWrapper = styled__default["default"].div`
  display: flex;
  margin-bottom: 10px;
  align-items: center;
`;
const DeleteIcon = styled__default["default"](icons.DeleteOutlined)`
  cursor: pointer;
  font-size: 18px;
  margin: 0 10px;
  color: #82869e;

  &:hover {
    color: var(--text-color);
  }
`;
const AddColorButton = styled__default["default"].div(
  ({ theme }) => `
  cursor: pointer;
  color: ${theme.colorPrimary} !important;
  font-size: 16px;
  margin-left: 15px;
`
);

exports.BackgroundColorConfig = BackgroundColorConfig;
