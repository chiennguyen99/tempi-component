import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import { t } from '../../../../i18n.es.js';
import { ImageRegular } from '@fluentui/react-icons';
import { SubQuickSetting, QuickSettingButton, ImageConfig, InputNumberConfig } from '@tempi/core-editor';
import { Tabs } from 'antd';
import { useState } from 'react';
import { ShowPopoverEnum } from '../type.es.js';
import { BackgroundColorConfig } from './BackgroundColorConfig.es.js';
import { PROP_KEY } from '../../../../constants/propKey.es.js';
import { QuickSettingTabWrapper } from '../../../../core/QuickSettingTabWrapper/QuickSettingTabWrapper.es.js';

const LuckyDrawImageConfig = () => {
  const backgroundColors = PROP_KEY.BackgroundColors;
  const backgroundImagePropKey = PROP_KEY.joinKey(
    PROP_KEY.CanvasConfig,
    PROP_KEY.Background,
    PROP_KEY.Image,
    PROP_KEY.Src
  );
  const backgroundImageWidthPropKey = PROP_KEY.joinKey(
    PROP_KEY.CanvasConfig,
    PROP_KEY.Background,
    PROP_KEY.Image,
    PROP_KEY.GoogleImageParams,
    PROP_KEY.Width
  );
  const backgroundRotatePropKey = PROP_KEY.joinKey(
    PROP_KEY.CanvasConfig,
    PROP_KEY.Background,
    PROP_KEY.Rotate
  );
  const borderImagePropKey = PROP_KEY.joinKey(
    PROP_KEY.CanvasConfig,
    PROP_KEY.Border,
    PROP_KEY.Image,
    PROP_KEY.Src
  );
  const borderImageWidthPropKey = PROP_KEY.joinKey(
    PROP_KEY.CanvasConfig,
    PROP_KEY.Border,
    PROP_KEY.Image,
    PROP_KEY.GoogleImageParams,
    PROP_KEY.Width
  );
  const spinTriggerImagePropKey = PROP_KEY.joinKey(
    PROP_KEY.SpinTrigger,
    PROP_KEY.Image,
    PROP_KEY.Src
  );
  const spinTriggerImageWidthPropKey = PROP_KEY.joinKey(
    PROP_KEY.SpinTrigger,
    PROP_KEY.Image,
    PROP_KEY.GoogleImageParams,
    PROP_KEY.Width
  );
  const rouletteImagePropKey = PROP_KEY.joinKey(
    PROP_KEY.Roulette,
    PROP_KEY.Image,
    PROP_KEY.Src
  );
  const rouletteImageWidthPropKey = PROP_KEY.joinKey(
    PROP_KEY.Roulette,
    PROP_KEY.Image,
    PROP_KEY.GoogleImageParams,
    PROP_KEY.Width
  );
  const rouletteRotatePropKey = PROP_KEY.joinKey(
    PROP_KEY.Roulette,
    PROP_KEY.Rotate
  );
  const [showPopover, setShowPopover] = useState(
    ShowPopoverEnum.HIDE
  );
  const renderContent = () => /* @__PURE__ */ jsxs(QuickSettingTabWrapper, {
    centered: false,
    children: [
      /* @__PURE__ */ jsx(Tabs.TabPane, {
        tab: t("M\xE0u n\u1EC1n"),
        children: /* @__PURE__ */ jsx(BackgroundColorConfig, {
          propKey: backgroundColors,
          setOpenPopover: setShowPopover
        })
      }, "background-color-tab"),
      /* @__PURE__ */ jsxs(Tabs.TabPane, {
        tab: t("\u1EA2nh n\u1EC1n"),
        children: [
          /* @__PURE__ */ jsx(ImageConfig, {
            propKey: backgroundImagePropKey,
            widthPropKey: backgroundImageWidthPropKey,
            layout: "vertical"
          }),
          /* @__PURE__ */ jsx(InputNumberConfig, {
            propKey: backgroundRotatePropKey,
            formItemProps: {
              label: t("Xoay (\u0111\u1ED9)")
            }
          })
        ]
      }, "background-tab"),
      /* @__PURE__ */ jsx(Tabs.TabPane, {
        tab: t("Vi\u1EC1n"),
        children: /* @__PURE__ */ jsx(ImageConfig, {
          propKey: borderImagePropKey,
          widthPropKey: borderImageWidthPropKey
        })
      }, "border-tab"),
      /* @__PURE__ */ jsx(Tabs.TabPane, {
        tab: t("N\xFAt"),
        children: /* @__PURE__ */ jsx(ImageConfig, {
          propKey: spinTriggerImagePropKey,
          widthPropKey: spinTriggerImageWidthPropKey
        })
      }, "button-tab"),
      /* @__PURE__ */ jsxs(Tabs.TabPane, {
        tab: t("M\u0169i t\xEAn"),
        children: [
          /* @__PURE__ */ jsx(ImageConfig, {
            propKey: rouletteImagePropKey,
            widthPropKey: rouletteImageWidthPropKey
          }),
          /* @__PURE__ */ jsx(InputNumberConfig, {
            propKey: rouletteRotatePropKey,
            formItemProps: {
              label: t("Xoay (\u0111\u1ED9)")
            }
          })
        ]
      }, "roulette-tab")
    ]
  });
  return /* @__PURE__ */ jsx(Fragment, {
    children: /* @__PURE__ */ jsx(SubQuickSetting, {
      content: renderContent(),
      overlayInnerStyle: { width: "max-content" },
      open: !!showPopover,
      onOpenChange: (visible) => {
        setShowPopover(
          (prev) => prev === ShowPopoverEnum.ALWAYS_SHOW ? ShowPopoverEnum.ALWAYS_SHOW : visible ? ShowPopoverEnum.SHOW : ShowPopoverEnum.HIDE
        );
      },
      children: /* @__PURE__ */ jsx(QuickSettingButton, {
        tooltip: t("lucky_draw_config"),
        children: /* @__PURE__ */ jsx(ImageRegular, {
          style: { fontSize: 16 }
        })
      })
    })
  });
};

export { LuckyDrawImageConfig };
