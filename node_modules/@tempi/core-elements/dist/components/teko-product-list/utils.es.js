import { discoveryURIMap } from './constants.es.js';
import { Api } from '@tempi/core-renderer';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const transformPrice = (prices) => {
  var _a, _b, _c, _d;
  const latestPrice = (_a = prices == null ? void 0 : prices[0]) == null ? void 0 : _a.latestPrice;
  const supplierRetailPrice = (_b = prices == null ? void 0 : prices[0]) == null ? void 0 : _b.supplierRetailPrice;
  const discountPercent = (_c = prices == null ? void 0 : prices[0]) == null ? void 0 : _c.discountPercent;
  const discountAmount = (_d = prices == null ? void 0 : prices[0]) == null ? void 0 : _d.discountAmount;
  return {
    latestPrice: latestPrice && +latestPrice,
    discountAmount: discountAmount && +discountAmount,
    discountPercent,
    supplierRetailPrice: supplierRetailPrice && +supplierRetailPrice
  };
};
const getDefaultPromotions = (promotions) => {
  var _a;
  const couponProductPromotion = (_a = promotions.filter((promo) => {
    var _a2;
    const isTypeCoupon = promo.type === "coupon";
    const isApplyOnProduct = promo.applyOn === "product";
    const hasCoupon = !!((_a2 = promo == null ? void 0 : promo.condition) == null ? void 0 : _a2.coupon);
    return isTypeCoupon && isApplyOnProduct && hasCoupon;
  })) == null ? void 0 : _a[0];
  const defaultPromotions = promotions.filter((promo) => {
    const isTypeProduct = promo.type === "product";
    const isApplyOnProduct = promo.applyOn === "product";
    const isDefault = promo.isDefault;
    return isTypeProduct && isApplyOnProduct && isDefault;
  });
  return [...defaultPromotions, couponProductPromotion].filter(Boolean);
};
const getSelectionPromotions = (promotions) => {
  return promotions.filter((promo) => {
    const isTypeProduct = promo.type === "product";
    const isApplyOnProduct = promo.applyOn === "product";
    const isDefault = promo.isDefault;
    return isTypeProduct && isApplyOnProduct && !isDefault;
  });
};
const checkGift = (promotions) => {
  const appliedPromotion = [
    ...getDefaultPromotions(promotions),
    ...getSelectionPromotions(promotions)
  ];
  return appliedPromotion.some((el) => {
    var _a;
    return (((_a = el == null ? void 0 : el.benefit) == null ? void 0 : _a.gifts) || []).length;
  });
};
const transformProduct = (product) => {
  const { flashSales, prices, productInfo, promotions, totalAvailable } = product;
  const { canonical, name, sku, imageUrl } = productInfo;
  return __spreadProps(__spreadValues({
    totalAvailable
  }, transformPrice(prices)), {
    url: `/${canonical}`,
    name,
    sku,
    imageUrl,
    hasGift: checkGift(promotions),
    flashSale: flashSales == null ? void 0 : flashSales[0]
  });
};
const cookProducts = (products) => {
  return products.map((el) => transformProduct(el));
};
const convertMenuItemConfigToUrl = (menuItem) => {
  const configs = menuItem.configs || {};
  const sorting = menuItem.sorting || {};
  const urlObject = new URLSearchParams();
  Object.keys(sorting).forEach((k) => urlObject.append(k, sorting[k]));
  const _a = configs, { price, attributes } = _a, restConfig = __objRest(_a, ["price", "attributes"]);
  const { from, to } = price || {};
  if (from) {
    urlObject.set("price_gte", from.toString());
  }
  if (to) {
    urlObject.set("price_lte", to.toString());
  }
  (attributes || []).forEach((attr) => {
    urlObject.set(`attributes.${attr.code}`, attr.optionIds.join(","));
  });
  Object.keys(restConfig).forEach((k) => {
    const val = restConfig[k];
    if (Array.isArray(val) && val.length > 0) {
      urlObject.set(k, val.join(","));
    } else if (typeof val === "number" || typeof val === "string" || typeof val === "boolean") {
      urlObject.set(k, `${val}`);
    }
  });
  return `/search?${urlObject.toString()}`;
};
const transformSearchBody = (menuItem) => {
  const searchBody = {
    sorting: {
      order: "ORDER_BY_UNSPECIFIED",
      sort: "SORT_BY_UNSPECIFIED"
    },
    filter: {}
  };
  if (Object.keys((menuItem == null ? void 0 : menuItem.sorting) || {}).length) {
    searchBody.sorting = __spreadValues(__spreadValues({}, searchBody.sorting), menuItem.sorting);
  }
  if (Object.keys((menuItem == null ? void 0 : menuItem.configs) || {}).length) {
    const _a = menuItem.configs, {
      price,
      providerIds,
      sellerIds,
      attributes,
      hasPromotions
    } = _a, rest = __objRest(_a, [
      "price",
      "providerIds",
      "sellerIds",
      "attributes",
      "hasPromotions"
    ]);
    searchBody.filter = rest;
    if (providerIds == null ? void 0 : providerIds.length) {
      searchBody.filter.providerIds = providerIds.map((el) => el.toString());
    }
    if (sellerIds == null ? void 0 : sellerIds.length) {
      searchBody.filter.sellerIds = sellerIds.map((el) => el.toString());
    }
    if (attributes == null ? void 0 : attributes.length) {
      searchBody.filter.attributes = attributes.map((el) => ({
        code: el.code,
        optionIds: (el.optionIds || []).map((o) => o.toString())
      }));
    }
    if (price == null ? void 0 : price.from) {
      searchBody.filter.priceGte = price.from.toString();
    }
    if (price == null ? void 0 : price.to) {
      searchBody.filter.priceLte = price.to.toString();
    }
    if (hasPromotions) {
      searchBody.filter.hasPromotions = !!hasPromotions;
    }
  }
  return searchBody;
};
const fetchProducts = async (env, options, baseMenuItem) => {
  var _a, _b;
  const { menuItemId, terminal, locationCode, size = 10, page = 1 } = options;
  const hasTerminal = (terminal == null ? void 0 : terminal.code) || (terminal == null ? void 0 : terminal.id);
  const terminalCode = (terminal == null ? void 0 : terminal.code) || void 0;
  const terminalId = (terminal == null ? void 0 : terminal.id) || void 0;
  const discoveryURI = discoveryURIMap[env];
  if (!discoveryURI) {
    throw "Please set discoveryURI!";
  }
  if (!menuItemId || !hasTerminal) {
    return;
  }
  const client = new Api("");
  let menuItem = baseMenuItem;
  if (!menuItem) {
    menuItem = await client.get(`${discoveryURI}/v1/menu-item/${menuItemId}`).then((res2) => {
      var _a2;
      return (_a2 = res2.data) == null ? void 0 : _a2.result;
    });
  }
  if (!menuItem)
    return {
      products: []
    };
  const res = await client.post(`${discoveryURI}/v1/search`, __spreadProps(__spreadValues({}, transformSearchBody(menuItem)), {
    terminalCode,
    terminalId,
    location: locationCode,
    pagination: {
      pageNumber: page,
      itemsPerPage: size
    }
  }));
  const products = ((_a = res.data.result) == null ? void 0 : _a.products) || [];
  const totalPages = ((_b = res.data.pagination) == null ? void 0 : _b.totalPages) || 0;
  return {
    products,
    hasNextPage: totalPages > page,
    menuItem
  };
};
const fetchProductsByCollection = async (env, options) => {
  var _a, _b;
  const { slug, terminal, locationCode, size = 10, page = 1 } = options;
  const hasTerminal = (terminal == null ? void 0 : terminal.code) || (terminal == null ? void 0 : terminal.id);
  const terminalCode = (terminal == null ? void 0 : terminal.code) || void 0;
  const terminalId = (terminal == null ? void 0 : terminal.id) || void 0;
  const discoveryURI = discoveryURIMap[env];
  if (!discoveryURI) {
    throw "Please set discoveryURI!";
  }
  if (!slug || !hasTerminal) {
    return;
  }
  const client = new Api("");
  const res = await client.post(`${discoveryURI}/v1/search`, {
    slug,
    terminalCode,
    terminalId,
    location: locationCode,
    pagination: {
      pageNumber: page,
      itemsPerPage: size
    }
  });
  const products = ((_a = res.data.result) == null ? void 0 : _a.products) || [];
  const totalPages = ((_b = res.data.pagination) == null ? void 0 : _b.totalPages) || 0;
  return {
    products,
    hasNextPage: totalPages > page
  };
};

export { convertMenuItemConfigToUrl, cookProducts, fetchProducts, fetchProductsByCollection, transformSearchBody };
