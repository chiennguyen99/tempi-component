import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { t } from '../../../../i18n.es.js';
import styled from '@emotion/styled';
import { useStore, getStyle } from '@tempi/core-renderer';
import React__default, { useState, useEffect } from 'react';
import { convertOptionSliderV2ToV1 } from '../../../slider/v2/utils.es.js';
import { useProductList } from '../../context.es.js';
import { convertMenuItemConfigToUrl, fetchProductsByCollection, cookProducts, fetchProducts } from '../../utils.es.js';
import { PbCol } from '../../../col/ui.es.js';
import { NoProductsFound } from '../NoProductsFound/NoProductsFound.es.js';
import { ProductItem } from '../ProductItem/ProductItem.es.js';
import { Spin } from '../../../../core/Spin/Spin.es.js';
import { ButtonV2 } from '../../../button/v2/ui.es.js';
import { PbRow } from '../../../row/ui.es.js';
import { DSSlider } from '../../../../core/DsSlider/Slider.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const ProductListContent = React__default.forwardRef((props, ref) => {
  const {
    commonStyle,
    isEditorMode = false,
    editorTerminal,
    type,
    responsiveSettings,
    carouselSettings,
    limit,
    menuItemId,
    slug,
    itemSettings,
    button,
    actionButton
  } = props;
  const { terminalCode, terminalId, env } = useStore();
  const terminal = isEditorMode ? typeof editorTerminal === "number" ? { id: editorTerminal } : { code: editorTerminal } : { code: terminalCode, id: terminalId };
  const hasTerminal = (terminal == null ? void 0 : terminal.code) || (terminal == null ? void 0 : terminal.id);
  const { products, setProducts, setShowBlock } = useProductList();
  const [hasNextPage, setHasNextPage] = useState(false);
  const [menuItem, setMenuItem] = useState();
  const [page, setPage] = useState(1);
  const [loading, setLoading] = useState(false);
  useEffect(() => {
    const getProducts = async () => {
      if (hasTerminal && (menuItemId || slug) && actionButton) {
        try {
          setLoading(true);
          if (slug) {
            const { products: products2, hasNextPage: hasNextPage2 } = await fetchProductsByCollection(
              env,
              {
                slug,
                terminal,
                size: limit
              }
            );
            setHasNextPage(hasNextPage2);
            setProducts(cookProducts(products2));
            if (products2.length === 0) {
              setShowBlock(false);
            }
          } else {
            const { products: products2, hasNextPage: hasNextPage2, menuItem: menuItem2 } = await fetchProducts(
              env,
              {
                menuItemId: +menuItemId,
                terminal,
                size: limit
              }
            );
            setHasNextPage(hasNextPage2);
            setProducts(cookProducts(products2));
            setMenuItem(menuItem2);
            if (products2.length === 0) {
              setShowBlock(false);
            }
          }
        } finally {
          setLoading(false);
        }
      } else {
        setProducts([]);
        setShowBlock(false);
      }
    };
    setPage(1);
    getProducts();
  }, [menuItemId, limit, JSON.stringify(terminal), actionButton, slug]);
  useEffect(() => {
    const getNextProducts = async () => {
      if (hasTerminal && (menuItemId || slug) && actionButton) {
        try {
          setLoading(true);
          if (slug) {
            const { products: products2, hasNextPage: hasNextPage2 } = await fetchProductsByCollection(
              env,
              {
                slug,
                terminal,
                size: limit,
                page
              }
            );
            setHasNextPage(hasNextPage2);
            setProducts((prev) => [...prev, ...cookProducts(products2)]);
          } else {
            const { products: products2, hasNextPage: hasNextPage2 } = await fetchProducts(
              env,
              {
                menuItemId: +menuItemId,
                terminal,
                size: limit,
                page
              },
              menuItem
            );
            setHasNextPage(hasNextPage2);
            setProducts((prev) => [...prev, ...cookProducts(products2)]);
          }
        } finally {
          setLoading(false);
        }
      } else {
        setProducts([]);
        setShowBlock(false);
      }
    };
    if (page > 1) {
      getNextProducts();
    }
  }, [page]);
  const renderContent = () => {
    if (isEditorMode) {
      if (!hasTerminal || !(menuItemId || slug)) {
        return /* @__PURE__ */ jsx(NoProductsFound, {
          text: t("Vui l\xF2ng ch\u1ECDn \u0111i\u1EC3m b\xE1n v\xE0 nh\u1EADp trang danh s\xE1ch s\u1EA3n ph\u1EA9m")
        });
      }
      if (hasTerminal && (menuItemId || slug) && (products == null ? void 0 : products.length) === 0) {
        return /* @__PURE__ */ jsx(NoProductsFound, {
          text: t("Kh\xF4ng t\xECm th\u1EA5y s\u1EA3n ph\u1EA9m n\xE0o")
        });
      }
      return /* @__PURE__ */ jsx(StyledPbRow, {
        responsiveSettings,
        children: products.map((product, index) => /* @__PURE__ */ jsx(StyledPbCol, {
          responsiveSettings,
          children: /* @__PURE__ */ jsx(ProductItem, __spreadValues({
            product,
            isEditorMode
          }, itemSettings))
        }, index))
      });
    }
    return /* @__PURE__ */ jsx(StyledPbRow, {
      responsiveSettings,
      children: products.map((product, index) => /* @__PURE__ */ jsx(StyledPbCol, {
        responsiveSettings,
        children: /* @__PURE__ */ jsx(ProductItem, __spreadValues({
          product,
          isEditorMode
        }, itemSettings))
      }, index))
    });
  };
  const renderContentCarousel = () => {
    if (isEditorMode) {
      if (!hasTerminal || !(menuItemId || slug)) {
        return /* @__PURE__ */ jsx(NoProductsFound, {
          text: t("Vui l\xF2ng ch\u1ECDn \u0111i\u1EC3m b\xE1n v\xE0 nh\u1EADp trang danh s\xE1ch s\u1EA3n ph\u1EA9m")
        });
      }
      if (hasTerminal && (menuItemId || slug) && (products == null ? void 0 : products.length) === 0) {
        return /* @__PURE__ */ jsx(NoProductsFound, {
          text: t("Kh\xF4ng t\xECm th\u1EA5y s\u1EA3n ph\u1EA9m n\xE0o")
        });
      }
      if (props.isMobile) {
        return /* @__PURE__ */ jsx(DSSlider, __spreadProps(__spreadValues({}, convertOptionSliderV2ToV1(carouselSettings.mobile)), {
          children: products.map((product, index) => /* @__PURE__ */ jsx(ProductItem, __spreadValues({
            product,
            isEditorMode
          }, itemSettings), index))
        }));
      } else {
        return /* @__PURE__ */ jsx(DSSlider, __spreadProps(__spreadValues({}, convertOptionSliderV2ToV1(carouselSettings.desktop)), {
          children: products.map((product, index) => /* @__PURE__ */ jsx(ProductItem, __spreadValues({
            product,
            isEditorMode
          }, itemSettings), index))
        }));
      }
    }
    return /* @__PURE__ */ jsxs(Fragment, {
      children: [
        /* @__PURE__ */ jsx(StyledCarouselMobile, {
          children: /* @__PURE__ */ jsx(DSSlider, __spreadProps(__spreadValues({}, convertOptionSliderV2ToV1(carouselSettings.mobile)), {
            children: (products || []).map((product, index) => /* @__PURE__ */ jsx(ProductItem, __spreadValues({
              product,
              isEditorMode
            }, itemSettings), index))
          }))
        }),
        /* @__PURE__ */ jsx(StyledCarouselDesktop, {
          children: /* @__PURE__ */ jsx(DSSlider, __spreadProps(__spreadValues({}, convertOptionSliderV2ToV1(carouselSettings.desktop)), {
            children: (products || []).map((product, index) => /* @__PURE__ */ jsx(ProductItem, __spreadValues({
              product,
              isEditorMode
            }, itemSettings), index))
          }))
        })
      ]
    });
  };
  const showCTAButton = actionButton === "openSearch" || actionButton === "loadMore" && hasNextPage;
  const event = actionButton === "openSearch" && !!(menuItem || slug) ? {
    eventType: "link",
    link: {
      href: slug ? slug : convertMenuItemConfigToUrl(menuItem),
      openNewTab: true,
      nofollow: false
    }
  } : void 0;
  const onClickBtn = actionButton === "loadMore" && !!(menuItem || slug) ? () => {
    setPage((prev) => prev + 1);
  } : void 0;
  if (type === "carousel")
    return /* @__PURE__ */ jsx(StyledProductListContent, {
      commonStyle,
      ref,
      children: /* @__PURE__ */ jsxs(Spin, {
        spinning: loading,
        style: { minHeight: 250 },
        children: [
          renderContentCarousel(),
          showCTAButton && /* @__PURE__ */ jsx(ButtonV2, __spreadProps(__spreadValues({
            isEditingMode: isEditorMode
          }, button), {
            event,
            onClick: onClickBtn
          }))
        ]
      })
    });
  return /* @__PURE__ */ jsx(StyledProductListContent, {
    commonStyle,
    ref,
    children: /* @__PURE__ */ jsxs(Spin, {
      spinning: loading,
      style: { minHeight: 250 },
      children: [
        renderContent(),
        showCTAButton && /* @__PURE__ */ jsx(ButtonV2, __spreadProps(__spreadValues({
          isEditingMode: isEditorMode
        }, button), {
          event,
          onClick: onClickBtn
        }))
      ]
    })
  });
});
const mobileCssRow = ({ responsiveSettings }) => {
  var _a;
  const gap = ((_a = responsiveSettings == null ? void 0 : responsiveSettings.mobile) == null ? void 0 : _a.gap) || 4;
  return `
    gap: ${gap}px;
  `;
};
const desktopCssRow = ({ responsiveSettings }) => {
  var _a;
  const gap = ((_a = responsiveSettings == null ? void 0 : responsiveSettings.desktop) == null ? void 0 : _a.gap) || 4;
  return `
    gap: ${gap}px;
  `;
};
const StyledPbRow = styled(PbRow)((props) => {
  const { isMobile, commonStyle } = props;
  return [
    `
      ${getStyle(commonStyle)}
      display: flex;
      flex-wrap: wrap;
      place-content: flex-start;
      min-height: 150px;
    `,
    isMobile && mobileCssRow,
    isMobile === false && desktopCssRow,
    isMobile === void 0 && `
        @media (max-width: 767px) {
          ${mobileCssRow(props)}
        }
        @media (min-width: 767px) {
          ${desktopCssRow(props)}
        }
      `
  ];
});
const mobileCssCol = ({ responsiveSettings }) => {
  var _a, _b;
  const gap = ((_a = responsiveSettings == null ? void 0 : responsiveSettings.mobile) == null ? void 0 : _a.gap) || 4;
  const itemsPerRow = ((_b = responsiveSettings == null ? void 0 : responsiveSettings.mobile) == null ? void 0 : _b.itemsPerRow) || 2;
  return `
    width: calc(${100 / itemsPerRow}% - ${gap}px);
  `;
};
const desktopCssCol = ({ responsiveSettings }) => {
  var _a, _b;
  const gap = ((_a = responsiveSettings == null ? void 0 : responsiveSettings.desktop) == null ? void 0 : _a.gap) || 4;
  const itemsPerRow = ((_b = responsiveSettings == null ? void 0 : responsiveSettings.desktop) == null ? void 0 : _b.itemsPerRow) || 5;
  return `
  width: calc(${100 / itemsPerRow}% - ${gap}px);
  `;
};
const StyledPbCol = styled(PbCol)(
  (props) => {
    const { isMobile } = props;
    return [
      isMobile && mobileCssCol,
      isMobile === false && desktopCssCol,
      isMobile === void 0 && `
        @media (max-width: 767px) {
          ${mobileCssCol(props)}
        }
        @media (min-width: 767px) {
          ${desktopCssCol(props)}
        }
      `
    ];
  }
);
const StyledCarouselMobile = styled.div`
  @media (min-width: 767px) {
    display: none;
  }
`;
const StyledCarouselDesktop = styled.div`
  @media (max-width: 767px) {
    display: none;
  }
`;
const StyledProductListContent = styled.div(
  ({ commonStyle }) => `
  ${getStyle(commonStyle)}
`
);
ProductListContent.displayName = "TekoProductListContentV1";

export { ProductListContent };
