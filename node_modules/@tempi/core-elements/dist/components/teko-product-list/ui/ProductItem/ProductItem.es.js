import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { t } from '../../../../i18n.es.js';
import styled from '@emotion/styled';
import { Tag } from 'antd';
import { ProductPrice } from './ProductPrice.es.js';
import { Paragraph } from '../../../paragraph/ui.es.js';
import { Image } from '../../../image/ui.es.js';

var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const ProductItem = (_a) => {
  var _b = _a, {
    product,
    isEditorMode
  } = _b, rest = __objRest(_b, [
    "product",
    "isEditorMode"
  ]);
  const statusLabel = product.totalAvailable === 0 ? /* @__PURE__ */ jsx(StyledTag, {
    color: "#55acee",
    children: t("H\u1EBFt h\xE0ng")
  }) : null;
  const renderProduct = /* @__PURE__ */ jsx(Wrapper, {
    children: /* @__PURE__ */ jsxs(ProductCardContent, {
      children: [
        /* @__PURE__ */ jsx(ProductVisualWrapper, {
          children: /* @__PURE__ */ jsx("div", {
            style: { position: "relative", paddingBottom: "100%" },
            children: /* @__PURE__ */ jsx(StyledImage, {
              commonStyle: {
                objectFit: "contain",
                height: "100%",
                width: "100%"
              },
              src: product.imageUrl,
              width: 300,
              showPlaceholder: false
            })
          })
        }),
        /* @__PURE__ */ jsx(ProductNameWrapper, {
          children: /* @__PURE__ */ jsx(ProductName, {
            children: /* @__PURE__ */ jsxs(Fragment, {
              children: [
                statusLabel,
                product.name
              ]
            })
          })
        }),
        /* @__PURE__ */ jsx(ProductSaleInfo, {
          children: /* @__PURE__ */ jsx(ProductPrice, {
            latestPrice: product.latestPrice,
            supplierRetailPrice: product.supplierRetailPrice,
            textColor: rest.priceColor
          })
        })
      ]
    })
  });
  if (product.url && !isEditorMode)
    return /* @__PURE__ */ jsx(Fragment, {
      children: /* @__PURE__ */ jsx("a", {
        href: product.url,
        target: "_blank",
        children: renderProduct
      })
    });
  return renderProduct;
};
const Wrapper = styled.div`
  position: relative;
  width: 100%;
  padding: 16px;
  display: flex;
  flex-direction: column;
  background-color: transparent;
`;
const ProductCardContent = styled.div`
  position: relative;
  flex: 1 0 auto;
  margin-bottom: 8px;
`;
const ProductVisualWrapper = styled.div`
  position: relative;
  margin-bottom: 4px;
`;
const ProductNameWrapper = styled.div`
  height: 2rem;
`;
const ProductName = styled(Paragraph)`
  font-size: 12px;
  line-height: 16px;
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
  color: #434657;
  font-weight: 400;
`;
const ProductSaleInfo = styled.div`
  position: relative;
  margin-top: 4px;
`;
const StyledTag = styled(Tag)`
  line-height: 16px;
  margin-inline-end: 4px;
`;
const StyledImage = styled(Image)`
  display: inline-block;
  overflow: hidden;
  position: absolute;
  height: 100%;
  inset: 0;
`;

export { ProductItem };
