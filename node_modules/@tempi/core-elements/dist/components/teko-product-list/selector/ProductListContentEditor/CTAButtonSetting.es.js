import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../../../i18n.es.js';
import styled from '@emotion/styled';
import { useProp, SelectConfig, InputConfig, FormItem, InputNumberConfig, AlignmentConfig, ColorPickerConfig, SwitchToShow } from '@tempi/core-editor';
import { UnitEnum } from '@tempi/core-renderer';
import { Divider } from 'antd';
import { useState, useEffect } from 'react';
import { DEFAULT_BUTTON } from '../../../button/v2/constants.es.js';
import { PROP_KEY } from '../../../../constants/propKey.es.js';
import { ButtonV2 } from '../../../button/v2/ui.es.js';
import { IconSettings } from '../../../../configs/IconSettings/IconSettings.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const CTAButtonSetting = () => {
  const [layout] = useProp(PROP_KEY.joinKey(PROP_KEY.Type));
  const optionCTAActions = layout === "grid" ? [
    {
      label: t("Xem th\xEAm"),
      value: "loadMore"
    },
    {
      label: t("M\u1EDF trang t\xECm ki\u1EBFm"),
      value: "openSearch"
    }
  ] : [
    {
      label: t("M\u1EDF trang t\xECm ki\u1EBFm"),
      value: "openSearch"
    }
  ];
  const iconPropKey = PROP_KEY.joinKey(
    PROP_KEY.Button,
    PROP_KEY.IconConfig,
    PROP_KEY.Icon
  );
  const alignPropKey = PROP_KEY.joinKey(
    PROP_KEY.Button,
    PROP_KEY.CommonStyle,
    PROP_KEY.JustifyContent
  );
  const widthPropKey = PROP_KEY.joinKey(
    PROP_KEY.Button,
    PROP_KEY.ButtonStyle,
    PROP_KEY.Width
  );
  const heightPropKey = PROP_KEY.joinKey(
    PROP_KEY.Button,
    PROP_KEY.ButtonStyle,
    PROP_KEY.Height
  );
  const bgPropKey = PROP_KEY.joinKey(
    PROP_KEY.Button,
    PROP_KEY.ButtonStyle,
    PROP_KEY.BackgroundColor
  );
  const [icon, setIcon] = useProp(iconPropKey);
  const [buttonStyle, setButtonStyle] = useProp(
    PROP_KEY.joinKey(PROP_KEY.Button, PROP_KEY.ButtonStyle)
  );
  const iconName = icon == null ? void 0 : icon.name;
  const [showIconConfig, setShowIconConfig] = useState(!!icon);
  const chooseButttonStyle = (style) => {
    setButtonStyle(__spreadValues({ buttonStyle }, style));
  };
  const resetIcon = () => {
    setIcon(void 0);
  };
  useEffect(() => {
    setShowIconConfig(!!iconName);
  }, [iconName]);
  useEffect(() => {
    if (!showIconConfig)
      resetIcon();
  }, [showIconConfig]);
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(SelectConfig, {
        formItemProps: {
          label: t("S\u1EF1 ki\u1EC7n"),
          layout: "vertical"
        },
        selectProps: {
          allowClear: true,
          style: {
            width: "100%"
          }
        },
        options: optionCTAActions,
        propKey: PROP_KEY.joinKey(PROP_KEY.ActionButton)
      }),
      /* @__PURE__ */ jsx(InputConfig, {
        formItemProps: {
          label: t("Nh\xE3n"),
          layout: "vertical"
        },
        inputProps: {
          style: {
            width: "100%"
          }
        },
        propKey: PROP_KEY.joinKey(PROP_KEY.Button, PROP_KEY.Text)
      }),
      /* @__PURE__ */ jsx(FormItem, {
        label: t("Ki\u1EC3u"),
        layout: "vertical",
        children: /* @__PURE__ */ jsxs(ButtonStyleWrapper, {
          children: [
            /* @__PURE__ */ jsx(ButtonV2, __spreadProps(__spreadValues({
              onClick: () => chooseButttonStyle(DEFAULT_BUTTON.primary.buttonStyle)
            }, DEFAULT_BUTTON.primary), {
              commonStyle: {
                justifyContent: "center"
              },
              text: "Primary"
            })),
            /* @__PURE__ */ jsx(ButtonV2, __spreadProps(__spreadValues({
              onClick: () => chooseButttonStyle(DEFAULT_BUTTON.primaryRound.buttonStyle)
            }, DEFAULT_BUTTON.primaryRound), {
              commonStyle: {
                justifyContent: "center"
              },
              text: "Primary Round"
            })),
            /* @__PURE__ */ jsx(ButtonV2, __spreadProps(__spreadValues({
              onClick: () => chooseButttonStyle(DEFAULT_BUTTON.outline.buttonStyle)
            }, DEFAULT_BUTTON.outline), {
              commonStyle: {
                justifyContent: "center"
              },
              text: "Outline"
            })),
            /* @__PURE__ */ jsx(ButtonV2, __spreadProps(__spreadValues({
              onClick: () => chooseButttonStyle(DEFAULT_BUTTON.outlineRound.buttonStyle)
            }, DEFAULT_BUTTON.outlineRound), {
              commonStyle: {
                justifyContent: "center"
              },
              text: "Outline Round"
            })),
            /* @__PURE__ */ jsx(ButtonV2, __spreadProps(__spreadValues({
              onClick: () => chooseButttonStyle(DEFAULT_BUTTON.link.buttonStyle)
            }, DEFAULT_BUTTON.link), {
              commonStyle: {
                justifyContent: "center"
              },
              text: "Link"
            }))
          ]
        })
      }),
      /* @__PURE__ */ jsx(Divider, {
        style: {
          margin: "16px 0"
        }
      }),
      /* @__PURE__ */ jsx(InputNumberConfig, {
        formItemProps: {
          label: t("Chi\u1EC1u r\u1ED9ng")
        },
        unitProps: { defaultValue: UnitEnum.pixel },
        propKey: widthPropKey
      }),
      /* @__PURE__ */ jsx(InputNumberConfig, {
        formItemProps: {
          label: t("Chi\u1EC1u cao")
        },
        unitProps: { defaultValue: UnitEnum.pixel },
        propKey: heightPropKey
      }),
      /* @__PURE__ */ jsx(InputNumberConfig, {
        formItemProps: {
          label: t("Bo g\xF3c")
        },
        unitProps: { defaultValue: UnitEnum.pixel },
        propKey: PROP_KEY.joinKey(
          PROP_KEY.Button,
          PROP_KEY.ButtonStyle,
          PROP_KEY.BorderRadius
        )
      }),
      /* @__PURE__ */ jsx(AlignmentConfig, {
        propKey: alignPropKey,
        buttonGroupProps: {
          listAlignment: ["flex-start", "center", "flex-end"]
        },
        formItemProps: {
          label: t("C\u0103n ch\u1EC9nh")
        }
      }),
      /* @__PURE__ */ jsx(ColorPickerConfig, {
        formItemProps: {
          label: t("N\u1EC1n")
        },
        propKey: bgPropKey
      }),
      /* @__PURE__ */ jsx(ColorPickerConfig, {
        formItemProps: {
          label: t("N\u1EC1n Di chu\u1ED9t")
        },
        propKey: PROP_KEY.joinKey(
          PROP_KEY.Button,
          PROP_KEY.ButtonStyle,
          PROP_KEY.HoverBackgroundColor
        )
      }),
      /* @__PURE__ */ jsx(ColorPickerConfig, {
        formItemProps: {
          label: t("Ch\u1EEF")
        },
        propKey: PROP_KEY.joinKey(
          PROP_KEY.Button,
          PROP_KEY.ButtonStyle,
          PROP_KEY.Color
        )
      }),
      /* @__PURE__ */ jsx(ColorPickerConfig, {
        formItemProps: {
          label: t("Ch\u1EEF Di chu\u1ED9t")
        },
        propKey: PROP_KEY.joinKey(
          PROP_KEY.Button,
          PROP_KEY.ButtonStyle,
          PROP_KEY.HoverColor
        )
      }),
      /* @__PURE__ */ jsx(Divider, {
        style: {
          margin: "16px 0"
        }
      }),
      /* @__PURE__ */ jsxs(SwitchToShow, {
        formItemProps: { label: t("Hi\u1EC3n th\u1ECB bi\u1EC3u t\u01B0\u1EE3ng") },
        show: showIconConfig,
        setShow: setShowIconConfig,
        children: [
          /* @__PURE__ */ jsx(IconSettings, {
            propKey: iconPropKey
          }),
          /* @__PURE__ */ jsx(AlignmentConfig, {
            formItemProps: {
              label: t("V\u1ECB tr\xED")
            },
            buttonGroupProps: {
              listAlignment: ["left", "right"]
            },
            propKey: PROP_KEY.joinKey(
              PROP_KEY.Button,
              PROP_KEY.IconConfig,
              PROP_KEY.Position
            )
          }),
          /* @__PURE__ */ jsx(InputNumberConfig, {
            propKey: PROP_KEY.joinKey(
              PROP_KEY.Button,
              PROP_KEY.IconConfig,
              PROP_KEY.Spacing
            ),
            formItemProps: {
              label: t("Kho\u1EA3ng c\xE1ch")
            },
            unitProps: { defaultValue: UnitEnum.pixel }
          })
        ]
      })
    ]
  });
};
const ButtonStyleWrapper = styled.div`
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-gap: 8px;
`;

export { CTAButtonSetting };
