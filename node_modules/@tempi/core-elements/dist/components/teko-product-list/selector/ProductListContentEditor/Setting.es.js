import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../../../i18n.es.js';
import { CheckOutlined } from '@ant-design/icons';
import { useProp, FormItem, InputConfig, InputNumberConfig, SelectConfig, ColorPickerConfig } from '@tempi/core-editor';
import { Radio, Input, Button, Collapse } from 'antd';
import { useState, useEffect } from 'react';
import { CTAButtonSetting } from './CTAButtonSetting.es.js';
import { PROP_KEY } from '../../../../constants/propKey.es.js';
import { ContentWrapper } from '../../../../core/ContentWrapper/ContentWrapper.es.js';
import { SwiperSettingV2 } from '../../../../configs/Swiper/SwiperSettingV2.es.js';

const { Panel } = Collapse;
const Setting = () => {
  var _a;
  const [layout] = useProp(PROP_KEY.Type);
  const [actionButton, setActionButton] = useProp(
    PROP_KEY.joinKey(PROP_KEY.ActionButton)
  );
  const [menuItemId, setMenuItemId] = useProp(
    PROP_KEY.joinKey(PROP_KEY.MenuItemId)
  );
  const [input, setInput] = useState("");
  const [tab, setTab] = useState(0);
  useEffect(() => {
    setInput(menuItemId);
  }, [menuItemId]);
  useEffect(() => {
    if (layout === "carousel" && actionButton === "loadMore") {
      setActionButton(void 0);
    }
  }, [layout]);
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsxs(ContentWrapper, {
        children: [
          /* @__PURE__ */ jsxs(Radio.Group, {
            style: { display: "flex", marginBottom: 12 },
            value: tab,
            onChange: (e) => setTab(e.target.value),
            children: [
              /* @__PURE__ */ jsx(Radio.Button, {
                style: { flex: 1 },
                value: 0,
                children: t("C\u1EA5u h\xECnh")
              }),
              /* @__PURE__ */ jsx(Radio.Button, {
                style: { flex: 1 },
                value: 1,
                children: "CTA"
              })
            ]
          }),
          tab === 0 && /* @__PURE__ */ jsxs(Fragment, {
            children: [
              menuItemId && /* @__PURE__ */ jsx(FormItem, {
                label: "Menu item ID",
                layout: "vertical",
                children: /* @__PURE__ */ jsx(Input.Search, {
                  value: input,
                  onChange: (e) => setInput(e.target.value),
                  onSearch: () => setMenuItemId(input),
                  enterButton: /* @__PURE__ */ jsx(Button, {
                    disabled: (input || "") === (((_a = menuItemId == null ? void 0 : menuItemId.toString) == null ? void 0 : _a.call(menuItemId)) || ""),
                    type: "primary",
                    icon: /* @__PURE__ */ jsx(CheckOutlined, {}),
                    children: t("\xC1p d\u1EE5ng")
                  })
                })
              }),
              /* @__PURE__ */ jsx(InputConfig, {
                formItemProps: {
                  layout: "vertical",
                  label: t("Slug trang danh s\xE1ch s\u1EA3n ph\u1EA9m")
                },
                propKey: PROP_KEY.Slug,
                inputProps: {
                  style: { width: "100%" },
                  placeholder: "/c/khuyen-mai"
                }
              }),
              /* @__PURE__ */ jsx(InputNumberConfig, {
                propKey: PROP_KEY.Limit,
                formItemProps: {
                  label: t("S\u1ED1 l\u01B0\u1EE3ng s\u1EA3n ph\u1EA9m")
                },
                inputNumberProps: {
                  max: 999
                }
              }),
              /* @__PURE__ */ jsx(SelectConfig, {
                propKey: PROP_KEY.Type,
                options: [
                  {
                    label: "Grid",
                    value: "grid"
                  },
                  {
                    label: "Carousel",
                    value: "carousel"
                  }
                ],
                formItemProps: {
                  label: t("B\u1ED1 c\u1EE5c")
                }
              })
            ]
          }),
          tab === 1 && /* @__PURE__ */ jsx(CTAButtonSetting, {})
        ]
      }),
      tab === 0 && /* @__PURE__ */ jsxs(Fragment, {
        children: [
          /* @__PURE__ */ jsx(Collapse, {
            defaultActiveKey: [],
            expandIconPosition: "end",
            bordered: false,
            children: /* @__PURE__ */ jsx(Panel, {
              header: t("C\xE0i \u0111\u1EB7t c\xE1c ph\u1EA7n t\u1EED"),
              children: /* @__PURE__ */ jsx(ColorPickerConfig, {
                formItemProps: {
                  label: t("M\xE0u hi\u1EC3n th\u1ECB gi\xE1")
                },
                propKey: PROP_KEY.joinKey(
                  PROP_KEY.ItemSettings,
                  PROP_KEY.PriceColor
                )
              })
            }, "ITEM")
          }),
          layout === "grid" && /* @__PURE__ */ jsxs(Collapse, {
            defaultActiveKey: [],
            expandIconPosition: "end",
            bordered: false,
            children: [
              /* @__PURE__ */ jsxs(Panel, {
                header: t("Hi\u1EC3n th\u1ECB tr\xEAn m\xE1y t\xEDnh"),
                children: [
                  /* @__PURE__ */ jsx(InputNumberConfig, {
                    propKey: PROP_KEY.joinKey(
                      PROP_KEY.ResponsiveSettings,
                      PROP_KEY.Desktop,
                      PROP_KEY.ItemsPerRow
                    ),
                    formItemProps: {
                      label: t("S\u1ED1 ph\u1EA7n t\u1EED 1 h\xE0ng")
                    },
                    inputNumberProps: {
                      max: 10
                    }
                  }),
                  /* @__PURE__ */ jsx(InputNumberConfig, {
                    propKey: PROP_KEY.joinKey(
                      PROP_KEY.ResponsiveSettings,
                      PROP_KEY.Desktop,
                      PROP_KEY.Gap
                    ),
                    formItemProps: {
                      label: t("Kho\u1EA3ng c\xE1ch (px)")
                    }
                  })
                ]
              }, "DESKTOP"),
              /* @__PURE__ */ jsxs(Panel, {
                header: t("Hi\u1EC3n th\u1ECB tr\xEAn \u0111i\u1EC7n tho\u1EA1i"),
                children: [
                  /* @__PURE__ */ jsx(InputNumberConfig, {
                    propKey: PROP_KEY.joinKey(
                      PROP_KEY.ResponsiveSettings,
                      PROP_KEY.Mobile,
                      PROP_KEY.ItemsPerRow
                    ),
                    formItemProps: {
                      label: t("S\u1ED1 ph\u1EA7n t\u1EED 1 h\xE0ng")
                    },
                    inputNumberProps: {
                      max: 10
                    }
                  }),
                  /* @__PURE__ */ jsx(InputNumberConfig, {
                    propKey: PROP_KEY.joinKey(
                      PROP_KEY.ResponsiveSettings,
                      PROP_KEY.Mobile,
                      PROP_KEY.Gap
                    ),
                    formItemProps: {
                      label: t("Kho\u1EA3ng c\xE1ch (px)")
                    }
                  })
                ]
              }, "MOBILE")
            ]
          }),
          layout === "carousel" && /* @__PURE__ */ jsxs(Collapse, {
            defaultActiveKey: [],
            expandIconPosition: "end",
            children: [
              /* @__PURE__ */ jsx(Panel, {
                header: t("Hi\u1EC3n th\u1ECB tr\xEAn m\xE1y t\xEDnh"),
                children: /* @__PURE__ */ jsx(SwiperSettingV2, {
                  propKey: PROP_KEY.joinKey(
                    PROP_KEY.CarouselSettings,
                    PROP_KEY.Desktop
                  )
                })
              }, "DESKTOP"),
              /* @__PURE__ */ jsx(Panel, {
                header: t("Hi\u1EC3n th\u1ECB tr\xEAn \u0111i\u1EC7n tho\u1EA1i"),
                children: /* @__PURE__ */ jsx(SwiperSettingV2, {
                  propKey: PROP_KEY.joinKey(
                    PROP_KEY.CarouselSettings,
                    PROP_KEY.Mobile
                  )
                })
              }, "MOBILE")
            ]
          })
        ]
      })
    ]
  });
};

export { Setting };
