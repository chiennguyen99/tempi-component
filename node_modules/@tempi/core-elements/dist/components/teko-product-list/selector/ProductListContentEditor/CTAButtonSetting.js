'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../../../i18n.js');
var styled = require('@emotion/styled');
var coreEditor = require('@tempi/core-editor');
var coreRenderer = require('@tempi/core-renderer');
var antd = require('antd');
var React = require('react');
var constants = require('../../../button/v2/constants.js');
var propKey = require('../../../../constants/propKey.js');
var ui = require('../../../button/v2/ui.js');
var IconSettings = require('../../../../configs/IconSettings/IconSettings.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const CTAButtonSetting = () => {
  const [layout] = coreEditor.useProp(propKey.PROP_KEY.joinKey(propKey.PROP_KEY.Type));
  const optionCTAActions = layout === "grid" ? [
    {
      label: i18n.t("Xem th\xEAm"),
      value: "loadMore"
    },
    {
      label: i18n.t("M\u1EDF trang t\xECm ki\u1EBFm"),
      value: "openSearch"
    }
  ] : [
    {
      label: i18n.t("M\u1EDF trang t\xECm ki\u1EBFm"),
      value: "openSearch"
    }
  ];
  const iconPropKey = propKey.PROP_KEY.joinKey(
    propKey.PROP_KEY.Button,
    propKey.PROP_KEY.IconConfig,
    propKey.PROP_KEY.Icon
  );
  const alignPropKey = propKey.PROP_KEY.joinKey(
    propKey.PROP_KEY.Button,
    propKey.PROP_KEY.CommonStyle,
    propKey.PROP_KEY.JustifyContent
  );
  const widthPropKey = propKey.PROP_KEY.joinKey(
    propKey.PROP_KEY.Button,
    propKey.PROP_KEY.ButtonStyle,
    propKey.PROP_KEY.Width
  );
  const heightPropKey = propKey.PROP_KEY.joinKey(
    propKey.PROP_KEY.Button,
    propKey.PROP_KEY.ButtonStyle,
    propKey.PROP_KEY.Height
  );
  const bgPropKey = propKey.PROP_KEY.joinKey(
    propKey.PROP_KEY.Button,
    propKey.PROP_KEY.ButtonStyle,
    propKey.PROP_KEY.BackgroundColor
  );
  const [icon, setIcon] = coreEditor.useProp(iconPropKey);
  const [buttonStyle, setButtonStyle] = coreEditor.useProp(
    propKey.PROP_KEY.joinKey(propKey.PROP_KEY.Button, propKey.PROP_KEY.ButtonStyle)
  );
  const iconName = icon == null ? void 0 : icon.name;
  const [showIconConfig, setShowIconConfig] = React.useState(!!icon);
  const chooseButttonStyle = (style) => {
    setButtonStyle(__spreadValues({ buttonStyle }, style));
  };
  const resetIcon = () => {
    setIcon(void 0);
  };
  React.useEffect(() => {
    setShowIconConfig(!!iconName);
  }, [iconName]);
  React.useEffect(() => {
    if (!showIconConfig)
      resetIcon();
  }, [showIconConfig]);
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
        formItemProps: {
          label: i18n.t("S\u1EF1 ki\u1EC7n"),
          layout: "vertical"
        },
        selectProps: {
          allowClear: true,
          style: {
            width: "100%"
          }
        },
        options: optionCTAActions,
        propKey: propKey.PROP_KEY.joinKey(propKey.PROP_KEY.ActionButton)
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputConfig, {
        formItemProps: {
          label: i18n.t("Nh\xE3n"),
          layout: "vertical"
        },
        inputProps: {
          style: {
            width: "100%"
          }
        },
        propKey: propKey.PROP_KEY.joinKey(propKey.PROP_KEY.Button, propKey.PROP_KEY.Text)
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.FormItem, {
        label: i18n.t("Ki\u1EC3u"),
        layout: "vertical",
        children: /* @__PURE__ */ jsxRuntime.jsxs(ButtonStyleWrapper, {
          children: [
            /* @__PURE__ */ jsxRuntime.jsx(ui.ButtonV2, __spreadProps(__spreadValues({
              onClick: () => chooseButttonStyle(constants.DEFAULT_BUTTON.primary.buttonStyle)
            }, constants.DEFAULT_BUTTON.primary), {
              commonStyle: {
                justifyContent: "center"
              },
              text: "Primary"
            })),
            /* @__PURE__ */ jsxRuntime.jsx(ui.ButtonV2, __spreadProps(__spreadValues({
              onClick: () => chooseButttonStyle(constants.DEFAULT_BUTTON.primaryRound.buttonStyle)
            }, constants.DEFAULT_BUTTON.primaryRound), {
              commonStyle: {
                justifyContent: "center"
              },
              text: "Primary Round"
            })),
            /* @__PURE__ */ jsxRuntime.jsx(ui.ButtonV2, __spreadProps(__spreadValues({
              onClick: () => chooseButttonStyle(constants.DEFAULT_BUTTON.outline.buttonStyle)
            }, constants.DEFAULT_BUTTON.outline), {
              commonStyle: {
                justifyContent: "center"
              },
              text: "Outline"
            })),
            /* @__PURE__ */ jsxRuntime.jsx(ui.ButtonV2, __spreadProps(__spreadValues({
              onClick: () => chooseButttonStyle(constants.DEFAULT_BUTTON.outlineRound.buttonStyle)
            }, constants.DEFAULT_BUTTON.outlineRound), {
              commonStyle: {
                justifyContent: "center"
              },
              text: "Outline Round"
            })),
            /* @__PURE__ */ jsxRuntime.jsx(ui.ButtonV2, __spreadProps(__spreadValues({
              onClick: () => chooseButttonStyle(constants.DEFAULT_BUTTON.link.buttonStyle)
            }, constants.DEFAULT_BUTTON.link), {
              commonStyle: {
                justifyContent: "center"
              },
              text: "Link"
            }))
          ]
        })
      }),
      /* @__PURE__ */ jsxRuntime.jsx(antd.Divider, {
        style: {
          margin: "16px 0"
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
        formItemProps: {
          label: i18n.t("Chi\u1EC1u r\u1ED9ng")
        },
        unitProps: { defaultValue: coreRenderer.UnitEnum.pixel },
        propKey: widthPropKey
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
        formItemProps: {
          label: i18n.t("Chi\u1EC1u cao")
        },
        unitProps: { defaultValue: coreRenderer.UnitEnum.pixel },
        propKey: heightPropKey
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
        formItemProps: {
          label: i18n.t("Bo g\xF3c")
        },
        unitProps: { defaultValue: coreRenderer.UnitEnum.pixel },
        propKey: propKey.PROP_KEY.joinKey(
          propKey.PROP_KEY.Button,
          propKey.PROP_KEY.ButtonStyle,
          propKey.PROP_KEY.BorderRadius
        )
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.AlignmentConfig, {
        propKey: alignPropKey,
        buttonGroupProps: {
          listAlignment: ["flex-start", "center", "flex-end"]
        },
        formItemProps: {
          label: i18n.t("C\u0103n ch\u1EC9nh")
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ColorPickerConfig, {
        formItemProps: {
          label: i18n.t("N\u1EC1n")
        },
        propKey: bgPropKey
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ColorPickerConfig, {
        formItemProps: {
          label: i18n.t("N\u1EC1n Di chu\u1ED9t")
        },
        propKey: propKey.PROP_KEY.joinKey(
          propKey.PROP_KEY.Button,
          propKey.PROP_KEY.ButtonStyle,
          propKey.PROP_KEY.HoverBackgroundColor
        )
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ColorPickerConfig, {
        formItemProps: {
          label: i18n.t("Ch\u1EEF")
        },
        propKey: propKey.PROP_KEY.joinKey(
          propKey.PROP_KEY.Button,
          propKey.PROP_KEY.ButtonStyle,
          propKey.PROP_KEY.Color
        )
      }),
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.ColorPickerConfig, {
        formItemProps: {
          label: i18n.t("Ch\u1EEF Di chu\u1ED9t")
        },
        propKey: propKey.PROP_KEY.joinKey(
          propKey.PROP_KEY.Button,
          propKey.PROP_KEY.ButtonStyle,
          propKey.PROP_KEY.HoverColor
        )
      }),
      /* @__PURE__ */ jsxRuntime.jsx(antd.Divider, {
        style: {
          margin: "16px 0"
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsxs(coreEditor.SwitchToShow, {
        formItemProps: { label: i18n.t("Hi\u1EC3n th\u1ECB bi\u1EC3u t\u01B0\u1EE3ng") },
        show: showIconConfig,
        setShow: setShowIconConfig,
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(IconSettings.IconSettings, {
            propKey: iconPropKey
          }),
          /* @__PURE__ */ jsxRuntime.jsx(coreEditor.AlignmentConfig, {
            formItemProps: {
              label: i18n.t("V\u1ECB tr\xED")
            },
            buttonGroupProps: {
              listAlignment: ["left", "right"]
            },
            propKey: propKey.PROP_KEY.joinKey(
              propKey.PROP_KEY.Button,
              propKey.PROP_KEY.IconConfig,
              propKey.PROP_KEY.Position
            )
          }),
          /* @__PURE__ */ jsxRuntime.jsx(coreEditor.InputNumberConfig, {
            propKey: propKey.PROP_KEY.joinKey(
              propKey.PROP_KEY.Button,
              propKey.PROP_KEY.IconConfig,
              propKey.PROP_KEY.Spacing
            ),
            formItemProps: {
              label: i18n.t("Kho\u1EA3ng c\xE1ch")
            },
            unitProps: { defaultValue: coreRenderer.UnitEnum.pixel }
          })
        ]
      })
    ]
  });
};
const ButtonStyleWrapper = styled__default["default"].div`
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-gap: 8px;
`;

exports.CTAButtonSetting = CTAButtonSetting;
