'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var coreEditor = require('@tempi/core-editor');
var reactIcons = require('@fluentui/react-icons');

const AlignmentQuickSetting = ({
  propKey,
  listAlignment = ["left", "center", "right"],
  separateDevice
}) => {
  const [alignment, setAlignment] = coreEditor.usePropSeparateDevice(
    propKey,
    separateDevice
  );
  const renderIcon = () => {
    switch (alignment) {
      case "left":
        return /* @__PURE__ */ jsxRuntime.jsx(reactIcons.TextAlignLeft16Regular, {});
      case "flex-start":
        return /* @__PURE__ */ jsxRuntime.jsx(reactIcons.TextAlignLeft16Regular, {});
      case "center":
        return /* @__PURE__ */ jsxRuntime.jsx(reactIcons.TextAlignCenter16Regular, {});
      case "right":
        return /* @__PURE__ */ jsxRuntime.jsx(reactIcons.TextAlignRight16Regular, {});
      case "flex-end":
        return /* @__PURE__ */ jsxRuntime.jsx(reactIcons.TextAlignRight16Regular, {});
      case "justify":
        return /* @__PURE__ */ jsxRuntime.jsx(reactIcons.TextAlignJustify20Regular, {
          style: { width: 16, height: 16 }
        });
      case "space-between":
        return /* @__PURE__ */ jsxRuntime.jsx(reactIcons.TextAlignJustify20Regular, {
          style: { width: 16, height: 16 }
        });
      default:
        return /* @__PURE__ */ jsxRuntime.jsx(reactIcons.TextAlignJustify20Regular, {
          style: { width: 16, height: 16 }
        });
    }
  };
  const handleClickIcon = () => {
    if (!listAlignment.length)
      return;
    if (!alignment || !listAlignment.includes(alignment)) {
      setAlignment(listAlignment[0]);
      return;
    }
    const currentPos = listAlignment.findIndex((val) => val === alignment);
    if (currentPos < 0)
      return;
    setAlignment(listAlignment[(currentPos + 1) % listAlignment.length]);
  };
  return /* @__PURE__ */ jsxRuntime.jsx(coreEditor.QuickSettingButton, {
    tooltip: i18n.t("C\u0103n chi\u0309nh"),
    onClick: handleClickIcon,
    children: renderIcon()
  });
};

exports.AlignmentQuickSetting = AlignmentQuickSetting;
