import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { t } from '../../i18n.es.js';
import { Icon } from '@tempi/icons';
import React__default, { useState } from 'react';
import { useProp, SubQuickSetting, QuickSettingButton, InputNumberConfig, ColorPickerConfig } from '@tempi/core-editor';
import { UnitEnum } from '@tempi/core-renderer';
import { Popover, Typography } from 'antd';
import styled from '@emotion/styled';
import { StarOutlined, PlusSquareOutlined } from '@ant-design/icons';
import { getPropsIcon } from '../../utils/getPropsIcon.es.js';
import { IconPopup } from '../../core/IconPopup/IconPopup.es.js';
import { PROP_KEY } from '../../constants/propKey.es.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const CustomizeIconDialog = ({
  propKey
}) => {
  const [showIconPopup, setShowIconPopup] = useState(false);
  const toggleIconPopup = () => setShowIconPopup(!showIconPopup);
  const [iconName, setIconName] = useProp(
    PROP_KEY.joinKey(propKey, PROP_KEY.Name)
  );
  const content = () => {
    return /* @__PURE__ */ jsxs(Fragment, {
      children: [
        /* @__PURE__ */ jsxs(IconWrapper, {
          children: [
            /* @__PURE__ */ jsx(StyledIcon, {
              onClick: toggleIconPopup,
              children: iconName ? /* @__PURE__ */ jsx(Fragment, {
                children: React__default.createElement(Icon, __spreadValues({
                  name: iconName
                }, getPropsIcon({
                  size: 24
                })))
              }) : /* @__PURE__ */ jsx(PlusSquareOutlined, {
                style: {
                  fontSize: 24
                }
              })
            }),
            /* @__PURE__ */ jsx(Popover, {
              zIndex: 1066,
              open: showIconPopup,
              content: /* @__PURE__ */ jsx("div", {
                style: {
                  width: 400,
                  padding: 15
                },
                children: /* @__PURE__ */ jsx(IconPopup, {
                  onClose: toggleIconPopup,
                  iconName,
                  onSelectIcon: (name) => {
                    setIconName(name);
                    setShowIconPopup(false);
                  }
                })
              }),
              children: /* @__PURE__ */ jsx(Typography.Link, {
                onClick: toggleIconPopup,
                style: { color: "var(--text-color)" },
                children: t("Ch\u1ECDn bi\u1EC3u t\u01B0\u1EE3ng")
              })
            })
          ]
        }),
        /* @__PURE__ */ jsx(InputNumberConfig, {
          propKey: PROP_KEY.joinKey(propKey, PROP_KEY.Size),
          formItemProps: {
            label: t("K\xEDch th\u01B0\u1EDBc")
          },
          unitProps: { defaultValue: UnitEnum.pixel }
        }),
        /* @__PURE__ */ jsx(ColorPickerConfig, {
          propKey: PROP_KEY.joinKey(propKey, PROP_KEY.Color),
          placeholder: t("Ch\u1ECDn m\xE0u"),
          formItemProps: {
            label: t("M\xE0u")
          },
          gradientPicker: true
        })
      ]
    });
  };
  return /* @__PURE__ */ jsx(SubQuickSetting, {
    content,
    trigger: "click",
    placement: "bottom",
    children: /* @__PURE__ */ jsx(QuickSettingButton, {
      tooltip: t("T\xF9y ch\u1EC9nh bi\u1EC3u t\u01B0\u1EE3ng"),
      children: /* @__PURE__ */ jsx(StarOutlined, {
        style: {
          fontSize: "16px"
        }
      })
    })
  });
};
const StyledIcon = styled.div`
  margin-right: 8px;
  cursor: pointer;
`;
const IconWrapper = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 8px;
`;

export { CustomizeIconDialog };
