'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var icons = require('@ant-design/icons');
var coreEditor = require('@tempi/core-editor');
var constants = require('./constants.js');

const CellsActionQuickSetting = ({ editor, type }) => {
  const renderIcon = () => {
    switch (type) {
      case constants.TABLE_ACTION.ADD_COLUMN_BEFORE:
        return /* @__PURE__ */ jsxRuntime.jsx(icons.InsertRowLeftOutlined, {});
      case constants.TABLE_ACTION.ADD_COLUMN_AFTER:
        return /* @__PURE__ */ jsxRuntime.jsx(icons.InsertRowRightOutlined, {});
      case constants.TABLE_ACTION.ADD_ROW_ABOVE:
        return /* @__PURE__ */ jsxRuntime.jsx(icons.InsertRowAboveOutlined, {});
      case constants.TABLE_ACTION.ADD_ROW_BELOW:
        return /* @__PURE__ */ jsxRuntime.jsx(icons.InsertRowBelowOutlined, {});
      case constants.TABLE_ACTION.DELETE_COLUMN:
        return /* @__PURE__ */ jsxRuntime.jsx(icons.DeleteColumnOutlined, {});
      case constants.TABLE_ACTION.DELETE_ROW:
        return /* @__PURE__ */ jsxRuntime.jsx(icons.DeleteRowOutlined, {});
      case constants.TABLE_ACTION.MERGE_OR_SPLIT:
        return /* @__PURE__ */ jsxRuntime.jsx(icons.SplitCellsOutlined, {});
      case constants.TABLE_ACTION.TOGGLE_HEADER_ROW:
        return /* @__PURE__ */ jsxRuntime.jsx(icons.EditOutlined, {});
      default:
        return null;
    }
  };
  const handleAction = () => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D, _E, _F, _G, _H, _I, _J, _K, _L, _M, _N;
    switch (type) {
      case constants.TABLE_ACTION.ADD_COLUMN_BEFORE:
        (_e = (_c = (_a = editor == null ? void 0 : editor.chain) == null ? void 0 : (_b = _a.call(editor)).focus) == null ? void 0 : (_d = _c.call(_b)).addColumnBefore) == null ? void 0 : _e.call(_d).run();
        return;
      case constants.TABLE_ACTION.ADD_COLUMN_AFTER:
        (_j = (_h = (_f = editor.chain) == null ? void 0 : (_g = _f.call(editor)).focus) == null ? void 0 : (_i = _h.call(_g)).addColumnAfter) == null ? void 0 : _j.call(_i).run();
        return;
      case constants.TABLE_ACTION.ADD_ROW_ABOVE:
        (_o = (_m = (_k = editor.chain) == null ? void 0 : (_l = _k.call(editor)).focus) == null ? void 0 : (_n = _m.call(_l)).addRowBefore) == null ? void 0 : _o.call(_n).run();
        return;
      case constants.TABLE_ACTION.ADD_ROW_BELOW:
        (_t = (_r = (_p = editor.chain) == null ? void 0 : (_q = _p.call(editor)).focus) == null ? void 0 : (_s = _r.call(_q)).addRowAfter) == null ? void 0 : _t.call(_s).run();
        return;
      case constants.TABLE_ACTION.DELETE_COLUMN:
        (_y = (_w = (_u = editor.chain) == null ? void 0 : (_v = _u.call(editor)).focus) == null ? void 0 : (_x = _w.call(_v)).deleteColumn) == null ? void 0 : _y.call(_x).run();
        return;
      case constants.TABLE_ACTION.DELETE_ROW:
        (_D = (_B = (_z = editor.chain) == null ? void 0 : (_A = _z.call(editor)).focus) == null ? void 0 : (_C = _B.call(_A)).deleteRow) == null ? void 0 : _D.call(_C).run();
        return;
      case constants.TABLE_ACTION.MERGE_OR_SPLIT:
        (_I = (_G = (_E = editor.chain) == null ? void 0 : (_F = _E.call(editor)).focus) == null ? void 0 : (_H = _G.call(_F)).mergeOrSplit) == null ? void 0 : _I.call(_H).run();
        return;
      case constants.TABLE_ACTION.TOGGLE_HEADER_ROW:
        (_N = (_L = (_J = editor.chain) == null ? void 0 : (_K = _J.call(editor)).focus) == null ? void 0 : (_M = _L.call(_K)).toggleHeaderRow) == null ? void 0 : _N.call(_M).run();
        return;
      default:
        return null;
    }
  };
  const getToolTip = () => {
    switch (type) {
      case constants.TABLE_ACTION.ADD_COLUMN_BEFORE:
        return i18n.t("Th\xEAm c\u1ED9t v\xE0o b\xEAn tr\xE1i");
      case constants.TABLE_ACTION.ADD_COLUMN_AFTER:
        return i18n.t("Th\xEAm c\u1ED9t v\xE0o b\xEAn ph\u1EA3i");
      case constants.TABLE_ACTION.ADD_ROW_ABOVE:
        return i18n.t("Th\xEAm h\xE0ng v\xE0o ph\xEDa tr\xEAn");
      case constants.TABLE_ACTION.ADD_ROW_BELOW:
        return i18n.t("Th\xEAm h\xE0ng v\xE0o ph\xEDa d\u01B0\u1EDBi");
      case constants.TABLE_ACTION.DELETE_COLUMN:
        return i18n.t("X\xF3a c\u1ED9t");
      case constants.TABLE_ACTION.DELETE_ROW:
        return i18n.t("X\xF3a d\xF2ng");
      case constants.TABLE_ACTION.MERGE_OR_SPLIT:
        return i18n.t("H\u1EE3p nh\u1EA5t / chia c\xE1c \xF4");
      case constants.TABLE_ACTION.TOGGLE_HEADER_ROW:
        return i18n.t("T\xF9y ch\u1EC9nh ti\xEAu \u0111\u1EC1");
      default:
        return null;
    }
  };
  return /* @__PURE__ */ jsxRuntime.jsx(coreEditor.QuickSettingButton, {
    tooltip: getToolTip(),
    onClick: handleAction,
    children: renderIcon()
  });
};

exports.CellsActionQuickSetting = CellsActionQuickSetting;
