'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var i18n = require('../../i18n.js');
var Col = require('../../core/Grid/Col.js');

const layoutIcons = [
  "OneColumnOutlined",
  "TwoColumnsOutlined",
  "ThreeColumnsOutlined",
  "FourColumnsOutlined",
  "FiveColumnsOutlined",
  "SixColumnsOutlined"
];
const getLayoutStringByColumnNumber = (n) => {
  if (n < 1)
    return "";
  const number = Col.floorPercentage(100 / n);
  let line = "";
  for (let i = 1; i <= n; i++) {
    line += `${number}%`;
    if (i < n) {
      line += " + ";
    }
  }
  return line;
};
const dissectStringIntoPercentages = (str) => {
  return str.split("+").map((percentage) => Number(percentage.replace(/%/g, "").trim()));
};
const validateLayoutSyntax = (_, value) => {
  if (value) {
    const pattern = /^(\d+(\.\d+)?%(\s*\+\s*\d+(\.\d+)?%)+|\d+(\.\d+)?)%(\s*\+\s*\d+(\.\d+)?%)*\s*$/;
    if (!pattern.test(value)) {
      return Promise.reject(
        i18n.t("Vui l\xF2ng nh\u1EADp \u0111\xFAng c\xFA ph\xE1p (v\xED d\u1EE5: 50% + 50% )")
      );
    }
    const percentages = dissectStringIntoPercentages(value);
    for (const percentage of percentages) {
      if (percentage > 100) {
        return Promise.reject(`Chi\u1EC1u r\u1ED9ng c\u1EE7a m\u1ED9t c\u1ED9t kh\xF4ng \u0111\u01B0\u1EE3c l\u1EDBn h\u01A1n 100%`);
      }
      if (percentage < 8) {
        return Promise.reject(`Chi\u1EC1u r\u1ED9ng c\u1EE7a m\u1ED9t c\u1ED9t kh\xF4ng \u0111\u01B0\u1EE3c nh\u1ECF h\u01A1n 8%`);
      }
    }
    const sum = Math.floor(percentages.reduce((a, b) => a + b, 0));
    if (sum > 100) {
      return Promise.reject(`T\u1ED5ng chi\u1EC1u r\u1ED9ng c\xE1c c\u1ED9t kh\xF4ng \u0111\u01B0\u1EE3c l\u1EDBn h\u01A1n 100%`);
    }
  }
  return Promise.resolve();
};

exports.dissectStringIntoPercentages = dissectStringIntoPercentages;
exports.getLayoutStringByColumnNumber = getLayoutStringByColumnNumber;
exports.layoutIcons = layoutIcons;
exports.validateLayoutSyntax = validateLayoutSyntax;
