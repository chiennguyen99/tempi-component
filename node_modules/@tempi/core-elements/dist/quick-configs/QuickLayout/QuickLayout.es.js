import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../i18n.es.js';
import { TextColumnThreeRegular } from '@fluentui/react-icons';
import { useEditor, useNode, QuickSettingButton, floorPercentage, Element } from '@tempi/core-editor';
import { Form, Modal, Input, Typography } from 'antd';
import { useState, useEffect } from 'react';
import { AntdCustomIcon } from '@tempi/icons-dev';
import { layoutIcons, validateLayoutSyntax, dissectStringIntoPercentages, getLayoutStringByColumnNumber } from './layoutUtils.es.js';
import set from 'lodash.set';
import { ColEditor } from '../../components/col/selector.es.js';
import { PROP_KEY } from '../../constants/propKey.es.js';

const QuickLayout = () => {
  const [open, setOpen] = useState(false);
  const [form] = Form.useForm();
  const { actions, query } = useEditor();
  const { id, columnIds } = useNode((node) => ({
    columnIds: node.data.nodes
  }));
  const getCurrentLayoutString = () => {
    const currentLayout = columnIds.map((colId) => {
      var _a, _b, _c;
      const colProps = (_b = (_a = query.node(colId).get()) == null ? void 0 : _a.data) == null ? void 0 : _b.props;
      return (_c = colProps == null ? void 0 : colProps.md) == null ? void 0 : _c.flex;
    });
    if (currentLayout.length === 0) {
      return "";
    }
    if (currentLayout.length === 1) {
      return `${currentLayout[0]}`;
    }
    return currentLayout.join(" + ");
  };
  const updateColumnWidth = (colId, percentage) => {
    actions.history.throttle().setProp(colId, (props) => {
      set(props, PROP_KEY.Md, `${floorPercentage(percentage)}%`);
    });
  };
  const addColumnWithSpecificWidthPercentage = (widthPercentage) => {
    const element = /* @__PURE__ */ jsx(Element, {
      canvas: true,
      is: ColEditor,
      md: { flex: `${floorPercentage(widthPercentage)}%` },
      xs: { flex: "100%" }
    });
    const newColNodeTree = query.parseReactElement(element).toNodeTree();
    actions.addNodeTree(newColNodeTree, id);
  };
  const onFinish = ({ layout }) => {
    const newRowLayout = dissectStringIntoPercentages(layout);
    if (newRowLayout.length !== columnIds.length) {
      if (newRowLayout.length < columnIds.length) {
        newRowLayout.forEach((percentage, index) => {
          updateColumnWidth(columnIds[index], percentage);
        });
        const columnIdsToDelete = columnIds.slice(newRowLayout.length);
        columnIdsToDelete.forEach((colId) => {
          actions.history.throttle().delete(colId);
        });
      }
      newRowLayout.forEach((percentage, index) => {
        updateColumnWidth(columnIds[index], percentage);
      });
      const newColWidthPercentage = newRowLayout.slice(columnIds.length);
      const numberOfNewColumns = newRowLayout.length - columnIds.length;
      for (let i = 0; i < numberOfNewColumns; i++) {
        addColumnWithSpecificWidthPercentage(newColWidthPercentage[i]);
      }
    } else {
      newRowLayout.forEach((percentage, index) => {
        updateColumnWidth(columnIds[index], percentage);
      });
    }
    const sumPercentage = newRowLayout.reduce((a, b) => a + b, 0);
    if (sumPercentage < 100) {
      const blankPercentage = 100 - sumPercentage;
      if (blankPercentage >= 8) {
        addColumnWithSpecificWidthPercentage(blankPercentage);
      }
    }
    setOpen(false);
  };
  const onSelectLayout = (layout) => {
    form.setFieldsValue({
      layout: getLayoutStringByColumnNumber(layout)
    });
  };
  useEffect(() => {
    form.setFieldsValue({
      layout: getCurrentLayoutString()
    });
  }, [columnIds, form]);
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(QuickSettingButton, {
        tooltip: t("Ch\u1EC9nh s\u1EEDa b\u1ED1 c\u1EE5c h\xE0ng"),
        onClick: () => setOpen(true),
        children: /* @__PURE__ */ jsx(TextColumnThreeRegular, {
          style: { fontSize: 16 }
        })
      }),
      /* @__PURE__ */ jsx(Modal, {
        open,
        title: t("C\xE0i \u0111\u1EB7t nhanh b\u1ED1 c\u1EE5c h\xE0ng"),
        onOk: form.submit,
        okText: t("C\u1EADp nh\u1EADt"),
        cancelText: t("\u0110\xF3ng"),
        onCancel: () => {
          setOpen(false);
          form.setFieldsValue({
            layout: getCurrentLayoutString()
          });
        },
        children: /* @__PURE__ */ jsxs(Form, {
          onFinish,
          layout: "vertical",
          form,
          children: [
            /* @__PURE__ */ jsx("div", {
              style: { margin: "1em 0 0 0" },
              children: t("Ch\u1ECDn nhanh b\u1ED1 c\u1EE5c")
            }),
            /* @__PURE__ */ jsx("div", {
              children: layoutIcons.map((icon, index) => /* @__PURE__ */ jsx("span", {
                style: {
                  cursor: "pointer",
                  fontSize: 36,
                  marginRight: "0.2em"
                },
                title: t("{{var0}} c\u1ED9t", { var0: index + 1 }),
                onClick: () => onSelectLayout(index + 1),
                children: /* @__PURE__ */ jsx(AntdCustomIcon, {
                  name: icon
                })
              }, index))
            }),
            /* @__PURE__ */ jsx(Form.Item, {
              label: t("S\u1EEDa b\u1ED1 c\u1EE5c th\u1EE7 c\xF4ng"),
              name: "layout",
              rules: [
                { required: true, message: t("Vui l\xF2ng nh\u1EADp ho\u1EB7c ch\u1ECDn b\u1ED1 c\u1EE5c") },
                { validator: validateLayoutSyntax }
              ],
              children: /* @__PURE__ */ jsx(Input, {})
            }),
            /* @__PURE__ */ jsx(Typography.Text, {
              type: "secondary",
              children: t(
                "Thay \u0111\u1ED5i b\u1ED1 c\u1EE5c h\xE0ng th\u1EE7 c\xF4ng b\u1EB1ng c\xE1ch nh\u1EADp chi\u1EC1u r\u1ED9ng c\u1EE7a t\u1EEBng c\u1ED9t theo d\u1EA1ng %"
              )
            })
          ]
        })
      })
    ]
  });
};

export { QuickLayout };
