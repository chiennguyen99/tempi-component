'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var React = require('react');
var coreEditor = require('@tempi/core-editor');
var reactIcons = require('@fluentui/react-icons');
var TextInputConfig = require('../../configs/TextConfig/TextInputConfig.js');
var antd = require('antd');
var reactFrameComponent = require('react-frame-component');

const TextLinkQuickSetting = ({
  editor
}) => {
  const [visible, setVisible] = React.useState(false);
  const [eventType, setEventType] = React.useState();
  const { enableTekoTracking } = coreEditor.useBuilder();
  const { menu } = coreEditor.useBuilder();
  const { document: frameDocument } = reactFrameComponent.useFrame();
  const link = (editor == null ? void 0 : editor.getAttributes("link")) || {};
  const websiteMenuItemIds = React.useMemo(() => {
    var _a;
    return (_a = menu == null ? void 0 : menu.map) == null ? void 0 : _a.call(menu, (item) => ({
      label: item.name,
      value: item.id
    }));
  }, [JSON.stringify(menu)]);
  React.useEffect(() => {
    if (!visible)
      return;
    if (link == null ? void 0 : link.pageId) {
      setEventType("openPageOfWebsite");
      return;
    }
    setEventType("link");
  }, [visible]);
  const getActionTypeOption = () => {
    const actionTypeOptions = [
      {
        label: i18n.t("\u0110\u1ECBa ch\u1EC9 web"),
        value: "link"
      }
    ];
    if (websiteMenuItemIds == null ? void 0 : websiteMenuItemIds.length) {
      actionTypeOptions.unshift({
        label: i18n.t("M\u1EDF trang trong website c\u1EE7a b\u1EA1n"),
        value: "openPageOfWebsite"
      });
    }
    return actionTypeOptions;
  };
  const handleSetLink = (link2) => {
    var _a, _b;
    (_b = (_a = editor == null ? void 0 : editor.commands) == null ? void 0 : _a.executeCmd) == null ? void 0 : _b.call(
      _a,
      ({ commands }) => commands.setCustomLink(link2)
    );
  };
  const handleUnsetlink = () => {
    var _a, _b;
    (_b = (_a = editor == null ? void 0 : editor.commands) == null ? void 0 : _a.executeCmd) == null ? void 0 : _b.call(_a, ({ commands }) => commands.unsetLink());
  };
  const onChangeEventType = (event) => {
    setEventType(event);
    if (!event) {
      handleUnsetlink();
    }
  };
  const onClose = () => {
    setVisible(false);
  };
  const renderSettings = () => {
    var _a, _b;
    const renderLinkValueConfig = () => {
      switch (eventType) {
        case "link":
          return /* @__PURE__ */ jsxRuntime.jsx(TextInputConfig.TextInputConfig, {
            initValue: link == null ? void 0 : link.href,
            formItemProps: { label: i18n.t("\u0110\u01B0\u1EDDng d\u1EABn"), layout: "vertical" },
            inputProps: {
              placeholder: i18n.t("Nh\u1EADp \u0111\u01B0\u1EDDng d\u1EABn")
            },
            updateValue: (val) => {
              const href = val == null ? void 0 : val.trim();
              if (href) {
                handleSetLink({
                  href,
                  pageId: void 0
                });
                return;
              }
              handleUnsetlink();
            }
          });
        case "openPageOfWebsite":
          return /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
            requireExistedValue: true,
            formItemProps: {
              style: {
                marginBottom: "0.5rem"
              }
            },
            selectProps: {
              placeholder: i18n.t("Ch\u1ECDn trang"),
              style: { width: "100%" },
              value: link == null ? void 0 : link.pageId,
              onChange: (pageId) => {
                if (pageId) {
                  handleSetLink({
                    href: void 0,
                    pageId
                  });
                  return;
                }
                handleUnsetlink();
              }
            },
            options: websiteMenuItemIds
          });
        default:
          return null;
      }
    };
    const linkValueConfig = renderLinkValueConfig();
    if (!linkValueConfig)
      return null;
    return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [
        linkValueConfig,
        /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SwitchConfig, {
          formItemProps: { label: i18n.t("M\u1EDF trong tab m\u1EDBi") },
          switchProps: {
            checked: link.target === "_blank",
            onChange: (checked) => {
              handleSetLink({
                target: checked ? "_blank" : "_self"
              });
            }
          }
        }),
        /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SwitchConfig, {
          formItemProps: {
            label: i18n.t("Li\xEAn k\u1EBFt nofollow"),
            description: i18n.t("C\xE1c c\xF4ng c\u1EE5 t\xECm ki\u1EBFm s\u1EBD b\u1ECF qua li\xEAn k\u1EBFt nofollow")
          },
          switchProps: {
            checked: (_b = (_a = link.rel) == null ? void 0 : _a.includes) == null ? void 0 : _b.call(_a, "nofollow"),
            onChange: (checked) => {
              handleSetLink({
                rel: checked ? "nofollow" : null
              });
            }
          }
        })
      ]
    });
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(coreEditor.QuickSettingButton, {
        tooltip: i18n.t("G\u0103\u0301n link"),
        onClick: () => setVisible(true),
        children: /* @__PURE__ */ jsxRuntime.jsx(reactIcons.Link16Regular, {})
      }),
      visible && /* @__PURE__ */ jsxRuntime.jsx(antd.Modal, {
        closable: false,
        zIndex: 1080,
        open: visible,
        onCancel: onClose,
        title: i18n.t("C\xE0i \u0111\u1EB7t s\u1EF1 ki\u1EC7n nh\u1EA5p chu\u1ED9t"),
        destroyOnClose: true,
        width: 450,
        footer: [
          /* @__PURE__ */ jsxRuntime.jsx(antd.Button, {
            type: "primary",
            shape: "round",
            onClick: onClose,
            children: i18n.t("\u0110\xF3ng")
          })
        ],
        getContainer: () => (frameDocument == null ? void 0 : frameDocument.body) || (document == null ? void 0 : document.body),
        children: /* @__PURE__ */ jsxRuntime.jsx(antd.Tabs, {
          items: [
            {
              label: i18n.t("S\u1EF1 ki\u1EC7n"),
              key: "1",
              children: /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
                children: [
                  /* @__PURE__ */ jsxRuntime.jsx(coreEditor.SelectConfig, {
                    options: getActionTypeOption(),
                    formItemProps: {
                      label: i18n.t("Lo\u1EA1i s\u1EF1 ki\u1EC7n"),
                      style: { marginBottom: "0.5rem" }
                    },
                    selectProps: {
                      placeholder: i18n.t("Ch\u1ECDn s\u1EF1 ki\u1EC7n"),
                      style: { width: "100%" },
                      onChange: onChangeEventType,
                      value: eventType
                    }
                  }),
                  renderSettings()
                ]
              })
            },
            enableTekoTracking && {
              label: "Teko tracking",
              key: "2",
              children: /* @__PURE__ */ jsxRuntime.jsx(coreEditor.TekoTrackingConfig, {
                propKey: coreEditor.PROP_KEY.Event
              })
            }
          ]
        })
      })
    ]
  });
};

exports.TextLinkQuickSetting = TextLinkQuickSetting;
