'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var icons = require('@ant-design/icons');
var coreEditor = require('@tempi/core-editor');
var constants = require('../../configs/TipTapEditor/constants.js');

const listTypes = [constants.NODE_TYPES.orderedList, constants.NODE_TYPES.bulletList];
const TextListQuickSetting = ({
  editor
}) => {
  const renderIcon = () => {
    const iconMap = [icons.OrderedListOutlined, icons.UnorderedListOutlined];
    for (let i = 0; i < listTypes.length; i++) {
      const type = listTypes[i];
      const Comp = iconMap[i];
      if (editor == null ? void 0 : editor.isActive(type)) {
        return /* @__PURE__ */ jsxRuntime.jsx(Comp, {});
      }
    }
    return /* @__PURE__ */ jsxRuntime.jsx(icons.UnorderedListOutlined, {});
  };
  const setList = (type) => {
    var _a, _b;
    (_b = (_a = editor == null ? void 0 : editor.commands) == null ? void 0 : _a.executeCmd) == null ? void 0 : _b.call(
      _a,
      ({ chain }) => chain().toggleList(type, constants.NODE_TYPES.listItem, true).updateAttributes(
        constants.NODE_TYPES.listItem,
        editor.getAttributes(
          editor.isActive(constants.NODE_TYPES.heading) ? constants.NODE_TYPES.heading : constants.NODE_TYPES.paragraph
        )
      ).run()
    );
  };
  const onClick = () => {
    const currentPos = listTypes.findIndex((val) => editor == null ? void 0 : editor.isActive(val));
    if (currentPos !== listTypes.length - 1) {
      setList(listTypes[(currentPos + 1) % listTypes.length]);
    } else {
      setList(listTypes[listTypes.length - 1]);
    }
  };
  return /* @__PURE__ */ jsxRuntime.jsx(coreEditor.QuickSettingButton, {
    onClick,
    children: renderIcon()
  });
};

exports.TextListQuickSetting = TextListQuickSetting;
