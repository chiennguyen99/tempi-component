import get from 'lodash.get';
import set from 'lodash.set';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const transformNestedContent = (component, mappingKeys) => {
  if (component.tag === "tab") {
    const pathTabs = ["customAttributes", "tab", "tabs"];
    const tabs = get(component, pathTabs);
    if (tabs == null ? void 0 : tabs.length) {
      const cloneTabs = [...tabs];
      cloneTabs.forEach((tab) => {
        tab.id = mappingKeys[tab.id] || tab.id;
      });
      set(component, pathTabs, cloneTabs);
    }
  }
  if (component.tag === "formv4") {
    const pathSuccess = ["customAttributes", "formv4", "response", "success"];
    const pathFailed = ["customAttributes", "formv4", "response", "failed"];
    const pathCustom = ["customAttributes", "formv4", "response", "custom"];
    const pathConfigStorage = [
      "customAttributes",
      "formv4",
      "configStorage",
      "formConfigId"
    ];
    set(component, pathConfigStorage, null);
    const successValue = get(component, pathSuccess);
    if (successValue)
      set(component, pathSuccess, mappingKeys[successValue] || successValue);
    const failedValue = get(component, pathFailed);
    if (failedValue)
      set(component, pathFailed, mappingKeys[failedValue] || failedValue);
    const customValue = get(component, pathCustom);
    if (customValue && Array.isArray(customValue))
      set(
        component,
        pathCustom,
        customValue.map((el) => __spreadProps(__spreadValues({}, el), {
          popup: mappingKeys[el.popup] || el.popup
        }))
      );
  }
  if (component.tag === "luckydrawv2") {
    const pathPrize = ["customAttributes", "luckydrawv2", "response", "prize"];
    const pathOutOfTurn = [
      "customAttributes",
      "luckydrawv2",
      "response",
      "outOfTurn"
    ];
    const pathOutOfPrize = [
      "customAttributes",
      "luckydrawv2",
      "response",
      "outOfPrize"
    ];
    const pathCustom = [
      "customAttributes",
      "luckydrawv2",
      "response",
      "custom"
    ];
    const pathConfigStorage = [
      "customAttributes",
      "luckydrawv2",
      "configStorage",
      "formConfigId"
    ];
    set(component, pathConfigStorage, null);
    const prizeValue = get(component, pathPrize);
    if (prizeValue)
      set(component, pathPrize, mappingKeys[prizeValue] || prizeValue);
    const outOfTurnValue = get(component, pathOutOfTurn);
    if (outOfTurnValue)
      set(
        component,
        pathOutOfTurn,
        mappingKeys[outOfTurnValue] || outOfTurnValue
      );
    const outOfPrizeValue = get(component, pathOutOfPrize);
    if (outOfPrizeValue)
      set(
        component,
        pathOutOfPrize,
        mappingKeys[outOfPrizeValue] || outOfPrizeValue
      );
    const customValue = get(component, pathCustom);
    if (customValue && Array.isArray(customValue))
      set(
        component,
        pathCustom,
        customValue.map(
          (el) => __spreadProps(__spreadValues({}, el), {
            popup: mappingKeys[el.popup] || el.popup
          })
        )
      );
  }
  const pathTogglePopup = [
    "customAttributes",
    component.tag,
    "event",
    "togglePopup"
  ];
  const pathTogglePopupList = [
    "customAttributes",
    component.tag,
    "event",
    "togglePopupList"
  ];
  const valueTogglePopup = get(component, pathTogglePopup);
  if (valueTogglePopup)
    set(
      component,
      pathTogglePopup,
      mappingKeys[valueTogglePopup] || valueTogglePopup
    );
  const valueTogglePopupList = get(component, pathTogglePopupList);
  if (valueTogglePopupList && Array.isArray(valueTogglePopupList))
    set(
      component,
      pathTogglePopupList,
      valueTogglePopupList.map((el) => mappingKeys[el] || el)
    );
  return component;
};

export { transformNestedContent };
