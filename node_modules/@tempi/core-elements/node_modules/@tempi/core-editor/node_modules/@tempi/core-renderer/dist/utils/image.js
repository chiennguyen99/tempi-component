'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const imgAttributeMapping = {
  width: "w",
  height: "h",
  webp: "rw",
  png: "rp",
  jpg: "rj",
  stretch: "s",
  crop: "c"
};
const preProcesssorGoogleImageParams = (googleParams, config) => {
  return __spreadProps(__spreadValues(__spreadValues({}, config), googleParams), {
    width: (googleParams == null ? void 0 : googleParams.percent) ? Math.round((googleParams == null ? void 0 : googleParams.width) * (googleParams == null ? void 0 : googleParams.percent) / 100) : googleParams == null ? void 0 : googleParams.width
  });
};
const formatGoogleParams = (config) => {
  const newConfig = __spreadValues({}, config);
  const { width, percent } = newConfig || {};
  if (width && percent) {
    newConfig.width = Math.round(width * percent / 100);
  }
  return newConfig;
};
const constructGoogleImageParams = (url, config) => {
  const baseUrl = url.indexOf("=") >= 0 ? url.substring(0, url.indexOf("=")) : url;
  const params = [];
  const newConfig = formatGoogleParams(config);
  Object.entries(newConfig).forEach(([key, value]) => {
    if (value !== 0 && !value)
      return;
    if (key === "format") {
      params.push(imgAttributeMapping[value]);
      return;
    }
    if (key === "size" && value) {
      params.push(`${imgAttributeMapping[key]}0`);
      return;
    }
    if (imgAttributeMapping[key]) {
      if (typeof value === "boolean") {
        if (value) {
          params.push(`${imgAttributeMapping[key]}`);
          return;
        }
        return;
      }
      params.push(`${imgAttributeMapping[key]}${value}`);
    }
  });
  return params.length > 0 ? `${baseUrl}=${params.join("-")}` : url;
};
const getImageUrlFromGoogleUserContent = (imageUrl, config) => {
  if (imageUrl && imageUrl.includes("googleusercontent.com") && !imageUrl.includes("="))
    return constructGoogleImageParams(imageUrl, config);
  return imageUrl;
};
const formatImageUrlQuality = (url, resolution = 800) => {
  if (!(url == null ? void 0 : url.startsWith("https://lh3.googleusercontent.com/")))
    return url;
  const resizedImageReg = /\S*=(rw(-w\d+)?|w\d+)/g;
  return resizedImageReg.test(url) ? url.replace(/=(rw(-w\d+)?|w\d+)/, `=rw-w${resolution}`) : url + `=w${resolution}`;
};

exports.constructGoogleImageParams = constructGoogleImageParams;
exports.formatImageUrlQuality = formatImageUrlQuality;
exports.getImageUrlFromGoogleUserContent = getImageUrlFromGoogleUserContent;
exports.preProcesssorGoogleImageParams = preProcesssorGoogleImageParams;
