'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mergeLodash = require('lodash.merge');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var mergeLodash__default = /*#__PURE__*/_interopDefaultLegacy(mergeLodash);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const getTrackingData = ({
  isTrackContent,
  contentName,
  index,
  regionName,
  target,
  payload
}) => {
  return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, regionName && { "data-content-region-name": regionName }), isTrackContent && { "data-track-content": true }), contentName && { "data-content-name": contentName }), (index || index === 0) && { "data-content-index": index }), target && { "data-content-target": target }), payload && { "data-content-payload": payload });
};
const getPropsByDevice = (props, device = "desktop") => {
  const _a = props, { syncDeviceStyle, desktop, mobile, commonStyle } = _a, rest = __objRest(_a, ["syncDeviceStyle", "desktop", "mobile", "commonStyle"]);
  const _b = commonStyle || {}, {
    desktop: desktopStyle,
    mobile: mobileStyle
  } = _b, restStyle = __objRest(_b, [
    "desktop",
    "mobile"
  ]);
  if (!desktop && !mobile && !desktopStyle && !mobileStyle)
    return props;
  if (device === "mobile") {
    const inheritDesktopProps = syncDeviceStyle === void 0;
    const newCommonStyle2 = mergeLodash__default["default"](
      {},
      restStyle,
      inheritDesktopProps ? desktopStyle : {},
      mobileStyle
    );
    return mergeLodash__default["default"](
      { commonStyle: newCommonStyle2 },
      rest,
      inheritDesktopProps ? desktop : {},
      mobile
    );
  }
  const newCommonStyle = mergeLodash__default["default"](
    {},
    restStyle,
    desktopStyle
  );
  return mergeLodash__default["default"](
    { commonStyle: newCommonStyle },
    rest,
    desktop
  );
};
const getTargetOfTrackingFromEvent = (event) => {
  var _a;
  const key = event == null ? void 0 : event.eventType;
  switch (key) {
    case "openPageOfWebsite":
    case "link":
    case "internal":
      return (_a = event[key]) == null ? void 0 : _a.href;
    case "email":
    case "phone":
    case "inPage":
      return event[key];
    case "openPopup":
    case "closePopup":
      return event.togglePopup;
    default:
      return void 0;
  }
};
const buildComponentDict = (objComponent) => {
  const components = Object.values(objComponent);
  return components.reduce((acc, cur) => {
    const name = cur.displayName || cur.name;
    const key = name.toLowerCase();
    acc[key] = cur;
    return acc;
  }, {});
};

exports.buildComponentDict = buildComponentDict;
exports.getPropsByDevice = getPropsByDevice;
exports.getTargetOfTrackingFromEvent = getTargetOfTrackingFromEvent;
exports.getTrackingData = getTrackingData;
