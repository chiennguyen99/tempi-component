import { useEffect } from 'react';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const useInjectLinksToHTML = (links, customDocument) => {
  useEffect(() => {
    if (!(links == null ? void 0 : links.length))
      return;
    const injectedDocument = customDocument || document;
    const mappingExistedLinks = [
      ...injectedDocument.getElementsByTagName("link")
    ].reduce((acc, cur) => __spreadProps(__spreadValues({}, acc), { [cur.href]: true }), {});
    links.forEach(({ type, rel, href }) => {
      if (!mappingExistedLinks[href]) {
        const link = injectedDocument.createElement("link");
        if (type)
          link.type = type;
        if (rel)
          link.rel = rel;
        link.href = href;
        injectedDocument.head.appendChild(link);
        mappingExistedLinks[href] = true;
      }
    });
  }, [customDocument]);
};

export { useInjectLinksToHTML };
