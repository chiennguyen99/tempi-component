'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var hexRgb = require('./hex-rgb.js');

const clamp = (num, min, max) => Math.min(Math.max(min, num), max);
const parseRGB = (num) => {
  let n = num;
  if (typeof n !== "number")
    n = n.endsWith("%") ? parseFloat(n) * 255 / 100 : parseFloat(n);
  return clamp(Math.round(n), 0, 255);
};
const parsePercentage = (percentage) => clamp(parseFloat(percentage), 0, 100);
function parseAlpha(alpha) {
  let a = alpha;
  if (typeof a !== "number")
    a = a.endsWith("%") ? parseFloat(a) / 100 : parseFloat(a);
  return clamp(a, 0, 1);
}
function getHEX(hex) {
  const [r, g, b, a] = hexRgb.hex2Rgb(hex, { format: "array" });
  return getRGB([null, ...[r, g, b, a]]);
}
function getHSL([, h, s, l, a = 1]) {
  let hh = h;
  if (hh.endsWith("turn")) {
    hh = parseFloat(hh) * 360 / 1;
  } else if (hh.endsWith("rad")) {
    hh = Math.round(parseFloat(hh) * 180 / Math.PI);
  } else {
    hh = parseFloat(hh);
  }
  return {
    type: "hsl",
    values: [hh, parsePercentage(s), parsePercentage(l)],
    alpha: parseAlpha(a === null ? 1 : a)
  };
}
function getRGB([, r, g, b, a = 1]) {
  return {
    type: "rgb",
    values: [r, g, b].map(parseRGB),
    alpha: parseAlpha(a === null ? 1 : a)
  };
}

exports.getHEX = getHEX;
exports.getHSL = getHSL;
exports.getRGB = getRGB;
