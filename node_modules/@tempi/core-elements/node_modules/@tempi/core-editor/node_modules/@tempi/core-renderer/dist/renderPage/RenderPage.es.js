import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { Global } from '@emotion/react';
import { useState, useEffect, useMemo } from 'react';
import { LandingLinks } from '../constants/index.es.js';
import { NodeElement } from '../components/NodeElement/NodeElements.es.js';
import { getComponentProps } from '../utils/getComponentProps.es.js';
import { StoreProvider } from '../contexts/StoreContext.es.js';
import { reset } from '../constants/reset.es.js';
import { rcCascaderCss } from '../constants/rc-cascader.es.js';
import { animationCss } from '../constants/animation.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const RenderPage = ({
  content = {},
  configs,
  ssrData = {},
  mappingDynamicSlots,
  rootId = "ROOT",
  addGlobalStyle = true,
  numOfHydratedBlocks,
  addLandingLinks = true,
  componentDict
}) => {
  var _a, _b, _c;
  const [client, setIsClient] = useState(false);
  useEffect(() => {
    setIsClient(true);
  }, []);
  const RootComp = componentDict[(_c = (_b = (_a = content[rootId]) == null ? void 0 : _a.tag) == null ? void 0 : _b.toString()) == null ? void 0 : _c.toLowerCase()];
  const rootProps = useMemo(() => {
    return getComponentProps(content[rootId], configs, ssrData[rootId]);
  }, [content[rootId]]);
  const childNode = useMemo(() => {
    var _a2;
    const childLength = ((_a2 = rootProps.nodes) == null ? void 0 : _a2.length) || 0;
    return !client && numOfHydratedBlocks && childLength > numOfHydratedBlocks ? rootProps.nodes.slice(0, numOfHydratedBlocks) : rootProps.nodes;
  }, [rootProps.nodes, client]);
  return /* @__PURE__ */ jsxs(StoreProvider, __spreadProps(__spreadValues({
    ssrData,
    content,
    mappingDynamicSlots,
    componentDict
  }, configs), {
    children: [
      addGlobalStyle && /* @__PURE__ */ jsxs(Fragment, {
        children: [
          /* @__PURE__ */ jsx(Global, {
            styles: reset
          }),
          /* @__PURE__ */ jsx(Global, {
            styles: rcCascaderCss
          }),
          /* @__PURE__ */ jsx(Global, {
            styles: animationCss
          })
        ]
      }),
      addLandingLinks && /* @__PURE__ */ jsx(LandingLinks, {}),
      RootComp && rootProps.isVisible && /* @__PURE__ */ jsx(RootComp, __spreadProps(__spreadValues({
        className: rootProps.className,
        ssrData: ssrData[rootId]
      }, rootProps.props), {
        children: childNode.map((nodeId) => /* @__PURE__ */ jsx(NodeElement, {
          id: nodeId
        }, nodeId))
      }), rootProps.key)
    ]
  }));
};

export { RenderPage };
