'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var styled = require('@emotion/styled');
var React = require('react');
var Ytb = require('react-youtube');
var isGCSUrl = require('../../utils/isGCSUrl.js');
var youtubeParser = require('../../utils/youtubeParser.js');
var useIntersectionObserver = require('../../hooks/useIntersectionObserver.js');
var transform = require('../../utils/transform.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
var Ytb__default = /*#__PURE__*/_interopDefaultLegacy(Ytb);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const BackgroundVideo = ({
  src,
  uploadSrc,
  defaultOverlay,
  background,
  objectFit
}) => {
  const wrapperRef = React.useRef();
  const intervalRef = React.useRef();
  const [size, setSize] = React.useState();
  const getWidthHeightOfYtb = () => {
    if (!(wrapperRef == null ? void 0 : wrapperRef.current))
      return;
    let { clientWidth: width, clientHeight: height } = wrapperRef.current;
    const displayRatio = 16 / 9;
    const containerRatio = width / height;
    if (containerRatio < displayRatio) {
      width = height * displayRatio;
    } else if (containerRatio > displayRatio) {
      height = width / displayRatio;
    }
    return {
      width,
      height
    };
  };
  React.useEffect(() => {
    return () => clearTimeout(intervalRef.current);
  }, []);
  React.useEffect(() => {
    const resetWidthHeigthVideo = () => {
      const newSize = getWidthHeightOfYtb();
      if (newSize)
        setSize(newSize);
    };
    resetWidthHeigthVideo();
    window.addEventListener("resize", resetWidthHeigthVideo);
    return () => {
      window.removeEventListener("resize", resetWidthHeigthVideo);
    };
  }, [wrapperRef == null ? void 0 : wrapperRef.current]);
  const isIntersected = useIntersectionObserver.useIntersectionObserver(wrapperRef, {
    freezeOnceVisible: true
  });
  if (!src && !uploadSrc && !defaultOverlay)
    return null;
  const renderVideo = () => {
    if (!isIntersected || !wrapperRef.current)
      return null;
    if (isGCSUrl.isGCSUrl(uploadSrc)) {
      return /* @__PURE__ */ jsxRuntime.jsx("video", __spreadProps(__spreadValues({}, size), {
        style: __spreadProps(__spreadValues({}, videoStyle), {
          objectFit: objectFit || "fill"
        }),
        playsInline: true,
        loop: true,
        autoPlay: true,
        muted: true,
        src: uploadSrc
      }));
    }
    const videoId = youtubeParser.youtubeParser(src);
    if (!videoId)
      return null;
    let videoPlayer;
    let totalVideoTime;
    const OVERHEAD = 10;
    const RESTART_BEFORE = 1e3;
    function checkVideoPos() {
      let currentTime = videoPlayer.getCurrentTime();
      currentTime = currentTime * 1e3;
      if (currentTime >= totalVideoTime) {
        videoPlayer.seekTo(0);
        intervalRef.current = setTimeout(checkVideoPos, totalVideoTime);
      } else {
        const newTime = totalVideoTime - currentTime - OVERHEAD;
        intervalRef.current = setTimeout(checkVideoPos, newTime);
      }
    }
    const onReady = (event) => {
      videoPlayer = event.target;
      totalVideoTime = videoPlayer.getDuration() * 1e3 - RESTART_BEFORE;
      intervalRef.current = setTimeout(checkVideoPos, totalVideoTime);
    };
    const onEnd = () => {
      clearTimeout(intervalRef.current);
    };
    return /* @__PURE__ */ jsxRuntime.jsx(StyledYtb, {
      videoId,
      opts: __spreadProps(__spreadValues({}, size), {
        playerVars: {
          playlist: videoId,
          playsInLine: 1,
          mute: 1,
          controls: 0,
          allowFullScreen: 1,
          autoplay: 1
        }
      }),
      onReady,
      onEnd
    });
  };
  return /* @__PURE__ */ jsxRuntime.jsx(Wrapper, {
    ref: wrapperRef,
    commonStyle: {
      defaultOverlay,
      background
    },
    children: renderVideo()
  });
};
const Wrapper = styled__default["default"].div(
  ({ commonStyle }) => `
  ${transform.getStyle(commonStyle)}

  position: absolute !important;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  overflow: hidden;
  z-index: 0;
`
);
const StyledYtb = styled__default["default"](Ytb__default["default"])`
  iframe {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: -2; // z-index of overlay: -1
  }
`;
const videoStyle = {
  position: "absolute",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  zIndex: "-2"
};

exports.BackgroundVideo = BackgroundVideo;
