import { jsx } from 'react/jsx-runtime';
import set from 'lodash.set';
import get from 'lodash.get';
import React, { useState, useContext } from 'react';
import { useLocationChange } from '../hooks/useLocationChange.es.js';
import { isHandleBarsVariable, computeStringHandleBarsExpression } from '../utils/computeStringHandleBarsExpression.es.js';

const PageDataStateContext = React.createContext({});
const PageDataProvider = ({ children, user }) => {
  const [queryParams, setQueryParams] = useState();
  const [components, setComponents] = useState();
  useLocationChange(() => {
    const search = window.location.search;
    setQueryParams(Object.fromEntries(new URLSearchParams(search)));
  }, true);
  const setComponentValueByPath = (path, value) => {
    const newComponents = Object.assign({}, components);
    set(newComponents, path, value);
    setComponents(newComponents);
  };
  const getValueByPath = (contextPath) => {
    if (!isHandleBarsVariable(contextPath))
      return get({ components, user, queryParams }, contextPath);
    return computeStringHandleBarsExpression(contextPath, {
      components,
      user,
      queryParams
    });
  };
  return /* @__PURE__ */ jsx(PageDataStateContext.Provider, {
    value: {
      setComponentValueByPath,
      getValueByPath,
      storeData: {
        components,
        queryParams,
        user
      }
    },
    children
  });
};
function usePageData() {
  const context = useContext(PageDataStateContext);
  if (!context) {
    throw new Error(
      "use must be inside a ComponentStateContext with a state value"
    );
  }
  return context;
}

export { PageDataProvider, usePageData };
