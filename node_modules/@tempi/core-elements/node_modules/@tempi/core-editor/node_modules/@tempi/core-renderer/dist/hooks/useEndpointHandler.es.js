import { useState, useEffect } from 'react';
import get from 'lodash.get';
import { useLocationChange } from './useLocationChange.es.js';
import { computeStringHandleBarsExpression, getAllHandleBarsVariables } from '../utils/computeStringHandleBarsExpression.es.js';
import { useStore } from '../contexts/StoreContext.es.js';
import { Api } from '../utils/api/index.es.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const useEndpointHandler = (endpointId) => {
  const [queryParams, setQueryParams] = useState();
  const [loading, setLoading] = useState(false);
  const [data, setData] = useState();
  const [error, setError] = useState();
  const {
    auth: { getAccessToken, user = {} } = {},
    globalData: { endpoints = [] } = {}
  } = useStore();
  const checkCanFetchData = (endpoint) => {
    const urlVars = getAllHandleBarsVariables(endpoint.url || "");
    const bodyVars = getAllHandleBarsVariables(endpoint.body || "");
    const headerVars = getAllHandleBarsVariables(endpoint.headers || "");
    return [...urlVars, ...bodyVars, ...headerVars].every((variable) => {
      const value = get({ queryParams, user }, variable);
      return typeof value !== "undefined";
    });
  };
  const fetchData = async () => {
    const endpoint = endpoints.find((e) => e.id === endpointId);
    if (!endpoint || !checkCanFetchData(endpoint) || !queryParams)
      return;
    const api = new Api("");
    const url = computeStringHandleBarsExpression(endpoint.url, {
      queryParams,
      user
    });
    let body, headers = {};
    if (endpoint.method !== "GET" && endpoint.body) {
      try {
        body = JSON.parse(
          computeStringHandleBarsExpression(endpoint.body, {
            queryParams,
            user
          })
        );
      } catch (e) {
        console.error(e);
        body = {};
      }
    }
    if (endpoint.headers) {
      try {
        headers = JSON.parse(
          computeStringHandleBarsExpression(endpoint.headers, {
            queryParams,
            user
          })
        );
      } catch (e) {
        console.error(e);
        headers = {};
      }
    }
    const accessToken = getAccessToken == null ? void 0 : getAccessToken();
    const tenant_id = user == null ? void 0 : user.tenant_id;
    try {
      setLoading(true);
      const res = await api.request(url, body, endpoint.method, {
        headers: __spreadValues(__spreadValues(__spreadValues({}, headers), accessToken ? { Authorization: `Bearer ${accessToken}` } : {}), tenant_id ? { "X-Tenant-Id": tenant_id } : {})
      });
      setError(void 0);
      setData(res.data);
    } catch (e) {
      setError(e);
      console.error(e);
    } finally {
      setLoading(false);
    }
  };
  useLocationChange(() => {
    const search = window.location.search;
    setQueryParams(Object.fromEntries(new URLSearchParams(search)));
  }, true);
  useEffect(() => {
    const revalidateDataOnFocus = () => {
      if (document.visibilityState === "visible") {
        fetchData();
      }
    };
    fetchData();
    document.addEventListener("visibilitychange", revalidateDataOnFocus);
    return () => {
      document.removeEventListener("visibilitychange", revalidateDataOnFocus);
    };
  }, [endpointId, JSON.stringify(endpoints), JSON.stringify(queryParams)]);
  return {
    result: data,
    loading: data == void 0 && loading,
    error,
    queryParams
  };
};

export { useEndpointHandler };
