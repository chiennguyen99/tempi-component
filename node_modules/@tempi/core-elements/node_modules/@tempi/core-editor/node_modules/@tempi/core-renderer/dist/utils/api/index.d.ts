import { ApiError } from './error';
export interface RequestConfig {
    params?: any;
    headers?: any;
    [k: string]: any;
}
export type ApiErrorGetter = (resp: any) => ApiError | null;
export declare class Api {
    baseURL: string;
    interceptors: Array<(request: RequestInit) => void>;
    defaultConfig: any;
    getError?: ApiErrorGetter;
    constructor(url: string, getError?: ApiErrorGetter, defaultConfig?: any);
    private _parseJson;
    addInterceptor(interceptFn: (request: RequestInit) => void): void;
    appendParamsToURL(url: string, params?: any): string;
    request(path: string, body: FormData | any, method: string, config?: RequestConfig): Promise<{
        code: number;
        data: any;
        headers: any;
    }>;
    get(url: string, config?: RequestConfig): Promise<{
        code: number;
        data: any;
        headers: any;
    }>;
    post(url: string, body: FormData | any, config?: RequestConfig): Promise<{
        code: number;
        data: any;
        headers: any;
    }>;
    patch(url: string, body: any, config?: RequestConfig): Promise<{
        code: number;
        data: any;
        headers: any;
    }>;
    put(url: string, body: any, config?: RequestConfig): Promise<{
        code: number;
        data: any;
        headers: any;
    }>;
    delete(url: string, body?: any, config?: RequestConfig): Promise<{
        code: number;
        data: any;
        headers: any;
    }>;
}
export { ApiError };
//# sourceMappingURL=index.d.ts.map