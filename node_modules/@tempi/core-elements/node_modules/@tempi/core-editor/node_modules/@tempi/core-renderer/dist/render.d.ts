import React from 'react';
import { BaseStoreState, StoreState } from './contexts';
import { BaseElementInterface, PageBuilderResponse, SSRData } from './types';
export interface BuilderComponentProps<T extends {
    [key: string]: BaseElementInterface;
}, S = {}> {
    content?: PageBuilderResponse<T>;
    ssrData?: SSRData;
    mappingDynamicSlots?: StoreState<S & BaseStoreState>['mappingDynamicSlots'];
    configs?: StoreState<S & BaseStoreState>;
    rootId?: string;
    componentDict: {
        [tag in keyof T]?: React.ComponentType;
    };
    addGlobalStyle?: boolean;
    addLandingLinks?: boolean;
    numOfHydratedBlocks?: number;
    debugLog?: (type: string, duration: number) => void;
}
export declare const BuilderComponent: <T extends {
    [tag: string]: BaseElementInterface;
} = {}, S = {}>(props: BuilderComponentProps<T, S>) => JSX.Element;
//# sourceMappingURL=render.d.ts.map