'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var index$1 = require('./constants/index.js');
var index = require('./utils/api/index.js');

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
class Builder {
  init(domain, config) {
    this.domain = domain;
    if (!config.env) {
      config.env = "production";
    }
    this.pageManagementClient = new index.Api(index$1.publicBffUrl[config.env]);
    this.internalClient = new index.Api(index$1.publicBffUrl.internal);
  }
  async getPublicPage(params, internal = false) {
    const client = internal ? this.internalClient : this.pageManagementClient;
    const { data } = await client.get("/v1/page", {
      params: __spreadProps(__spreadValues({}, params), {
        domain: this.domain
      })
    });
    return data == null ? void 0 : data.data;
  }
  async getPublicPageV2(params, internal = false) {
    var _b, _c, _d;
    const client = internal ? this.internalClient : this.pageManagementClient;
    const _a = params, { languageCode, slug, password } = _a, rest = __objRest(_a, ["languageCode", "slug", "password"]);
    const { data } = await client.get("/v1/page", {
      params: __spreadProps(__spreadValues({}, rest), {
        slug,
        domain: this.domain
      }),
      headers: {
        "Accept-Language": languageCode || "*",
        "x-password": password
      }
    });
    return __spreadProps(__spreadValues({}, (_b = data == null ? void 0 : data.data) == null ? void 0 : _b.page), {
      pbConfig: (_d = (_c = data == null ? void 0 : data.data) == null ? void 0 : _c.page) == null ? void 0 : _d.content
    });
  }
  async getPrivatePageV2(params, headers) {
    var _a, _b, _c;
    const client = this.pageManagementClient;
    const { data } = await client.get("/v1/page", {
      params: __spreadProps(__spreadValues({}, params), {
        domain: this.domain
      }),
      headers
    });
    return __spreadProps(__spreadValues({}, (_a = data == null ? void 0 : data.data) == null ? void 0 : _a.page), {
      pbConfig: (_c = (_b = data == null ? void 0 : data.data) == null ? void 0 : _b.page) == null ? void 0 : _c.content
    });
  }
  getSSRInputs(pbConfig, option) {
    const { device = "desktop", ssrComponentTags, getSlotDataFunc } = option;
    return Object.keys(pbConfig).filter((k) => {
      return ssrComponentTags.includes(pbConfig[k].tag);
    }).map((k) => ({
      key: k,
      data: getSlotDataFunc(pbConfig[k], device)
    })).reduce(
      (acc, curr) => __spreadProps(__spreadValues({}, acc), {
        [curr.key]: curr.data
      }),
      {}
    );
  }
}
Builder.ITEMS_PER_PAGE = 18;
const builder = new Builder();

exports.builder = builder;
