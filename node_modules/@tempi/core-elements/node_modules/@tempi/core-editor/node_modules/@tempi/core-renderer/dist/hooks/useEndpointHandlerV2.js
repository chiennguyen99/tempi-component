'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var get = require('lodash.get');
var PageDataContext = require('../contexts/PageDataContext.js');
var StoreContext = require('../contexts/StoreContext.js');
var index = require('../utils/api/index.js');
var computeStringHandleBarsExpression = require('../utils/computeStringHandleBarsExpression.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var get__default = /*#__PURE__*/_interopDefaultLegacy(get);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const useEndpointHandlerV2 = () => {
  const [loading, setLoading] = React.useState(false);
  const { auth: { getAccessToken } = {}, globalData: { endpoints = [] } = {} } = StoreContext.useStore();
  const { getValueByPath, storeData } = PageDataContext.usePageData();
  const buildParamsObject = (endpointParam, mappingParam, onlyRequiredField = false) => {
    if (!endpointParam)
      return;
    const objMapParam = (mappingParam || []).reduce((prev, curr) => {
      prev[curr.name] = curr;
      return prev;
    }, {});
    const objParam = endpointParam.reduce((prev, curr) => {
      if (onlyRequiredField && !curr.isRequired)
        return prev;
      const valueType = objMapParam[curr.paramName].valueType;
      const staticValue = objMapParam[curr.paramName].staticValue;
      const contextPath = objMapParam[curr.paramName].contextPath;
      if (valueType === "CONTEXT_PATH" && contextPath) {
        prev[curr.paramName] = getValueByPath(contextPath);
      }
      if (valueType === "STATIC" && staticValue) {
        prev[curr.paramName] = staticValue;
      }
      return prev;
    }, {});
    return objParam;
  };
  const checkCanFetchData = (endpoint, mappingParams) => {
    const params = buildParamsObject(endpoint.params, mappingParams, true) || {};
    const inputs = __spreadProps(__spreadValues({}, storeData), { params });
    const urlVars = computeStringHandleBarsExpression.getAllHandleBarsVariables(endpoint.url || "");
    const bodyVars = computeStringHandleBarsExpression.getAllHandleBarsVariables(endpoint.body || "");
    const headerVars = computeStringHandleBarsExpression.getAllHandleBarsVariables(endpoint.headers || "");
    return [...urlVars, ...bodyVars, ...headerVars].every((variable) => {
      const value = get__default["default"](inputs, variable);
      return typeof value !== "undefined";
    });
  };
  const fetchData = async ({
    endpointId,
    mappingParams
  }) => {
    var _a, _b;
    const endpoint = endpoints.find((e) => e.id === endpointId);
    if (!endpoint || !checkCanFetchData(endpoint, mappingParams))
      return;
    const params = buildParamsObject(endpoint.params, mappingParams) || {};
    const inputs = __spreadProps(__spreadValues({}, storeData), { params });
    const api = new index.Api("");
    const url = computeStringHandleBarsExpression.computeStringHandleBarsExpression(endpoint.url, inputs);
    let body, headers = {};
    if (endpoint.method !== "GET" && endpoint.body) {
      try {
        body = JSON.parse(
          computeStringHandleBarsExpression.computeStringHandleBarsExpression(endpoint.body, inputs)
        );
      } catch (e) {
        console.error(e);
        body = {};
      }
    }
    if (endpoint.headers) {
      try {
        headers = JSON.parse(
          computeStringHandleBarsExpression.computeStringHandleBarsExpression(endpoint.headers, inputs)
        );
      } catch (e) {
        console.error(e);
        headers = {};
      }
    }
    const accessToken = getAccessToken == null ? void 0 : getAccessToken();
    const tenant_id = (_a = storeData == null ? void 0 : storeData.user) == null ? void 0 : _a.tenant_id;
    try {
      setLoading(true);
      const res = await api.request(url, body, endpoint.method, {
        headers: __spreadValues(__spreadValues(__spreadValues({}, headers), accessToken ? { Authorization: `Bearer ${accessToken}` } : {}), tenant_id ? { "X-Tenant-Id": tenant_id } : {})
      });
      return (_b = res == null ? void 0 : res.data) == null ? void 0 : _b.data;
    } catch (e) {
      throw new Error(e);
    } finally {
      setLoading(false);
    }
  };
  return {
    fetchData,
    loading
  };
};

exports.useEndpointHandlerV2 = useEndpointHandlerV2;
