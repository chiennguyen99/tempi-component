'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var transform = require('../../utils/transform.js');

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const Link = (_a) => {
  var _b = _a, {
    eventType,
    children,
    className,
    sectionMarginTop = 0,
    trackingEventName,
    conversionGGAdsId,
    conversionGGAdsLabel,
    scriptCustom,
    style
  } = _b, rest = __objRest(_b, [
    "eventType",
    "children",
    "className",
    "sectionMarginTop",
    "trackingEventName",
    "conversionGGAdsId",
    "conversionGGAdsLabel",
    "scriptCustom",
    "style"
  ]);
  var _a2, _b2, _c, _d, _e, _f, _g, _h;
  const ref = React.useRef();
  const openPopup = (popupId) => {
    var _a3;
    (_a3 = ref.current.ownerDocument.querySelector(
      `[data-uniq-id="${popupId}"]`
    )) == null ? void 0 : _a3.click();
  };
  const closePopup = (popupId) => {
    const popup = ref.current.ownerDocument.querySelector(
      `[data-uniq-id="${popupId}"]`
    );
    const maskPopup = popup == null ? void 0 : popup.parentElement;
    maskPopup.classList.remove("show");
    maskPopup.classList.add("hide-from-btn");
    popup == null ? void 0 : popup.click();
  };
  const closePopupList = (popupIds) => {
    const getAllElement = ref.current.ownerDocument.querySelectorAll(
      `[data-uniq-id]`
    );
    const popupList = [];
    getAllElement.forEach((el) => {
      if (popupIds.includes(el.getAttribute("data-uniq-id")))
        popupList.push(el);
    });
    popupList.forEach((popup) => {
      const maskPopup = popup == null ? void 0 : popup.parentElement;
      maskPopup.classList.remove("show");
      maskPopup.classList.add("hide-from-btn");
      popup == null ? void 0 : popup.click();
    });
  };
  const scrollToElement = (elementId) => {
    const isInIframe = ref.current.ownerDocument !== document;
    let innerWindow = window;
    if (isInIframe) {
      const iframeElements = window.document.getElementsByTagName("iframe");
      for (const iframe of iframeElements) {
        if (iframe.contentDocument === ref.current.ownerDocument) {
          innerWindow = iframe.contentWindow;
          break;
        }
      }
    }
    const elements = ref.current.ownerDocument.querySelectorAll(
      `[data-id="${elementId}"]`
    );
    for (const element of elements) {
      if (innerWindow.getComputedStyle(element).display !== "none") {
        const top = element.getBoundingClientRect().top + innerWindow.pageYOffset - sectionMarginTop;
        innerWindow.scrollTo({
          top,
          behavior: "smooth"
        });
      }
    }
  };
  const trackEventClick = () => {
    var _a3, _b3, _c2, _d2;
    if (trackingEventName) {
      (_a3 = window == null ? void 0 : window.gtag) == null ? void 0 : _a3.call(window, "event", trackingEventName);
      (_b3 = window == null ? void 0 : window.fbq) == null ? void 0 : _b3.call(window, "trackCustom", trackingEventName);
      (_c2 = window == null ? void 0 : window.track) == null ? void 0 : _c2.call(window, "customEvent", trackingEventName);
    }
    if (conversionGGAdsId && conversionGGAdsLabel) {
      (_d2 = window == null ? void 0 : window.gtag) == null ? void 0 : _d2.call(window, "event", "conversion", {
        send_to: `AW-${conversionGGAdsId}/${conversionGGAdsLabel}`
      });
    }
    runStringFunc(scriptCustom);
  };
  const runStringFunc = (script) => {
    if (script == null ? void 0 : script.trim()) {
      try {
        const excuteScript = new Function(transform.unescapeString(script));
        excuteScript();
      } catch (err) {
        console.error(err);
      }
    }
  };
  if (eventType === "openPageOfWebsite" && ((_a2 = rest["openPageOfWebsite"]) == null ? void 0 : _a2.href))
    return /* @__PURE__ */ jsxRuntime.jsx("a", {
      style: __spreadValues({
        textDecoration: "none",
        color: "unset",
        cursor: "pointer"
      }, style),
      href: rest["openPageOfWebsite"].href,
      onClick: trackEventClick,
      target: ((_b2 = rest[eventType]) == null ? void 0 : _b2.openNewTab) ? "_blank" : "_top",
      className,
      children
    });
  if (eventType === "link" && ((_c = rest["link"]) == null ? void 0 : _c.href))
    return /* @__PURE__ */ jsxRuntime.jsx("a", {
      style: __spreadValues({
        textDecoration: "none",
        color: "unset",
        cursor: "pointer"
      }, style),
      href: rest["link"].href,
      onClick: trackEventClick,
      target: ((_d = rest[eventType]) == null ? void 0 : _d.openNewTab) ? "_blank" : "_top",
      className,
      rel: ((_e = rest[eventType]) == null ? void 0 : _e.nofollow) ? "nofollow" : "noopener noreferrer",
      children
    });
  if (eventType === "inPage" && rest["inPage"])
    return /* @__PURE__ */ jsxRuntime.jsx("div", {
      style: __spreadValues({ cursor: "pointer" }, style),
      onClick: () => {
        scrollToElement(rest["inPage"]);
        trackEventClick();
      },
      ref,
      children
    });
  if (eventType === "internal" && ((_f = rest["internal"]) == null ? void 0 : _f.href))
    return /* @__PURE__ */ jsxRuntime.jsx("a", {
      style: __spreadValues({
        textDecoration: "none",
        color: "unset",
        cursor: "pointer"
      }, style),
      href: `/${rest["internal"].href}`,
      onClick: trackEventClick,
      target: ((_g = rest["internal"]) == null ? void 0 : _g.openNewTab) ? "_blank" : "_top",
      className,
      rel: "noopener noreferrer",
      children
    });
  if (eventType === "email" && rest["email"])
    return /* @__PURE__ */ jsxRuntime.jsx("a", {
      style: __spreadValues({
        textDecoration: "none",
        color: "unset",
        cursor: "pointer"
      }, style),
      href: `mailto:${rest["email"]}`,
      onClick: trackEventClick,
      className,
      rel: "noopener noreferrer",
      target: "_top",
      children
    });
  if (eventType === "phone" && rest["phone"])
    return /* @__PURE__ */ jsxRuntime.jsx("a", {
      style: __spreadValues({
        textDecoration: "none",
        color: "unset",
        cursor: "pointer"
      }, style),
      href: `tel:${rest["phone"]}`,
      onClick: trackEventClick,
      className,
      rel: "noopener noreferrer",
      target: "_top",
      children
    });
  if (eventType === "openPopup" && rest["togglePopup"]) {
    return /* @__PURE__ */ jsxRuntime.jsx("div", {
      ref,
      style,
      onClick: () => {
        openPopup(rest["togglePopup"]);
        trackEventClick();
      },
      children
    });
  }
  if (eventType === "closePopupList" && ((_h = rest["togglePopupList"]) == null ? void 0 : _h.length)) {
    return /* @__PURE__ */ jsxRuntime.jsx("div", {
      ref,
      style,
      onClick: () => {
        closePopupList(rest["togglePopupList"]);
        trackEventClick();
      },
      children
    });
  }
  if (eventType === "closePopup" && rest["togglePopup"]) {
    return /* @__PURE__ */ jsxRuntime.jsx("div", {
      ref,
      style,
      onClick: () => {
        closePopup(rest["togglePopup"]);
        trackEventClick();
      },
      children
    });
  }
  return /* @__PURE__ */ jsxRuntime.jsx("div", {
    style,
    onClick: trackEventClick,
    children
  });
};

exports.Link = Link;
