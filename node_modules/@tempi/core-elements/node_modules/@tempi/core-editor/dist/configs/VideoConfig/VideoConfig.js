'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var icons = require('@ant-design/icons');
var styled = require('@emotion/styled');
var antd = require('antd');
var React = require('react');
var helper = require('./helper.js');
var usePropSeparateDevice = require('../../hooks/usePropSeparateDevice.js');
var BuilderContext = require('../../contexts/BuilderContext.js');
var InputConfig = require('../InputConfig/InputConfig.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const { Text } = antd.Typography;
const VideoConfig = ({
  youtubeVideoPropKey,
  allowExternalUrl = true,
  uploadVideoPropKey,
  allowUploadVideo = true,
  separateDevice
}) => {
  const [fileList, setFileList] = React.useState([]);
  const [form] = antd.Form.useForm();
  const [uploading, setUploading] = React.useState(false);
  const [externalUploading, setExternalUploading] = React.useState(false);
  const [uploadUrl, setUploadUrl] = usePropSeparateDevice.usePropSeparateDevice(
    uploadVideoPropKey,
    separateDevice
  );
  React.useEffect(() => {
    if (!!uploadUrl)
      setFileList([
        { url: uploadUrl, uid: uploadUrl, name: helper.getFileName(uploadUrl) }
      ]);
    else
      setFileList([]);
  }, [uploadUrl]);
  const demoVideo = (file, _type) => {
    return URL.createObjectURL(file);
  };
  const { uploadFileHandler = demoVideo } = BuilderContext.useBuilder();
  const onUploadVideo = async (options) => {
    const { file, onSuccess, onError } = options;
    try {
      setUploading(true);
      const url = await uploadFileHandler(file, "video");
      setUploadUrl(url);
      onSuccess(file);
    } catch (e) {
      console.error(e);
      onError(e, file);
    } finally {
      setUploading(false);
    }
  };
  const onRemoveVideo = () => {
    setUploadUrl("");
  };
  const uploadProps = {
    beforeUpload: helper.beforeUploadVideo,
    customRequest: onUploadVideo,
    listType: "picture",
    maxCount: 1,
    multiple: false,
    fileList,
    onRemove: onRemoveVideo
  };
  const handleUploadVideoByURL = async (values) => {
    const { url } = values;
    try {
      setExternalUploading(true);
      const videoUrl = await uploadFileHandler(url, "videoUrl");
      setUploadUrl(videoUrl);
    } finally {
      form.resetFields();
      setExternalUploading(false);
    }
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(InputConfig.InputConfig, {
        propKey: youtubeVideoPropKey,
        separateDevice,
        formItemProps: { label: i18n.t("\u0110\u01B0\u1EDDng d\u1EABn Youtube"), layout: "vertical" },
        inputProps: { placeholder: i18n.t("Nh\u1EADp \u0111\u01B0\u1EDDng d\u1EABn Youtube") }
      }),
      allowExternalUrl && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(StyledDivider, {
            plain: true,
            children: i18n.t("ho\u1EB7c")
          }),
          /* @__PURE__ */ jsxRuntime.jsx(antd.Form, {
            form,
            onFinish: handleUploadVideoByURL,
            children: /* @__PURE__ */ jsxRuntime.jsx(antd.Form.Item, {
              name: "url",
              rules: [
                { required: true, message: i18n.t("URL kh\xF4ng \u0111\u01B0\u1EE3c \u0111\u1EC3 tr\u1ED1ng") },
                { type: "url", message: i18n.t("URL sai \u0111\u1ECBnh d\u1EA1ng") }
              ],
              children: /* @__PURE__ */ jsxRuntime.jsx(antd.Input.Search, {
                placeholder: i18n.t("D\xF9ng \u0111\u01B0\u1EDDng d\u1EABn video"),
                enterButton: i18n.t("D\xF9ng video"),
                loading: externalUploading,
                onSearch: () => form.submit()
              })
            })
          }),
          /* @__PURE__ */ jsxRuntime.jsx(Text, {
            type: "secondary",
            children: i18n.t("video_config.note")
          })
        ]
      }),
      allowUploadVideo && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(StyledDivider, {
            plain: true,
            children: i18n.t("ho\u1EB7c")
          }),
          /* @__PURE__ */ jsxRuntime.jsx(StyledUploader, __spreadProps(__spreadValues({}, uploadProps), {
            children: /* @__PURE__ */ jsxRuntime.jsx(antd.Button, {
              block: true,
              icon: /* @__PURE__ */ jsxRuntime.jsx(icons.UploadOutlined, {}),
              loading: uploading,
              children: i18n.t("T\u1EA3i l\xEAn video (MP4, WebM, OGV)")
            })
          }))
        ]
      })
    ]
  });
};
const StyledDivider = styled__default["default"](antd.Divider)`
  justify-content: center;
  &::before,
  &::after {
    width: 25% !important;
  }
`;
const StyledUploader = styled__default["default"](antd.Upload)`
  div.ant-upload {
    width: 100%;
  }
`;

exports.VideoConfig = VideoConfig;
