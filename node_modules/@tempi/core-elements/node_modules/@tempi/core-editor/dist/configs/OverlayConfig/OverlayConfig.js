'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var React = require('react');
var coreRenderer = require('@tempi/core-renderer');
var SwitchToShow = require('../../components/SwitchToShow/SwitchToShow.js');
var propKey = require('../../constants/propKey.js');
var usePropSeparateDevice = require('../../hooks/usePropSeparateDevice.js');
var ColorPickerConfig = require('../ColorPickerConfig/ColorPickerConfig.js');

const OverlayConfig = ({
  propKey: propKey$1 = propKey.PROP_KEY.CommonStyle,
  separateDevice
}) => {
  const [checkedOverlay, setCheckedOverlay] = React.useState(false);
  const overlayTypeKey = propKey.PROP_KEY.joinKey(
    propKey$1,
    propKey.PROP_KEY.BackgroundOverlayType
  );
  const bgOverlayKey = propKey.PROP_KEY.joinKey(propKey$1, propKey.PROP_KEY.BackgroundOverlay);
  const [overlayType, setOverlayType] = usePropSeparateDevice.usePropSeparateDevice(
    overlayTypeKey,
    separateDevice
  );
  const [backgroundOverlay, setBackgroundOverlay] = usePropSeparateDevice.usePropSeparateDevice(
    bgOverlayKey,
    separateDevice
  );
  const handleChangeOverlay = (checked) => {
    if (checked) {
      setCheckedOverlay(true);
      setOverlayType(coreRenderer.OverlayType.color);
    } else {
      setCheckedOverlay(false);
      setOverlayType(void 0);
      setBackgroundOverlay(void 0);
    }
  };
  React.useEffect(() => {
    if (overlayType || backgroundOverlay) {
      setCheckedOverlay(true);
    }
  }, []);
  return /* @__PURE__ */ jsxRuntime.jsx(SwitchToShow.SwitchToShow, {
    show: checkedOverlay,
    setShow: handleChangeOverlay,
    formItemProps: {
      label: i18n.t("L\u1EDBp ph\u1EE7 n\u1EC1n")
    },
    children: /* @__PURE__ */ jsxRuntime.jsx(ColorPickerConfig.ColorPickerConfig, {
      propKey: bgOverlayKey,
      gradientPicker: true,
      separateDevice
    })
  });
};

exports.OverlayConfig = OverlayConfig;
