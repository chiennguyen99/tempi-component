'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var styled = require('@emotion/styled');
var coreRenderer = require('@tempi/core-renderer');
var antd = require('antd');
var React = require('react');
var helpers = require('./helpers.js');
var ImageUploadButton = require('./ImageUploadButton.js');
var InputConfig = require('../InputConfig/InputConfig.js');
var text = require('../../utils/text.js');
var usePropSeparateDevice = require('../../hooks/usePropSeparateDevice.js');
var BuilderContext = require('../../contexts/BuilderContext.js');
var FormItem = require('../../components/FormItem/FormItem.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

const ImageConfig = ({
  propKey,
  widthPropKey,
  layout = "horizontal",
  placeholderImage = /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: i18n.t("T\u1EA3i \u1EA3nh l\xEAn (T\u1ED1i \u0111a 20MB)")
  }),
  altPropKey,
  labels = {},
  separateDevice,
  allowUploadImageByUrl = true,
  allowCropImage,
  cropProps,
  additionalConfig
}) => {
  const [form] = antd.Form.useForm();
  const [uploading, setUploading] = React.useState(false);
  const demoUploadImage = (url, _type) => {
    return url;
  };
  const [imageUrl, setImageUrl] = usePropSeparateDevice.usePropSeparateDevice(
    propKey,
    separateDevice
  );
  const [, setWidth] = usePropSeparateDevice.usePropSeparateDevice(widthPropKey, separateDevice);
  const { uploadFileHandler = demoUploadImage } = BuilderContext.useBuilder();
  const handleUploadImageByURL = async (values) => {
    const { url } = values;
    try {
      setUploading(true);
      const imageUrl2 = await uploadFileHandler(url, "url");
      setImageUrl(imageUrl2);
      if (widthPropKey) {
        const img = new Image();
        img.src = coreRenderer.getImageUrlFromGoogleUserContent(imageUrl2, { width: 0 });
        img.onload = () => {
          if (img.complete) {
            setWidth(img.width);
          }
        };
      }
    } finally {
      form.resetFields();
      setUploading(false);
    }
  };
  React.useEffect(() => {
    const getBaseImageUrl = (imageUrl2) => {
      if (text.isPrefixUrl(imageUrl2)) {
        return imageUrl2.slice(4, imageUrl2.lastIndexOf("="));
      }
      return imageUrl2;
    };
    const baseImageUrl = getBaseImageUrl(imageUrl);
    if (imageUrl !== baseImageUrl)
      setImageUrl(baseImageUrl);
  }, []);
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(FormItem.FormItem, {
        layout,
        label: (labels == null ? void 0 : labels.image) || i18n.t("common.image"),
        children: /* @__PURE__ */ jsxRuntime.jsxs(antd.Spin, {
          spinning: uploading,
          children: [
            /* @__PURE__ */ jsxRuntime.jsx("div", {
              style: {
                position: "relative",
                width: layout === "vertical" ? "100%" : "auto"
              },
              children: /* @__PURE__ */ jsxRuntime.jsx(ImageUploadButton.ImageUploadButton, {
                accept: "image/jpg, image/jpeg, image/png, image/gif, image/webp",
                beforeUpload: helpers.beforeUploadImage,
                imagePropKey: propKey,
                widthPropKey,
                placeholder: placeholderImage,
                deleteImage: () => setImageUrl(void 0),
                separateDevice,
                layout,
                allowCropImage,
                cropProps
              })
            }),
            !imageUrl && allowUploadImageByUrl && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
              children: [
                /* @__PURE__ */ jsxRuntime.jsx(StyledDivider, {
                  plain: true,
                  children: i18n.t("ho\u1EB7c")
                }),
                /* @__PURE__ */ jsxRuntime.jsx(antd.Form, {
                  form,
                  onFinish: handleUploadImageByURL,
                  children: /* @__PURE__ */ jsxRuntime.jsx(antd.Form.Item, {
                    name: "url",
                    rules: [
                      { required: true, message: i18n.t("URL kh\xF4ng \u0111\u01B0\u1EE3c \u0111\u1EC3 tr\u1ED1ng") },
                      { type: "url", message: i18n.t("URL sai \u0111\u1ECBnh d\u1EA1ng") }
                    ],
                    children: /* @__PURE__ */ jsxRuntime.jsx(antd.Input.Search, {
                      placeholder: i18n.t("D\xF9ng \u0111\u01B0\u1EDDng d\u1EABn \u1EA3nh"),
                      enterButton: i18n.t("D\xF9ng \u1EA3nh"),
                      loading: uploading,
                      onSearch: () => form.submit()
                    })
                  })
                })
              ]
            })
          ]
        })
      }),
      !!altPropKey && /* @__PURE__ */ jsxRuntime.jsx(InputConfig.InputConfig, {
        propKey: altPropKey,
        formItemProps: {
          label: (labels == null ? void 0 : labels.alt) || i18n.t("image_config.alt"),
          layout
        },
        inputProps: {
          style: {
            width: layout === "horizontal" ? 140 : "100%"
          },
          placeholder: i18n.t("Nh\u1EADp v\u0103n b\u1EA3n thay th\u1EBF")
        },
        separateDevice
      }),
      additionalConfig
    ]
  });
};
const StyledDivider = styled__default["default"](antd.Divider)`
  justify-content: center;
  &::before,
  &::after {
    width: 25% !important;
  }
`;

exports.ImageConfig = ImageConfig;
