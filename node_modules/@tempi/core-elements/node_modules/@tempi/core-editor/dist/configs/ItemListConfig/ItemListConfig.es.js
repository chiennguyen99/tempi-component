import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import { t } from '../../i18n.es.js';
import { DndContext } from '@dnd-kit/core';
import { restrictToVerticalAxis, restrictToWindowEdges, restrictToFirstScrollableAncestor } from '@dnd-kit/modifiers';
import { useSortable, SortableContext, verticalListSortingStrategy, arrayMove } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import styled from '@emotion/styled';
import { Divider, Empty, Button } from 'antd';
import { useState } from 'react';
import { v4 } from 'uuid';
import { PlusOutlined, HolderOutlined } from '@ant-design/icons';
import { CopyRegular, DeleteRegular } from '@fluentui/react-icons';
import { usePropSeparateDevice } from '../../hooks/usePropSeparateDevice.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const truncate = (input, length) => {
  if ((input == null ? void 0 : input.length) > length) {
    return input.substring(0, length) + "...";
  }
  return input;
};
const ItemConfig = ({
  index,
  item,
  onDuplicate,
  onRemove,
  activeItem: activeField,
  setActiveItem: setActiveField,
  activeItemConfig,
  activeItemConfigProps,
  allowRemove = true,
  allowDuplicate = true,
  separateDevice,
  allowDrag = true,
  titleKey,
  customTitle
}) => {
  const { setNodeRef, attributes, listeners, transform } = useSortable({
    id: item == null ? void 0 : item.dndId
  });
  const ActiveItemConfig = activeItemConfig;
  const getDisplayTitle = () => {
    return customTitle ? customTitle(item) : truncate(item[titleKey], 30) || index + 1;
  };
  return /* @__PURE__ */ jsx(Fragment, {
    children: /* @__PURE__ */ jsxs(StyledTagField, {
      ref: setNodeRef,
      style: { transform: CSS.Transform.toString(transform) },
      className: activeField === index ? "active" : null,
      children: [
        /* @__PURE__ */ jsxs(StyledTagHeader, {
          onClick: () => {
            if (activeField === index)
              setActiveField(void 0);
            else
              setActiveField(index);
          },
          children: [
            /* @__PURE__ */ jsxs("div", {
              className: "flex",
              children: [
                allowDrag && /* @__PURE__ */ jsx(StyledAction, __spreadProps(__spreadValues(__spreadValues({}, listeners), attributes), {
                  style: { cursor: "move", marginRight: 8 },
                  children: /* @__PURE__ */ jsx(HolderOutlined, {
                    style: {
                      fontSize: 20
                    }
                  })
                })),
                /* @__PURE__ */ jsx("div", {
                  children: getDisplayTitle()
                })
              ]
            }),
            /* @__PURE__ */ jsxs("div", {
              className: "flex",
              children: [
                allowDuplicate && /* @__PURE__ */ jsx(StyledAction, {
                  style: { marginRight: 8 },
                  onClick: (e) => {
                    e.stopPropagation();
                    onDuplicate();
                  },
                  children: /* @__PURE__ */ jsx(CopyRegular, {
                    fontSize: 20
                  })
                }),
                allowRemove && /* @__PURE__ */ jsx(StyledAction, {
                  onClick: (e) => {
                    e.stopPropagation();
                    onRemove();
                  },
                  children: /* @__PURE__ */ jsx(DeleteRegular, {
                    fontSize: 20
                  })
                })
              ]
            })
          ]
        }),
        activeField === index && !!activeItemConfig && /* @__PURE__ */ jsxs(Fragment, {
          children: [
            /* @__PURE__ */ jsx(Divider, {
              className: "my-half mb-0"
            }),
            /* @__PURE__ */ jsx(ActiveItemConfig, __spreadValues({
              index,
              separateDevice
            }, activeItemConfigProps))
          ]
        })
      ]
    }, index)
  });
};
const ItemListConfig = ({
  activeItemConfig,
  activeItemConfigProps,
  defaultActiveItem,
  defaultItem,
  propKey,
  maxItem,
  allowDuplicate = true,
  allowRemove = true,
  allowInsert = true,
  allowDrag = true,
  addItemText = t("Th\xEAm ph\u1EA7n t\u1EED"),
  separateDevice = false,
  customDuplicate,
  customInsert,
  customRemove,
  titleKey = "title",
  customTitle,
  emptyDescription
}) => {
  var _a, _b;
  const [items, setItems] = usePropSeparateDevice(propKey, separateDevice, {
    formatter: (val) => (val || []).map((el) => __spreadProps(__spreadValues({}, el), {
      dndId: el.dndId ? el.dndId : v4()
    })),
    parser: (val) => (val || []).map((el) => {
      const _a2 = el, rest = __objRest(_a2, ["dndId"]);
      return rest;
    })
  });
  const [activeItem, setActiveItem] = useState(defaultActiveItem || 0);
  const addField = customInsert ? customInsert : () => {
    const newItem = __spreadValues({}, defaultItem);
    if (newItem.id) {
      newItem.id = v4();
    }
    setItems([
      ...items,
      __spreadValues({}, newItem)
    ]);
  };
  const removeItem = customRemove ? customRemove : (index) => {
    const cloneInputs = [...items];
    cloneInputs.splice(index, 1);
    setItems(cloneInputs);
  };
  const duplicateItem = customDuplicate ? customDuplicate : (index) => {
    if (items.length >= maxItem)
      return;
    const cloneItem = __spreadValues({}, items[index]);
    if (cloneItem.id) {
      cloneItem.id = v4();
    }
    const cloneInputs = [...items];
    cloneInputs.splice(index + 1, 0, cloneItem);
    setItems(cloneInputs);
  };
  const handleDragEnd = ({ active, over }) => {
    if ((active == null ? void 0 : active.id) !== (over == null ? void 0 : over.id)) {
      const _inputs = [...items];
      const oldIndex = _inputs.findIndex((el) => el.dndId === (active == null ? void 0 : active.id));
      const newIndex = _inputs.findIndex((el) => el.dndId === (over == null ? void 0 : over.id));
      setItems(arrayMove(_inputs, oldIndex, newIndex));
      setActiveItem(void 0);
    }
  };
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(DndContext, {
        modifiers: [
          restrictToVerticalAxis,
          restrictToWindowEdges,
          restrictToFirstScrollableAncestor
        ],
        onDragEnd: handleDragEnd,
        children: items.length === 0 ? /* @__PURE__ */ jsx(Empty, {
          description: emptyDescription
        }) : /* @__PURE__ */ jsx(SortableContext, {
          items: (_a = items.map) == null ? void 0 : _a.call(items, (el) => el.dndId),
          strategy: verticalListSortingStrategy,
          disabled: !allowDrag,
          children: (_b = items.map) == null ? void 0 : _b.call(items, (el, index) => /* @__PURE__ */ jsx(ItemConfig, {
            activeItem,
            setActiveItem,
            item: el,
            index,
            onDuplicate: () => duplicateItem(index),
            onRemove: () => removeItem(index),
            activeItemConfig,
            activeItemConfigProps,
            allowDuplicate,
            allowRemove,
            separateDevice,
            allowDrag,
            titleKey,
            customTitle
          }, index))
        })
      }),
      allowInsert && /* @__PURE__ */ jsx(Button, {
        style: {
          marginTop: 8,
          marginBottom: 8
        },
        disabled: maxItem && items.length >= maxItem,
        type: "primary",
        block: true,
        icon: /* @__PURE__ */ jsx(PlusOutlined, {}),
        onClick: addField,
        children: addItemText + (maxItem ? ` (${items.length}/${maxItem})` : "")
      })
    ]
  });
};
const StyledTagField = styled.div`
  justify-content: space-between;
  padding: 0.5rem;
  border-radius: 4px;
  border: 1px solid var(--border-color);
  margin-bottom: 8px;
  &.active {
    border-color: ${(props) => props.theme.colorPrimary};
  }
`;
const StyledTagHeader = styled.div`
  display: flex;
  flex-grow: 1;
  align-items: center;
  justify-content: space-between;
  cursor: pointer;
`;
const StyledAction = styled.div`
  background-color: transparent;
  cursor: pointer;
`;

export { ItemConfig, ItemListConfig };
