import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../i18n.es.js';
import styled from '@emotion/styled';
import { getImageUrlFromGoogleUserContent } from '@tempi/core-renderer';
import { Form, Spin, Input, Divider } from 'antd';
import { useState, useEffect } from 'react';
import { beforeUploadImage } from './helpers.es.js';
import { ImageUploadButton } from './ImageUploadButton.es.js';
import { InputConfig } from '../InputConfig/InputConfig.es.js';
import { isPrefixUrl } from '../../utils/text.es.js';
import { usePropSeparateDevice } from '../../hooks/usePropSeparateDevice.es.js';
import { useBuilder } from '../../contexts/BuilderContext.es.js';
import { FormItem } from '../../components/FormItem/FormItem.es.js';

const ImageConfig = ({
  propKey,
  widthPropKey,
  layout = "horizontal",
  placeholderImage = /* @__PURE__ */ jsx(Fragment, {
    children: t("T\u1EA3i \u1EA3nh l\xEAn (T\u1ED1i \u0111a 20MB)")
  }),
  altPropKey,
  labels = {},
  separateDevice,
  allowUploadImageByUrl = true,
  allowCropImage,
  cropProps,
  additionalConfig
}) => {
  const [form] = Form.useForm();
  const [uploading, setUploading] = useState(false);
  const demoUploadImage = (url, _type) => {
    return url;
  };
  const [imageUrl, setImageUrl] = usePropSeparateDevice(
    propKey,
    separateDevice
  );
  const [, setWidth] = usePropSeparateDevice(widthPropKey, separateDevice);
  const { uploadFileHandler = demoUploadImage } = useBuilder();
  const handleUploadImageByURL = async (values) => {
    const { url } = values;
    try {
      setUploading(true);
      const imageUrl2 = await uploadFileHandler(url, "url");
      setImageUrl(imageUrl2);
      if (widthPropKey) {
        const img = new Image();
        img.src = getImageUrlFromGoogleUserContent(imageUrl2, { width: 0 });
        img.onload = () => {
          if (img.complete) {
            setWidth(img.width);
          }
        };
      }
    } finally {
      form.resetFields();
      setUploading(false);
    }
  };
  useEffect(() => {
    const getBaseImageUrl = (imageUrl2) => {
      if (isPrefixUrl(imageUrl2)) {
        return imageUrl2.slice(4, imageUrl2.lastIndexOf("="));
      }
      return imageUrl2;
    };
    const baseImageUrl = getBaseImageUrl(imageUrl);
    if (imageUrl !== baseImageUrl)
      setImageUrl(baseImageUrl);
  }, []);
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(FormItem, {
        layout,
        label: (labels == null ? void 0 : labels.image) || t("common.image"),
        children: /* @__PURE__ */ jsxs(Spin, {
          spinning: uploading,
          children: [
            /* @__PURE__ */ jsx("div", {
              style: {
                position: "relative",
                width: layout === "vertical" ? "100%" : "auto"
              },
              children: /* @__PURE__ */ jsx(ImageUploadButton, {
                accept: "image/jpg, image/jpeg, image/png, image/gif, image/webp",
                beforeUpload: beforeUploadImage,
                imagePropKey: propKey,
                widthPropKey,
                placeholder: placeholderImage,
                deleteImage: () => setImageUrl(void 0),
                separateDevice,
                layout,
                allowCropImage,
                cropProps
              })
            }),
            !imageUrl && allowUploadImageByUrl && /* @__PURE__ */ jsxs(Fragment, {
              children: [
                /* @__PURE__ */ jsx(StyledDivider, {
                  plain: true,
                  children: t("ho\u1EB7c")
                }),
                /* @__PURE__ */ jsx(Form, {
                  form,
                  onFinish: handleUploadImageByURL,
                  children: /* @__PURE__ */ jsx(Form.Item, {
                    name: "url",
                    rules: [
                      { required: true, message: t("URL kh\xF4ng \u0111\u01B0\u1EE3c \u0111\u1EC3 tr\u1ED1ng") },
                      { type: "url", message: t("URL sai \u0111\u1ECBnh d\u1EA1ng") }
                    ],
                    children: /* @__PURE__ */ jsx(Input.Search, {
                      placeholder: t("D\xF9ng \u0111\u01B0\u1EDDng d\u1EABn \u1EA3nh"),
                      enterButton: t("D\xF9ng \u1EA3nh"),
                      loading: uploading,
                      onSearch: () => form.submit()
                    })
                  })
                })
              ]
            })
          ]
        })
      }),
      !!altPropKey && /* @__PURE__ */ jsx(InputConfig, {
        propKey: altPropKey,
        formItemProps: {
          label: (labels == null ? void 0 : labels.alt) || t("image_config.alt"),
          layout
        },
        inputProps: {
          style: {
            width: layout === "horizontal" ? 140 : "100%"
          },
          placeholder: t("Nh\u1EADp v\u0103n b\u1EA3n thay th\u1EBF")
        },
        separateDevice
      }),
      additionalConfig
    ]
  });
};
const StyledDivider = styled(Divider)`
  justify-content: center;
  &::before,
  &::after {
    width: 25% !important;
  }
`;

export { ImageConfig };
