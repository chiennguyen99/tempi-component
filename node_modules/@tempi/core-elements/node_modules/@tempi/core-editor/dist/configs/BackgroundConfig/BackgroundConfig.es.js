import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { getOptionsI18n, t } from '../../i18n.es.js';
import { useState, useEffect } from 'react';
import { RadioConfig } from '../RadioConfig/RadioConfig.es.js';
import { BackgroundImageConfig } from '../BackgroundImageConfig/BackgroundImageConfig.es.js';
import { PROP_KEY } from '../../constants/propKey.es.js';
import { usePropSeparateDevice } from '../../hooks/usePropSeparateDevice.es.js';
import { ColorPickerConfig } from '../ColorPickerConfig/ColorPickerConfig.es.js';

const backgroundTypeOptions = [
  { label: "common.image", value: "image" /* image */ },
  { label: "common.color", value: "color" /* color */ }
];
const BackgroundConfig = ({
  title = t("N\u1EC1n"),
  propKey,
  separateDevice
}) => {
  const bgColorKey = PROP_KEY.joinKey(propKey, PROP_KEY.BackgroundColor);
  const bgImageKey = PROP_KEY.joinKey(propKey, PROP_KEY.BackgroundImage);
  const [tempImageUrl, setTempImageUrl] = useState("");
  const [tempColor, setTempColor] = useState(void 0);
  const [imageUrl, setImageUrl] = usePropSeparateDevice(
    bgImageKey,
    separateDevice
  );
  const [bgColor, setBgColor] = usePropSeparateDevice(
    bgColorKey,
    separateDevice
  );
  const [active, setActive] = useState(
    bgColor ? "color" /* color */ : "image" /* image */
  );
  useEffect(() => {
    if (active === "image" /* image */) {
      setTempColor(bgColor);
      setBgColor(void 0);
      if (tempImageUrl !== "") {
        setImageUrl(tempImageUrl);
      }
    } else {
      setTempImageUrl(imageUrl);
      setImageUrl("");
      if (tempColor !== void 0) {
        setBgColor(tempColor);
      }
    }
  }, [active]);
  const renderBackgroundType = () => {
    if (active === "image" /* image */) {
      return /* @__PURE__ */ jsx(BackgroundImageConfig, {
        propKey,
        separateDevice
      });
    }
    return /* @__PURE__ */ jsx(ColorPickerConfig, {
      propKey: bgColorKey,
      gradientPicker: true,
      separateDevice,
      formItemProps: { label: t("M\xE0u n\u1EC1n") }
    });
  };
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(RadioConfig, {
        formItemProps: { label: title },
        radioGroupProps: {
          options: getOptionsI18n(t, backgroundTypeOptions, "label"),
          value: active,
          onChange: (e) => setActive(e.target.value),
          optionType: "button",
          buttonStyle: "solid"
        }
      }),
      renderBackgroundType()
    ]
  });
};

export { BackgroundConfig };
