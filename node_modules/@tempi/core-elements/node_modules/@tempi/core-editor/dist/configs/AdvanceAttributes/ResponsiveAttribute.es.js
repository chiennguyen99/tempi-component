import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { t } from '../../i18n.es.js';
import set from 'lodash.set';
import { useNode } from '@tempi/dnd-core';
import { SwitchConfig } from '../SwitchConfig/SwitchConfig.es.js';
import { PROP_KEY } from '../../constants/propKey.es.js';

const ResponsiveAttribute = () => {
  const {
    responsive,
    actions: { setProp }
  } = useNode((node) => ({
    responsive: node.data.props.responsive
  }));
  const hiddenXs = (responsive == null ? void 0 : responsive.hiddenXs) || false;
  const hiddenMd = (responsive == null ? void 0 : responsive.hiddenMd) || false;
  const handleClick = (type) => {
    if (type === "mobile") {
      setProp((props) => {
        set(props, PROP_KEY.HiddenXs, !hiddenXs);
      }, 500);
    }
    if (type === "desktop") {
      setProp((props) => {
        set(props, PROP_KEY.HiddenMd, !hiddenMd);
      }, 500);
    }
  };
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx(SwitchConfig, {
        formItemProps: {
          label: t("M\xE1y t\xEDnh")
        },
        switchProps: {
          checkedChildren: t("Hi\u1EC7n"),
          unCheckedChildren: t("\u1EA8n"),
          checked: !hiddenMd,
          onChange: () => handleClick("desktop")
        }
      }),
      /* @__PURE__ */ jsx(SwitchConfig, {
        formItemProps: {
          label: t("\u0110i\u1EC7n tho\u1EA1i"),
          style: {
            marginBottom: 0
          }
        },
        switchProps: {
          checkedChildren: t("Hi\u1EC7n"),
          unCheckedChildren: t("\u1EA8n"),
          checked: !hiddenXs,
          onChange: () => handleClick("mobile")
        }
      })
    ]
  });
};

export { ResponsiveAttribute };
