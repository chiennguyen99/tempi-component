'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var i18n = require('../../i18n.js');
var set = require('lodash.set');
var dndCore = require('@tempi/dnd-core');
var SwitchConfig = require('../SwitchConfig/SwitchConfig.js');
var propKey = require('../../constants/propKey.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var set__default = /*#__PURE__*/_interopDefaultLegacy(set);

const ResponsiveAttribute = () => {
  const {
    responsive,
    actions: { setProp }
  } = dndCore.useNode((node) => ({
    responsive: node.data.props.responsive
  }));
  const hiddenXs = (responsive == null ? void 0 : responsive.hiddenXs) || false;
  const hiddenMd = (responsive == null ? void 0 : responsive.hiddenMd) || false;
  const handleClick = (type) => {
    if (type === "mobile") {
      setProp((props) => {
        set__default["default"](props, propKey.PROP_KEY.HiddenXs, !hiddenXs);
      }, 500);
    }
    if (type === "desktop") {
      setProp((props) => {
        set__default["default"](props, propKey.PROP_KEY.HiddenMd, !hiddenMd);
      }, 500);
    }
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(SwitchConfig.SwitchConfig, {
        formItemProps: {
          label: i18n.t("M\xE1y t\xEDnh")
        },
        switchProps: {
          checkedChildren: i18n.t("Hi\u1EC7n"),
          unCheckedChildren: i18n.t("\u1EA8n"),
          checked: !hiddenMd,
          onChange: () => handleClick("desktop")
        }
      }),
      /* @__PURE__ */ jsxRuntime.jsx(SwitchConfig.SwitchConfig, {
        formItemProps: {
          label: i18n.t("\u0110i\u1EC7n tho\u1EA1i"),
          style: {
            marginBottom: 0
          }
        },
        switchProps: {
          checkedChildren: i18n.t("Hi\u1EC7n"),
          unCheckedChildren: i18n.t("\u1EA8n"),
          checked: !hiddenXs,
          onChange: () => handleClick("mobile")
        }
      })
    ]
  });
};

exports.ResponsiveAttribute = ResponsiveAttribute;
