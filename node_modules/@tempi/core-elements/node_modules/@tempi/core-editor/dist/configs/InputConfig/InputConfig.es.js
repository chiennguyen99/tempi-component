import { jsx } from 'react/jsx-runtime';
import { Tooltip, Input as Input$1 } from 'antd';
import { usePropSeparateDevice } from '../../hooks/usePropSeparateDevice.es.js';
import { FormItem } from '../../components/FormItem/FormItem.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const InputConfig = (props) => {
  const {
    propKey,
    formItemProps,
    inputProps,
    separateDevice,
    showTooltip,
    tooltipProps = {}
  } = props;
  const [prop, setProp] = usePropSeparateDevice(propKey, separateDevice);
  const { layout = "horizontal" } = formItemProps || {};
  const render = () => /* @__PURE__ */ jsx(FormItem, __spreadProps(__spreadValues({
    layout
  }, formItemProps), {
    children: /* @__PURE__ */ jsx(Input, __spreadValues({
      value: prop || "",
      onChange: (e) => {
        setProp(e.target.value || void 0);
      },
      style: { width: layout === "horizontal" ? 140 : "100%" }
    }, inputProps))
  }));
  return showTooltip ? /* @__PURE__ */ jsx(Tooltip, __spreadProps(__spreadValues({
    title: prop
  }, tooltipProps), {
    children: render()
  })) : render();
};
const Input = (props) => {
  return /* @__PURE__ */ jsx(Input$1, __spreadValues({}, props));
};

export { Input, InputConfig };
