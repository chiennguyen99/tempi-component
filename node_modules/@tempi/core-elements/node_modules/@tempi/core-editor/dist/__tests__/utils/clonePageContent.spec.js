import { ROOT } from '@tempi/core-renderer';
import { clonePageContent } from '../../utils';
const mockCallback = (component, _mappingOldNewKey) => {
    return component;
};
describe('clonePageContent', () => {
    it('clonePageContent - miss expectation - empty object', async () => {
        const copyPageContent = clonePageContent({}, mockCallback);
        expect(copyPageContent).toEqual({});
    });
    it('clonePageContent - miss expectation - page content null', async () => {
        const copyPageContent = clonePageContent(null, mockCallback);
        expect(copyPageContent).toEqual(null);
    });
    it('clonePageContent - miss expectation - page content full - include ROOT', async () => {
        const pageContent = {
            ROOT: {
                id: 'ROOT',
                parentId: null,
                tag: 'root',
                resolvedName: 'RootEditor',
                style: {
                    backgroundSize: 'cover',
                    bgImagePercent: 100,
                    backgroundRepeat: 'no-repeat',
                },
                isCanvas: true,
                customAttributes: {
                    root: {
                        responsive: {
                            hiddenXs: false,
                            hiddenMd: false,
                        },
                        pageWidthType: 'fixed',
                        pageMaxWidth: 1232,
                        desktop: {},
                        colors: ['rgba(204,128,128,1)', 'rgba(217,178,178,1)'],
                    },
                },
                children: ['1oza4vQMMm'],
            },
            '1oza4vQMMm': {
                id: '1oza4vQMMm',
                parentId: 'ROOT',
                tag: 'section',
                resolvedName: 'RowEditor',
                style: {
                    padding: {
                        top: 8,
                        bottom: 8,
                        left: 16,
                        right: 16,
                    },
                },
                isCanvas: true,
                customAttributes: {
                    section: {
                        responsive: {
                            hiddenXs: false,
                            hiddenMd: false,
                        },
                        gutter: [0, 0],
                        widthType: 'full',
                        contentWidthType: 'fixed',
                        row: {
                            commonStyle: {
                                maxWidth: 1232,
                            },
                        },
                    },
                },
                children: ['wJvHCuapa3'],
            },
            wJvHCuapa3: {
                id: 'wJvHCuapa3',
                parentId: '1oza4vQMMm',
                tag: 'col',
                resolvedName: 'ColEditor',
                style: {
                    padding: {
                        left: 15,
                        top: 5,
                        bottom: 5,
                        right: 15,
                    },
                },
                isCanvas: true,
                customAttributes: {
                    col: {
                        responsive: {
                            hiddenXs: false,
                            hiddenMd: false,
                        },
                        md: {
                            flex: '100%',
                        },
                        xs: {
                            flex: '100%',
                        },
                    },
                },
                children: ['lbT8UTPjAn'],
            },
            lbT8UTPjAn: {
                id: 'lbT8UTPjAn',
                parentId: 'wJvHCuapa3',
                tag: 'formv4',
                resolvedName: 'FormV4Editor',
                style: {},
                isCanvas: true,
                customAttributes: {
                    formv4: {
                        responsive: {
                            hiddenXs: false,
                            hiddenMd: false,
                        },
                        formStyle: {
                            flexDirection: 'column',
                            gap: 8,
                        },
                        inputStyle: {
                            borderRadius: 4,
                        },
                        showLabel: true,
                        submits: [],
                        hiddenFields: [],
                        response: {
                            custom: [],
                            success: '',
                            responseType: 'default',
                        },
                        inputs: [
                            {
                                type: 'text',
                                label: 'Họ tên',
                                required: true,
                                name: 'name',
                                commonStyle: {
                                    height: 32,
                                    width: '100%',
                                },
                            },
                            {
                                type: 'text',
                                label: 'Nội dung',
                                name: 'content',
                                commonStyle: {
                                    height: 32,
                                    width: '100%',
                                },
                            },
                        ],
                        configStorage: {
                            formConfigId: 220,
                        },
                    },
                },
                children: ['D7L7QpDvd1'],
            },
            D7L7QpDvd1: {
                id: 'D7L7QpDvd1',
                parentId: 'lbT8UTPjAn',
                tag: 'buttonv2',
                resolvedName: 'ButtonSubmitV3Editor',
                style: {
                    justifyContent: 'flex-start',
                },
                isCanvas: false,
                customAttributes: {
                    buttonv2: {
                        responsive: {
                            hiddenXs: false,
                            hiddenMd: false,
                        },
                        text: '<p>Bấm vào đây</p>',
                        buttonStyle: {
                            borderRadius: 4,
                            backgroundColor: 'rgba(37, 141, 255, 1)',
                            color: 'rgba(255, 255, 255, 1)',
                            height: 32,
                            width: 160,
                        },
                        iconConfig: {
                            position: 'left',
                            spacing: 8,
                            show: true,
                            icon: {
                                size: 24,
                            },
                        },
                    },
                },
                children: [],
            },
        };
        const oldKeys = Object.keys(pageContent);
        const copyPageContent = clonePageContent(pageContent, mockCallback);
        const newKeys = Object.keys(copyPageContent);
        newKeys
            .filter((el) => el !== ROOT)
            .forEach((el) => {
            expect(oldKeys.filter((k) => k !== ROOT).includes(el)).toBeFalsy();
        });
        expect(Object.keys(copyPageContent).includes(ROOT)).toBeTruthy();
        Object.entries(copyPageContent).forEach(([k, v]) => {
            expect(k).toEqual(v.id);
            if (k !== ROOT) {
                expect(newKeys.includes(v.parentId)).toBeTruthy();
            }
            v.children.forEach((el) => {
                expect(newKeys.includes(el)).toBeTruthy();
            });
        });
    });
    it('clonePageContent - miss expectation - page content full - not include ROOT', async () => {
        const pageContent = {
            fHg9VaNM: {
                id: 'fHg9VaNM',
                elementId: 'fHg9VaNM',
                parentId: 'ROOT',
                tag: 'popupv1',
                resolvedName: 'PopupEditorV1',
                style: {
                    width: 400,
                    padding: {
                        top: 16,
                        left: 16,
                        right: 16,
                        bottom: 16,
                    },
                    backgroundColor: '#fff',
                },
                isCanvas: true,
                customAttributes: {
                    popupv1: {
                        responsive: {
                            hiddenMd: false,
                            hiddenXs: false,
                        },
                        maskClosable: true,
                        maskStyle: {
                            backgroundColor: 'rgba(0, 0, 0, 0.1)',
                        },
                        position: 'default',
                        zIndex: 1050,
                        name: 'fHg9VaNM',
                        isMainPopup: true,
                        displayOnVisitPage: true,
                    },
                },
                children: ['eQOugln_vf'],
            },
            eQOugln_vf: {
                id: 'eQOugln_vf',
                parentId: 'fHg9VaNM',
                tag: 'formv4',
                resolvedName: 'FormV4Editor',
                style: {},
                isCanvas: true,
                customAttributes: {
                    formv4: {
                        responsive: {
                            hiddenXs: false,
                            hiddenMd: false,
                        },
                        formStyle: {
                            flexDirection: 'column',
                            gap: 8,
                        },
                        inputStyle: {
                            borderRadius: 4,
                        },
                        showLabel: true,
                        submits: [],
                        hiddenFields: [],
                        response: {
                            custom: [],
                            success: '.oj2oqyun',
                            successPage: '',
                            responseType: 'default',
                        },
                        inputs: [
                            {
                                type: 'text',
                                label: 'Họ tên',
                                required: true,
                                name: 'name',
                                commonStyle: {
                                    height: 32,
                                    width: '100%',
                                },
                            },
                            {
                                type: 'text',
                                label: 'Nội dung',
                                name: 'content',
                                commonStyle: {
                                    height: 32,
                                    width: '100%',
                                },
                            },
                        ],
                    },
                },
                children: ['DUgCqG9K0S'],
            },
            DUgCqG9K0S: {
                id: 'DUgCqG9K0S',
                parentId: 'eQOugln_vf',
                tag: 'buttonv2',
                resolvedName: 'ButtonSubmitV3Editor',
                style: {
                    justifyContent: 'flex-start',
                },
                isCanvas: false,
                customAttributes: {
                    buttonv2: {
                        responsive: {
                            hiddenXs: false,
                            hiddenMd: false,
                        },
                        text: '<p>Bấm vào đây</p>',
                        buttonStyle: {
                            borderRadius: 4,
                            backgroundColor: 'rgba(37, 141, 255, 1)',
                            color: 'rgba(255, 255, 255, 1)',
                            height: 32,
                            width: 160,
                        },
                        iconConfig: {
                            position: 'left',
                            spacing: 8,
                            show: true,
                            icon: {
                                size: 24,
                            },
                        },
                    },
                },
                children: [],
            },
            '.oj2oqyun': {
                id: '.oj2oqyun',
                elementId: '.oj2oqyun',
                parentId: 'ROOT',
                tag: 'popupv1',
                resolvedName: 'PopupEditorV1',
                style: {
                    width: 400,
                    height: 200,
                    backgroundColor: '#fff',
                    padding: {
                        left: 16,
                        right: 16,
                        bottom: 16,
                        top: 16,
                    },
                    backgroundSize: 'cover',
                    borderRadius: 12,
                },
                isCanvas: true,
                customAttributes: {
                    popupv1: {
                        responsive: {
                            hiddenXs: false,
                            hiddenMd: false,
                        },
                        maskClosable: true,
                        maskStyle: {
                            backgroundColor: '#0000004a',
                        },
                        position: 'default',
                        zIndex: 1050,
                        name: 'popup_success_4f5f2ac2-c73a-4588-acc9-52e84e5c16d2',
                    },
                },
                children: ['.t4g8boiw'],
            },
            '.t4g8boiw': {
                id: '.t4g8boiw',
                parentId: '.oj2oqyun',
                tag: 'buttonv2',
                resolvedName: 'ButtonEditorV2',
                style: {
                    justifyContent: 'center',
                    margin: {
                        top: 16,
                    },
                },
                isCanvas: false,
                customAttributes: {
                    buttonv2: {
                        responsive: {
                            hiddenXs: false,
                            hiddenMd: false,
                        },
                        text: '<p>Xác nhận</p>',
                        buttonStyle: {
                            backgroundColor: 'rgba(37, 141, 255, 1)',
                            color: 'rgba(255, 255, 255, 1)',
                            height: 32,
                            width: 120,
                            borderRadius: 999,
                            backgroundSize: 'cover',
                        },
                        iconConfig: {
                            position: 'left',
                            spacing: 8,
                            show: true,
                        },
                    },
                },
                children: [],
            },
        };
        const oldKeys = Object.keys(pageContent);
        const copyPageContent = clonePageContent(pageContent, mockCallback);
        const newKeys = Object.keys(copyPageContent);
        newKeys.forEach((el) => {
            expect(oldKeys.includes(el)).toBeFalsy();
        });
        Object.entries(copyPageContent).forEach(([k, v]) => {
            expect(k).toEqual(v.id);
            if (v.parentId !== ROOT) {
                expect(newKeys.includes(v.parentId)).toBeTruthy();
            }
            v.children.forEach((el) => {
                expect(newKeys.includes(el)).toBeTruthy();
            });
        });
        const level1OldKeys = Object.keys(pageContent)
            .filter((el) => pageContent[el].parentId === ROOT)
            .sort();
        const level1NewKeys = Object.keys(copyPageContent)
            .filter((el) => copyPageContent[el].parentId === ROOT)
            .sort();
        level1OldKeys.forEach((el, index) => {
            expect(JSON.stringify(pageContent[el].customAttributes)).toBe(JSON.stringify(copyPageContent[level1NewKeys[index]].customAttributes));
        });
    });
});
