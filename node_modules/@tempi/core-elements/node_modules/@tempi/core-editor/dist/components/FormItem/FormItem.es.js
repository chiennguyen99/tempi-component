import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import { useState } from 'react';
import styled from '@emotion/styled';
import { Typography, Tooltip } from 'antd';
import { QuestionCircleOutlined } from '@ant-design/icons';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const Wrapper = styled.div`
  margin-bottom: 8px;

  &.horizontal {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    column-gap: 8px;
  }
`;
const Label = styled.div(
  ({ layout = "horizontal" }) => `
  flex: 1;
  ${layout === "vertical" ? "margin-bottom: 4px;" : ""}
`
);
const Tip = styled.div`
  margin-bottom: 8px;
  color: #d5dadf;
  font-size: 13px;
`;
const WarningMessage = styled.div`
  margin-top: 4px;
  color: #ffb307;
`;
const ErrorMessage = styled.div`
  margin-top: 4px;
  color: #d32f2f;
`;
const TooltipIcon = styled(QuestionCircleOutlined)`
  margin: inherit;
  margin-left: 1rem;
`;
const FormItem = (_a) => {
  var _b = _a, {
    className,
    layout = "horizontal",
    label,
    children,
    warning,
    tip,
    error,
    tooltip,
    description
  } = _b, rest = __objRest(_b, [
    "className",
    "layout",
    "label",
    "children",
    "warning",
    "tip",
    "error",
    "tooltip",
    "description"
  ]);
  const [labelWidth, setLabelWidth] = useState();
  const getClassName = () => {
    let cls = `${layout}`;
    if (className) {
      cls += ` ${className}`;
    }
    return cls;
  };
  const getLabelWidth = (ele) => {
    if (ele && layout === "horizontal") {
      setLabelWidth(ele.clientWidth);
    }
  };
  const getTextElement = () => {
    if (!warning && !error && (!tip || layout !== "horizontal"))
      return null;
    const textContent = /* @__PURE__ */ jsxs(Fragment, {
      children: [
        tip && layout === "horizontal" && /* @__PURE__ */ jsx(Tip, {
          children: tip
        }),
        !!warning && /* @__PURE__ */ jsx(WarningMessage, {
          children: warning
        }),
        error && /* @__PURE__ */ jsx(ErrorMessage, {
          children: error
        })
      ]
    });
    if (layout === "vertical")
      return textContent;
    return /* @__PURE__ */ jsx("div", {
      style: { marginLeft: `${labelWidth}px`, flexBasis: "100%" },
      children: textContent
    });
  };
  return /* @__PURE__ */ jsxs(Wrapper, __spreadProps(__spreadValues({
    className: getClassName()
  }, rest), {
    children: [
      !!label && /* @__PURE__ */ jsxs(Label, {
        className: "label",
        ref: getLabelWidth,
        layout,
        children: [
          /* @__PURE__ */ jsx(Typography.Title, {
            level: 5,
            style: { fontSize: 14, fontWeight: 500, marginBottom: 0 },
            children: label
          }),
          !!description && /* @__PURE__ */ jsx(Typography.Text, {
            type: "secondary",
            children: description
          }),
          tooltip && /* @__PURE__ */ jsx(Tooltip, {
            title: tooltip,
            children: /* @__PURE__ */ jsx(TooltipIcon, {
              className: "cursor-pointer"
            })
          })
        ]
      }),
      tip && layout === "vertical" && /* @__PURE__ */ jsx(Tip, {
        children: tip
      }),
      children,
      getTextElement()
    ]
  }));
};

export { FormItem };
