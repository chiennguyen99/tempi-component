'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var coreRenderer = require('@tempi/core-renderer');
var useTracking = require('../hooks/useTracking.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const BuilderStateContext = React__default["default"].createContext({});
const BuilderProvider = (_a) => {
  var _b = _a, {
    children,
    trackHelper,
    initialDevice = "desktop",
    storeState,
    extraBuilderState
  } = _b, rest = __objRest(_b, [
    "children",
    "trackHelper",
    "initialDevice",
    "storeState",
    "extraBuilderState"
  ]);
  const {
    enable = false,
    target = "pageBuilder",
    screenName = "PageBuilder"
  } = trackHelper || {};
  const [draggingNode, setDraggingNode] = React.useState();
  const [insertIndex, setInsertIndex] = React.useState();
  const [showSettingDialog, setShowSettingDialog] = React.useState();
  const [frame, setFrame] = React.useState();
  const [openElementMenu, setOpenElementMenu] = React.useState(false);
  const { trackManual: track, trackCustomEvent } = useTracking.useTracking(screenName);
  const [device, setDevice] = React.useState(initialDevice);
  const [showHiddenElements, setShowHiddenElements] = React.useState(true);
  const [allowConfigResponsive, setAllowConfigResponsive] = React.useState(true);
  const [hideBubbleOnEditor, setHideBubbleOnEditor] = React.useState(false);
  const [showModalSelectBlock, setShowModalSelectBlock] = React.useState(false);
  const [showModalSelectPopup, setShowModalSelectPopup] = React.useState(false);
  const [relatedNodeId, setRelatedNodeId] = React.useState(void 0);
  const [showBubbleSetting, setShowBubbleSetting] = React.useState(false);
  const [isEditingText, setIsEditingText] = React.useState(false);
  const getAttrTracking = ({
    regionName,
    contentName,
    payload = {}
  }) => {
    let attrTracking = {};
    if (enable) {
      attrTracking = coreRenderer.getTrackingData({
        isTrackContent: true,
        regionName,
        contentName,
        index: null,
        target,
        payload: JSON.stringify(__spreadValues({
          screenName
        }, payload))
      });
    }
    return attrTracking;
  };
  const trackManual = (_a2) => {
    var rest2 = __objRest(_a2, []);
    if (enable) {
      track(__spreadValues({ target }, rest2));
    }
  };
  const realDevice = React.useMemo(() => {
    return device === "mobile" ? "mobile" : "desktop";
  }, [device]);
  return /* @__PURE__ */ jsxRuntime.jsx(BuilderStateContext.Provider, {
    value: __spreadValues(__spreadValues({
      draggingNode,
      setDraggingNode,
      insertIndex,
      setInsertIndex,
      showSettingDialog,
      setShowSettingDialog,
      getAttrTracking,
      track: trackManual,
      trackCustomEvent,
      setFrame,
      frame,
      openElementMenu,
      setOpenElementMenu,
      device,
      realDevice,
      setDevice,
      showHiddenElements,
      setShowHiddenElements,
      allowConfigResponsive,
      setAllowConfigResponsive,
      hideBubbleOnEditor,
      setHideBubbleOnEditor,
      isEditingText,
      setIsEditingText,
      showModalSelectBlock,
      setShowModalSelectBlock,
      showModalSelectPopup,
      setShowModalSelectPopup,
      relatedNodeId,
      setRelatedNodeId,
      showBubbleSetting,
      setShowBubbleSetting
    }, extraBuilderState), rest),
    children: /* @__PURE__ */ jsxRuntime.jsx(coreRenderer.StoreProvider, __spreadProps(__spreadValues({}, storeState), {
      device: realDevice,
      children
    }))
  });
};
function useBuilder() {
  const context = React.useContext(
    BuilderStateContext
  );
  if (!context) {
    throw new Error(
      "useBuilder must be inside a BuilderStateContext with a state value"
    );
  }
  return context;
}

exports.BuilderProvider = BuilderProvider;
exports.BuilderStateContext = BuilderStateContext;
exports.useBuilder = useBuilder;
