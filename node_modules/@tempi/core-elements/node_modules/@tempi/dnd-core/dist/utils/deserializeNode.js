'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var dndUtils = require('@tempi/dnd-utils');
var React = require('react');
var invariant = require('tiny-invariant');
var resolveComponent = require('./resolveComponent.js');
var Canvas = require('../nodes/Canvas.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var invariant__default = /*#__PURE__*/_interopDefaultLegacy(invariant);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const restoreType = (type, resolver) => typeof type === "object" && type.resolvedName ? type.resolvedName === "Canvas" ? Canvas.Canvas : resolver[type.resolvedName] : typeof type === "string" ? type : null;
const deserializeComp = (data, resolver, index) => {
  let { props } = data;
  const { type } = data;
  const main = restoreType(type, resolver);
  if (!main) {
    return;
  }
  props = Object.keys(props).reduce((result, key) => {
    const prop = props[key];
    if (prop === null || prop === void 0) {
      result[key] = null;
    } else if (typeof prop === "object" && prop.resolvedName) {
      result[key] = deserializeComp(prop, resolver);
    } else if (key === "children" && Array.isArray(prop)) {
      result[key] = prop.map((child) => {
        if (typeof child === "string") {
          return child;
        }
        return deserializeComp(child, resolver);
      });
    } else {
      result[key] = prop;
    }
    return result;
  }, {});
  if (index) {
    props.key = index;
  }
  const jsx = __spreadValues({}, React__default["default"].createElement(main, __spreadValues({}, props)));
  return __spreadProps(__spreadValues({}, jsx), {
    name: resolveComponent.resolveComponent(resolver, jsx.type)
  });
};
const deserializeNode = (data, resolver) => {
  const _a = data, { type: Comp, props: Props } = _a, nodeData = __objRest(_a, ["type", "props"]);
  const isCompAnHtmlElement = Comp !== void 0 && typeof Comp === "string";
  const isCompAUserComponent = Comp !== void 0 && Comp.resolvedName !== void 0;
  invariant__default["default"](
    isCompAnHtmlElement || isCompAUserComponent,
    dndUtils.ERROR_DESERIALIZE_COMPONENT_NOT_IN_RESOLVER.replace(
      "%displayName%",
      data.displayName
    ).replace("%availableComponents%", Object.keys(resolver).join(", "))
  );
  const { type, name, props } = deserializeComp(
    data,
    resolver
  );
  const { parent, custom, displayName, isCanvas, nodes, hidden } = nodeData;
  const linkedNodes = nodeData.linkedNodes || nodeData._childCanvas;
  return {
    type,
    name,
    displayName: displayName || name,
    props,
    custom: custom || {},
    isCanvas: !!isCanvas,
    hidden: !!hidden,
    parent,
    linkedNodes: linkedNodes || {},
    nodes: nodes || []
  };
};

exports.deserializeComp = deserializeComp;
exports.deserializeNode = deserializeNode;
