'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var dndUtils = require('@tempi/dnd-utils');
var invariant = require('tiny-invariant');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var invariant__default = /*#__PURE__*/_interopDefaultLegacy(invariant);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const getNodesFromSelector = (nodes, selector, config) => {
  const items = Array.isArray(selector) ? selector : [selector];
  const mergedConfig = __spreadValues({
    existOnly: false,
    idOnly: false
  }, config || {});
  const nodeSelectors = items.filter((item) => !!item).map((item) => {
    if (typeof item === "string") {
      return {
        node: nodes[item],
        exists: !!nodes[item]
      };
    }
    if (typeof item === "object" && !mergedConfig.idOnly) {
      const node = item;
      return {
        node,
        exists: !!nodes[node.id]
      };
    }
    return {
      node: null,
      exists: false
    };
  });
  if (mergedConfig.existOnly) {
    invariant__default["default"](
      nodeSelectors.filter((selector2) => !selector2.exists).length === 0,
      dndUtils.ERROR_INVALID_NODEID
    );
  }
  return nodeSelectors;
};

exports.getNodesFromSelector = getNodesFromSelector;
