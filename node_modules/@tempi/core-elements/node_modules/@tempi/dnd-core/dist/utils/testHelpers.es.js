import cloneDeep from 'lodash.clonedeep';
import { createNode } from './createNode.es.js';
import { editorInitialState } from '../editor/store.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const getTestNode = (parentNode) => {
  const _a = parentNode, {
    events,
    data: { nodes: childNodes, linkedNodes }
  } = _a, restParentNode = __objRest(_a, [
    "events",
    "data"
  ]);
  const validParentNode = createNode(cloneDeep(parentNode));
  parentNode = __spreadProps(__spreadValues(__spreadValues({}, validParentNode), restParentNode), {
    events: __spreadValues(__spreadValues({}, validParentNode.events), events),
    dom: parentNode.dom || validParentNode.dom
  });
  return {
    node: parentNode,
    childNodes,
    linkedNodes
  };
};
const expectEditorState = (lhs, rhs) => {
  const _a = rhs, { nodes: nodesRhs } = _a, restRhs = __objRest(_a, ["nodes"]);
  const _b = lhs, { nodes: nodesLhs } = _b, restLhs = __objRest(_b, ["nodes"]);
  expect(restLhs).toEqual(restRhs);
  const nodesRhsSimplified = Object.keys(nodesRhs).reduce((accum, id) => {
    const _a2 = nodesRhs[id], node = __objRest(_a2, ["_hydrationTimestamp", "rules"]);
    accum[id] = node;
    return accum;
  }, {});
  const nodesLhsSimplified = Object.keys(nodesLhs).reduce((accum, id) => {
    const _a2 = nodesLhs[id], node = __objRest(_a2, ["_hydrationTimestamp", "rules"]);
    accum[id] = node;
    return accum;
  }, {});
  expect(nodesLhsSimplified).toEqual(nodesRhsSimplified);
};
const createTestNodes = (rootNode) => {
  const nodes = {};
  const iterateNodes = (testNode) => {
    const { node: parentNode, childNodes, linkedNodes } = getTestNode(testNode);
    nodes[parentNode.id] = parentNode;
    if (childNodes) {
      childNodes.forEach((childTestNode, i) => {
        const {
          node: childNode,
          childNodes: grandChildNodes,
          linkedNodes: grandChildLinkedNodes
        } = getTestNode(childTestNode);
        childNode.data.parent = parentNode.id;
        nodes[childNode.id] = childNode;
        parentNode.data.nodes[i] = childNode.id;
        iterateNodes(__spreadProps(__spreadValues({}, childNode), {
          data: __spreadProps(__spreadValues({}, childNode.data), {
            nodes: grandChildNodes || [],
            linkedNodes: grandChildLinkedNodes || {}
          })
        }));
      });
    }
    if (linkedNodes) {
      Object.keys(linkedNodes).forEach((linkedId) => {
        const {
          node: childNode,
          childNodes: grandChildNodes,
          linkedNodes: grandChildLinkedNodes
        } = getTestNode(linkedNodes[linkedId]);
        parentNode.data.linkedNodes[linkedId] = childNode.id;
        childNode.data.parent = parentNode.id;
        nodes[childNode.id] = childNode;
        iterateNodes(__spreadProps(__spreadValues({}, childNode), {
          data: __spreadProps(__spreadValues({}, childNode.data), {
            nodes: grandChildNodes || [],
            linkedNodes: grandChildLinkedNodes || {}
          })
        }));
      });
    }
  };
  iterateNodes(rootNode);
  return nodes;
};
const createTestState = (state = {}) => {
  const { nodes: rootNode, events } = state;
  return __spreadProps(__spreadValues(__spreadValues({}, editorInitialState), state), {
    nodes: rootNode ? createTestNodes(rootNode) : {},
    events: __spreadValues(__spreadValues({}, editorInitialState.events), events || {})
  });
};

export { createTestNodes, createTestState, expectEditorState };
