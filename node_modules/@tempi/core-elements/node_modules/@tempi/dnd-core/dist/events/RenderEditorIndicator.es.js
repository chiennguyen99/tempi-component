import { RenderIndicator, getDOMInfo } from '@tempi/dnd-utils';
import React, { useEffect } from 'react';
import { useEventHandler } from './EventContext.es.js';
import movePlaceholder from './movePlaceholder.es.js';
import { useInternalEditor } from '../editor/useInternalEditor.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const RenderEditorIndicator = () => {
  const { indicator, indicatorOptions, enabled } = useInternalEditor(
    (state) => ({
      indicator: state.indicator,
      indicatorOptions: state.options.indicator,
      enabled: state.options.enabled
    })
  );
  const handler = useEventHandler();
  useEffect(() => {
    if (!handler) {
      return;
    }
    if (!enabled) {
      handler.disable();
      return;
    }
    handler.enable();
  }, [enabled, handler]);
  if (!indicator) {
    return null;
  }
  return React.createElement(RenderIndicator, {
    style: __spreadProps(__spreadValues({}, movePlaceholder(
      indicator.placement,
      getDOMInfo(indicator.placement.parent.dom),
      indicator.placement.currentNode && getDOMInfo(indicator.placement.currentNode.dom),
      indicatorOptions.thickness
    )), {
      backgroundColor: indicator.error ? indicatorOptions.error : indicatorOptions.success,
      transition: indicatorOptions.transition || "0.2s ease-in"
    }),
    parentDom: indicator.placement.parent.dom
  });
};

export { RenderEditorIndicator };
