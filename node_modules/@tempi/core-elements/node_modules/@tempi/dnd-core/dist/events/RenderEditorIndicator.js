'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var dndUtils = require('@tempi/dnd-utils');
var React = require('react');
var EventContext = require('./EventContext.js');
var movePlaceholder = require('./movePlaceholder.js');
var useInternalEditor = require('../editor/useInternalEditor.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const RenderEditorIndicator = () => {
  const { indicator, indicatorOptions, enabled } = useInternalEditor.useInternalEditor(
    (state) => ({
      indicator: state.indicator,
      indicatorOptions: state.options.indicator,
      enabled: state.options.enabled
    })
  );
  const handler = EventContext.useEventHandler();
  React.useEffect(() => {
    if (!handler) {
      return;
    }
    if (!enabled) {
      handler.disable();
      return;
    }
    handler.enable();
  }, [enabled, handler]);
  if (!indicator) {
    return null;
  }
  return React__default["default"].createElement(dndUtils.RenderIndicator, {
    style: __spreadProps(__spreadValues({}, movePlaceholder(
      indicator.placement,
      dndUtils.getDOMInfo(indicator.placement.parent.dom),
      indicator.placement.currentNode && dndUtils.getDOMInfo(indicator.placement.currentNode.dom),
      indicatorOptions.thickness
    )), {
      backgroundColor: indicator.error ? indicatorOptions.error : indicatorOptions.success,
      transition: indicatorOptions.transition || "0.2s ease-in"
    }),
    parentDom: indicator.placement.parent.dom
  });
};

exports.RenderEditorIndicator = RenderEditorIndicator;
