'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var dndUtils = require('@tempi/dnd-utils');
var React = require('react');
var invariant = require('tiny-invariant');
var NodeContext = require('./NodeContext.js');
var useInternalEditor = require('../editor/useInternalEditor.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var invariant__default = /*#__PURE__*/_interopDefaultLegacy(invariant);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function useInternalNode(collect) {
  const context = React.useContext(NodeContext.NodeContext);
  invariant__default["default"](context, dndUtils.ERROR_USE_NODE_OUTSIDE_OF_EDITOR_CONTEXT);
  const { id, related } = context;
  const _a = useInternalEditor.useInternalEditor(
    (state) => id && state.nodes[id] && collect && collect(state.nodes[id])
  ), {
    actions: EditorActions,
    query,
    connectors: editorConnectors
  } = _a, collected = __objRest(_a, [
    "actions",
    "query",
    "connectors"
  ]);
  const connectors = React.useMemo(
    () => dndUtils.wrapConnectorHooks({
      connect: (dom) => editorConnectors.connect(dom, id),
      drag: (dom) => editorConnectors.drag(dom, id)
    }),
    [editorConnectors, id]
  );
  const actions = React.useMemo(() => {
    return {
      setProp: (cb, throttleRate) => {
        if (throttleRate) {
          EditorActions.history.throttle(throttleRate).setProp(id, cb);
        } else {
          EditorActions.setProp(id, cb);
        }
      },
      setCustom: (cb, throttleRate) => {
        if (throttleRate) {
          EditorActions.history.throttle(throttleRate).setCustom(id, cb);
        } else {
          EditorActions.setCustom(id, cb);
        }
      },
      setHidden: (bool) => EditorActions.setHidden(id, bool)
    };
  }, [EditorActions, id]);
  return __spreadProps(__spreadValues({}, collected), {
    id,
    related,
    inNodeContext: !!context,
    actions,
    connectors
  });
}

exports.useInternalNode = useInternalNode;
