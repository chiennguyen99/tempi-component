import { useRef, useCallback, useState, useEffect } from 'react';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
function useCollector(store, collector) {
  const { subscribe, getState, actions, query } = store;
  const initial = useRef(true);
  const collected = useRef(null);
  const collectorRef = useRef(collector);
  collectorRef.current = collector;
  const onCollect = useCallback(
    (collected2) => {
      return __spreadProps(__spreadValues({}, collected2), { actions, query });
    },
    [actions, query]
  );
  if (initial.current && collector) {
    collected.current = collector(getState(), query);
    initial.current = false;
  }
  const [renderCollected, setRenderCollected] = useState(
    onCollect(collected.current)
  );
  useEffect(() => {
    let unsubscribe;
    if (collectorRef.current) {
      unsubscribe = subscribe(
        (current) => collectorRef.current(current, query),
        (collected2) => {
          setRenderCollected(onCollect(collected2));
        }
      );
    }
    return () => {
      if (unsubscribe)
        unsubscribe();
    };
  }, [onCollect, query, subscribe]);
  return renderCollected;
}

export { useCollector };
