'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var dndUtils = require('@tempi/dnd-utils');
var React = require('react');
var useInternalEditor = require('../editor/useInternalEditor.js');
var NodeElement = require('../nodes/NodeElement.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const RenderRootNode = () => {
  const { timestamp } = useInternalEditor.useInternalEditor((state) => ({
    timestamp: state.nodes[dndUtils.ROOT_NODE] && state.nodes[dndUtils.ROOT_NODE]._hydrationTimestamp
  }));
  if (!timestamp) {
    return null;
  }
  return /* @__PURE__ */ jsxRuntime.jsx(NodeElement.NodeElement, {
    id: dndUtils.ROOT_NODE
  }, timestamp);
};
const Frame = ({
  children,
  json,
  data
}) => {
  const { actions, query } = useInternalEditor.useInternalEditor();
  if (!!json) {
    dndUtils.deprecationWarning("<Frame json={...} />", {
      suggest: "<Frame data={...} />"
    });
  }
  const initialState = React.useRef({
    initialChildren: children,
    initialData: data || json
  });
  React.useEffect(() => {
    const { initialChildren, initialData } = initialState.current;
    if (initialData) {
      actions.history.ignore().deserialize(initialData);
    } else if (initialChildren) {
      const rootNode = React__default["default"].Children.only(
        initialChildren
      );
      const node = query.parseReactElement(rootNode).toNodeTree((node2, jsx2) => {
        if (jsx2 === rootNode) {
          node2.id = dndUtils.ROOT_NODE;
        }
        return node2;
      });
      actions.history.ignore().addNodeTree(node);
    }
  }, [actions, query]);
  return /* @__PURE__ */ jsxRuntime.jsx(RenderRootNode, {});
};

exports.Frame = Frame;
