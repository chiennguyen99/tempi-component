import { jsx } from 'react/jsx-runtime';
import React, { useMemo } from 'react';
import { SimpleElement } from './SimpleElement.es.js';
import { NodeElement } from '../nodes/NodeElement.es.js';
import { useInternalNode } from '../nodes/useInternalNode.es.js';

const DefaultRender = () => {
  const { type, props, nodes, hydrationTimestamp } = useInternalNode(
    (node) => ({
      type: node.data.type,
      props: node.data.props,
      nodes: node.data.nodes,
      hydrationTimestamp: node._hydrationTimestamp
    })
  );
  return useMemo(() => {
    if (!type)
      return /* @__PURE__ */ jsx("div", {});
    let render = React.createElement(type, props, props == null ? void 0 : props.children);
    if (nodes && nodes.length > 0) {
      render = React.createElement(
        type,
        props,
        ...nodes.map((id) => /* @__PURE__ */ jsx(NodeElement, {
          id
        }, id))
      );
    }
    if (typeof type == "string") {
      return /* @__PURE__ */ jsx(SimpleElement, {
        render
      });
    }
    return render;
  }, [type, props, hydrationTimestamp, nodes]);
};

export { DefaultRender };
