import { jsx } from 'react/jsx-runtime';
import { deprecationWarning, ROOT_NODE } from '@tempi/dnd-utils';
import React, { useRef, useEffect } from 'react';
import { useInternalEditor } from '../editor/useInternalEditor.es.js';
import { NodeElement } from '../nodes/NodeElement.es.js';

const RenderRootNode = () => {
  const { timestamp } = useInternalEditor((state) => ({
    timestamp: state.nodes[ROOT_NODE] && state.nodes[ROOT_NODE]._hydrationTimestamp
  }));
  if (!timestamp) {
    return null;
  }
  return /* @__PURE__ */ jsx(NodeElement, {
    id: ROOT_NODE
  }, timestamp);
};
const Frame = ({
  children,
  json,
  data
}) => {
  const { actions, query } = useInternalEditor();
  if (!!json) {
    deprecationWarning("<Frame json={...} />", {
      suggest: "<Frame data={...} />"
    });
  }
  const initialState = useRef({
    initialChildren: children,
    initialData: data || json
  });
  useEffect(() => {
    const { initialChildren, initialData } = initialState.current;
    if (initialData) {
      actions.history.ignore().deserialize(initialData);
    } else if (initialChildren) {
      const rootNode = React.Children.only(
        initialChildren
      );
      const node = query.parseReactElement(rootNode).toNodeTree((node2, jsx2) => {
        if (jsx2 === rootNode) {
          node2.id = ROOT_NODE;
        }
        return node2;
      });
      actions.history.ignore().addNodeTree(node);
    }
  }, [actions, query]);
  return /* @__PURE__ */ jsx(RenderRootNode, {});
};

export { Frame };
