import { ERROR_USE_EDITOR_OUTSIDE_OF_EDITOR_CONTEXT, useCollector, wrapConnectorHooks } from '@tempi/dnd-utils';
import { useContext, useMemo, useEffect } from 'react';
import invariant from 'tiny-invariant';
import { EditorContext } from './EditorContext.es.js';
import { useEventHandler } from '../events/EventContext.es.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
function useInternalEditor(collector) {
  const handler = useEventHandler();
  const store = useContext(EditorContext);
  invariant(store, ERROR_USE_EDITOR_OUTSIDE_OF_EDITOR_CONTEXT);
  const collected = useCollector(store, collector);
  const connectorsUsage = useMemo(
    () => handler && handler.createConnectorsUsage(),
    [handler]
  );
  useEffect(() => {
    connectorsUsage.register();
    return () => {
      connectorsUsage.cleanup();
    };
  }, [connectorsUsage]);
  const connectors = useMemo(
    () => connectorsUsage && wrapConnectorHooks(connectorsUsage.connectors),
    [connectorsUsage]
  );
  return __spreadProps(__spreadValues({}, collected), {
    connectors,
    inContext: !!store,
    store
  });
}

export { useInternalEditor };
