import { jsx } from 'react/jsx-runtime';
import { useEffectOnce, ERROR_TOP_LEVEL_ELEMENT_NO_ID } from '@tempi/dnd-utils';
import React, { useState } from 'react';
import invariant from 'tiny-invariant';
import { NodeElement } from './NodeElement.es.js';
import { useInternalNode } from './useInternalNode.es.js';
import { useInternalEditor } from '../editor/useInternalEditor.es.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const defaultElementProps = {
  is: "div",
  canvas: false,
  custom: {},
  hidden: false
};
const elementPropToNodeData = {
  is: "type",
  canvas: "isCanvas"
};
function Element(_a) {
  var _b = _a, {
    id,
    children
  } = _b, elementProps = __objRest(_b, [
    "id",
    "children"
  ]);
  const { is } = __spreadValues(__spreadValues({}, defaultElementProps), elementProps);
  const { query, actions } = useInternalEditor();
  const { node, inNodeContext } = useInternalNode((node2) => ({
    node: {
      id: node2.id,
      data: node2.data
    }
  }));
  const [linkedNodeId, setLinkedNodeId] = useState(null);
  useEffectOnce(() => {
    invariant(!!id, ERROR_TOP_LEVEL_ELEMENT_NO_ID);
    const { id: nodeId, data } = node;
    if (inNodeContext) {
      let linkedNodeId2;
      const existingNode = data.linkedNodes && data.linkedNodes[id] && query.node(data.linkedNodes[id]).get();
      if (existingNode && existingNode.data.type === is) {
        linkedNodeId2 = existingNode.id;
      } else {
        const linkedElement = React.createElement(
          Element,
          elementProps,
          children
        );
        const tree = query.parseReactElement(linkedElement).toNodeTree();
        linkedNodeId2 = tree.rootNodeId;
        actions.history.ignore().addLinkedNodeFromTree(tree, nodeId, id);
      }
      setLinkedNodeId(linkedNodeId2);
    }
  });
  return linkedNodeId ? /* @__PURE__ */ jsx(NodeElement, {
    id: linkedNodeId
  }) : null;
}

export { Element, defaultElementProps, elementPropToNodeData };
