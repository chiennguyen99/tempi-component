var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const mergeNodes = (rootNode, childrenNodes) => {
  if (childrenNodes.length < 1) {
    return { [rootNode.id]: rootNode };
  }
  const nodes = childrenNodes.map(({ rootNodeId }) => rootNodeId);
  const nodeWithChildren = __spreadProps(__spreadValues({}, rootNode), { data: __spreadProps(__spreadValues({}, rootNode.data), { nodes }) });
  const rootNodes = { [rootNode.id]: nodeWithChildren };
  return childrenNodes.reduce((accum, tree) => {
    const currentNode = tree.nodes[tree.rootNodeId];
    return __spreadProps(__spreadValues(__spreadValues({}, accum), tree.nodes), {
      [currentNode.id]: __spreadProps(__spreadValues({}, currentNode), {
        data: __spreadProps(__spreadValues({}, currentNode.data), {
          parent: rootNode.id
        })
      })
    });
  }, rootNodes);
};
const mergeTrees = (rootNode, childrenNodes) => ({
  rootNodeId: rootNode.id,
  nodes: mergeNodes(rootNode, childrenNodes)
});

export { mergeTrees };
