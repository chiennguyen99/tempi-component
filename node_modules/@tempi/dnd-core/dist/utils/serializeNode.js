'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var resolveComponent = require('./resolveComponent.js');

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const reduceType = (type, resolver) => {
  if (typeof type === "string") {
    return type;
  }
  return { resolvedName: resolveComponent.resolveComponent(resolver, type) };
};
const serializeComp = (data, resolver) => {
  let { props } = data;
  const { type, isCanvas } = data;
  props = Object.keys(props).reduce((result, key) => {
    const prop = props[key];
    if (prop === void 0 || prop === null || typeof prop === "function") {
      return result;
    }
    if (key === "children" && typeof prop !== "string") {
      result[key] = React.Children.map(prop, (child) => {
        if (typeof child === "string") {
          return child;
        }
        return serializeComp(child, resolver);
      });
    } else if (typeof prop.type === "function") {
      result[key] = serializeComp(prop, resolver);
    } else {
      result[key] = prop;
    }
    return result;
  }, {});
  return {
    type: reduceType(type, resolver),
    isCanvas: !!isCanvas,
    props
  };
};
const serializeNode = (data, resolver) => {
  const _a = data, { type, props, isCanvas, name } = _a, nodeData = __objRest(_a, ["type", "props", "isCanvas", "name"]);
  const reducedComp = serializeComp({ type, isCanvas, props }, resolver);
  return __spreadValues(__spreadValues({}, reducedComp), nodeData);
};

exports.serializeComp = serializeComp;
exports.serializeNode = serializeNode;
